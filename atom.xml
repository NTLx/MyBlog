<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://www.ntlx.top</id>
    <title>NTLx&apos;s Blog</title>
    <updated>2021-05-20T04:53:09.299Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="http://www.ntlx.top"/>
    <link rel="self" href="http://www.ntlx.top/atom.xml"/>
    <subtitle>My Tech Notes &amp; Thoughts</subtitle>
    <logo>http://www.ntlx.top/images/avatar.png</logo>
    <icon>http://www.ntlx.top/favicon.ico</icon>
    <rights>All rights reserved 2021, NTLx&apos;s Blog</rights>
    <entry>
        <title type="html"><![CDATA[Ubuntu Server Installation Note]]></title>
        <id>http://www.ntlx.top/post/ubuntu-server-installation-note/</id>
        <link href="http://www.ntlx.top/post/ubuntu-server-installation-note/">
        </link>
        <updated>2021-05-20T02:38:02.000Z</updated>
        <summary type="html"><![CDATA[<p>How to deploy Ubuntu Server operation system to a server or any computer.</p>
]]></summary>
        <content type="html"><![CDATA[<p>How to deploy Ubuntu Server operation system to a server or any computer.</p>
<!-- more -->
<h1 id="download-os-image">Download OS image</h1>
<p>Ubuntu 18.04.5 Server <a href="https://mirrors.tuna.tsinghua.edu.cn/ubuntu-releases/bionic/ubuntu-18.04.5-live-server-amd64.iso">Download Link</a></p>
<h1 id="create-bootable-usb-drive">Create bootable USB drive</h1>
<p>Rufus 3.14 (Portable) <a href="https://github.com/pbatard/rufus/releases/download/v3.14/rufus-3.14p.exe">Download Link</a></p>
<figure data-type="image" tabindex="1"><img src="https://rufus.ie/pics/rufus_en.png" alt="Rufus" loading="lazy"></figure>
<p>You can find usage instructions on <a href="https://rufus.ie/en/">Rufus Official Web Site</a>.</p>
<h1 id="install-system">Install System</h1>
<h2 id="devices-dependency">Devices Dependency</h2>
<ul>
<li>Plug in the bootable USB drive which created by Rufus &amp; OS image to target server</li>
<li>Plug in a screen to target server</li>
<li>Plug in a keyboard</li>
<li>Connect Power</li>
<li>Connect network (optional)</li>
</ul>
<h2 id="installation">Installation</h2>
<ol>
<li>Power on.</li>
<li>Select language (English).<br>
<img src="https://cdn.jsdelivr.net/gh/NTLx/Pic/PicGo/20210520105855.png" alt="" loading="lazy"></li>
<li>If you see screen as below, choose <code>Continue without updating</code>.<br>
<img src="https://cdn.jsdelivr.net/gh/NTLx/Pic/PicGo/20210520110013.png" alt="" loading="lazy"></li>
<li>Keep the default layout, then choos <code>Done</code>.<br>
<img src="https://cdn.jsdelivr.net/gh/NTLx/Pic/PicGo/20210520110420.png" alt="" loading="lazy"></li>
<li>If you have no specific network requirment, just keep the default network settings, choose <code>Done</code>.<br>
<img src="https://cdn.jsdelivr.net/gh/NTLx/Pic/PicGo/20210520110628.png" alt="" loading="lazy"></li>
<li>Then you'll be in <code>Configure proxy</code> step. Usually, we keep the default settings and just choose <code>Done</code>, but if you want update system through the internet during the installation or you want add some software during the installation, you may need set proxy correct to get some <code>foreign resources</code>.<br>
<img src="https://cdn.jsdelivr.net/gh/NTLx/Pic/PicGo/20210520110655.png" alt="" loading="lazy"></li>
<li>Compared to proxy, set a suitable mirror is far more usefull for system installation (if you need update or add software during the installation from the internet). For convenience, we keep the default setting and choose <code>Done</code>.<br>
<img src="https://cdn.jsdelivr.net/gh/NTLx/Pic/PicGo/20210520111422.png" alt="" loading="lazy"></li>
<li>In <code>Guided storage configuration</code>, move cursor down and uncheck <code>Set up this disk as an LVM group</code>, after this operation, the screen will look like below, then just choose <code>Done</code>.<br>
<img src="https://cdn.jsdelivr.net/gh/NTLx/Pic/PicGo/20210520112032.png" alt="" loading="lazy"></li>
<li>We need a little modify in <code>Storage configuration</code>. You'll see the pic below in this step.<br>
<img src="https://cdn.jsdelivr.net/gh/NTLx/Pic/PicGo/20210520112326.png" alt="" loading="lazy">
<ol>
<li>Move cursor up to <code>partition 2</code> (here is only show settings for one disk for example), then hit <code>Enter</code>, the screen will be look like below:<br>
<img src="https://cdn.jsdelivr.net/gh/NTLx/Pic/PicGo/20210520112433.png" alt="" loading="lazy"></li>
<li>Choose <code>Edit</code> and then change <code>Format</code> to <code>xfs</code>, the screen will be look like below:<br>
<img src="https://cdn.jsdelivr.net/gh/NTLx/Pic/PicGo/20210520112603.png" alt="" loading="lazy"></li>
<li><code>Save</code> settings and choose <code>Done</code>, then choose <code>Continue</code> when you see below:<br>
<img src="https://cdn.jsdelivr.net/gh/NTLx/Pic/PicGo/20210520112727.png" alt="" loading="lazy"></li>
</ol>
</li>
<li>Set suitable info for your system, the screen will be look like below:<br>
<img src="https://cdn.jsdelivr.net/gh/NTLx/Pic/PicGo/20210520112824.png" alt="" loading="lazy">
<blockquote>
<p>Recommand set profile like this:</p>
<ul>
<li>Your name: manager</li>
<li>Your server's name: ubuntu</li>
<li>Pick a username: manager</li>
<li>Choose a password: YOURPASSWORD</li>
<li>Confirm your password: YOURPASSWORD<br>
And the screen will be look like this:<br>
<img src="https://cdn.jsdelivr.net/gh/NTLx/Pic/PicGo/20210520113204.png" alt="" loading="lazy"></li>
</ul>
</blockquote>
</li>
<li>In <code>SSH Setup</code>, you need check <code>Install OpenSSH server</code> in order to connect your server through the internet after the system installaion, the screen will be look like below:<br>
<img src="https://cdn.jsdelivr.net/gh/NTLx/Pic/PicGo/20210520113338.png" alt="" loading="lazy"></li>
<li>Don't choose any package in <code>Featured Server Snaps</code>, just choose <code>Done</code> directly.<br>
<img src="https://cdn.jsdelivr.net/gh/NTLx/Pic/PicGo/20210520113402.png" alt="" loading="lazy"></li>
<li>Then you'll see the installation progress screen:<br>
<img src="https://cdn.jsdelivr.net/gh/NTLx/Pic/PicGo/20210520113540.png" alt="" loading="lazy"></li>
<li>When you see screen like below, you can <code>Reboot</code> system and that's all of the basic installation steps (remove USB device may be required, there will be notes on the screen).<br>
<img src="https://cdn.jsdelivr.net/gh/NTLx/Pic/PicGo/20210520122209.png" alt="" loading="lazy"></li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Add Linux to AD]]></title>
        <id>http://www.ntlx.top/post/add-linux-to-ad/</id>
        <link href="http://www.ntlx.top/post/add-linux-to-ad/">
        </link>
        <updated>2021-05-18T05:19:42.000Z</updated>
        <summary type="html"><![CDATA[<p>Tested on Ubuntu</p>
]]></summary>
        <content type="html"><![CDATA[<p>Tested on Ubuntu</p>
<!-- more -->
<h1 id="host-name">Host Name</h1>
<pre><code class="language-bash">cat &gt; /etc/hostname
vmpc-ubuntu.cm.com

# test hostname
hostname -f
host vmpc-ubuntu.cm.com
host xxx.xxx.xxx.xxx
</code></pre>
<h1 id="dns">DNS</h1>
<p>Both hostname and reverse lookup had been set up before further settings.</p>
<h1 id="time-synchronisation">Time Synchronisation</h1>
<blockquote>
<p>The default clock skew tolerance is 300 seconds (5 minutes)</p>
</blockquote>
<pre><code class="language-bash">cat &gt;&gt; /etc/systemd/timesyncd.conf
NTP=ad.cm.com
FallbackNTP=ntp.ubuntu.com
</code></pre>
<p>Test:</p>
<pre><code class="language-bash">timedatectl status
</code></pre>
<h1 id="pbis-open-installation">PBIS-Open Installation</h1>
<p>Download <code>PowerBroker Identity Service Open</code> &quot;AD Bridge&quot; on <a href="https://github.com/BeyondTrust/pbis-open/releases">Github</a>, then:</p>
<pre><code class="language-bash">sudo pbis-open-9.1.0.551.linux.x86_64.deb.sh
</code></pre>
<h1 id="add-sudo-privileges">Add sudo privileges</h1>
<pre><code class="language-bash">cat &gt; /etc/sudoers.d/local
CM\\CM021 ALL=(ALL) ALL
%CM\\domain^admins ALL=(ALL) ALL
</code></pre>
<h1 id="pbis-open-settings">PBIS-Open Settings</h1>
<p>Change the default shell (from <code>/bin/sh</code> to <code>/bin/bash</code>):</p>
<pre><code class="language-bash">sudo /opt/pbis/bin/config LoginShellTemplate /bin/bash
</code></pre>
<p>Change <code>home</code> dir (default is <code>/home/local/&lt;Domain Name&gt;/&lt;User Name&gt;</code>):</p>
<pre><code class="language-bash">sudo /opt/pbis/bin/config HomeDirTemplate %H/%D/%U
</code></pre>
<blockquote>
<p><code>%H</code> = <code>home</code> , <code>%D</code> = <code>AD Name</code> , <code>%U</code> = <code>User Name</code></p>
</blockquote>
<h1 id="pbis-open-commands">PBIS-Open Commands</h1>
<p>Join AD:</p>
<pre><code class="language-bash">sudo domainjoin-cli join --disable ssh cm.com Administrator
</code></pre>
<p>Check status:</p>
<pre><code class="language-bash">sudo domainjoin-cli query
</code></pre>
<p>Check users in AD:</p>
<pre><code class="language-bash">/opt/pbis/bin/enum-users
</code></pre>
<p>Check groups in AD:</p>
<pre><code class="language-bash">/opt/pbis/bin/enum-groups
</code></pre>
<p>Check groups for a user:</p>
<pre><code class="language-bash">/opt/pbis/bin/list-groups-for-user
</code></pre>
<p>Leave current AD:</p>
<pre><code class="language-bash">sudo domainjoin-cli leave
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Active Directory]]></title>
        <id>http://www.ntlx.top/post/active-directory/</id>
        <link href="http://www.ntlx.top/post/active-directory/">
        </link>
        <updated>2021-05-18T05:17:04.000Z</updated>
        <summary type="html"><![CDATA[<p>Usefull Settings Collection</p>
]]></summary>
        <content type="html"><![CDATA[<p>Usefull Settings Collection</p>
<!-- more -->
<h1 id="windows-server">Windows Server</h1>
<h2 id="配置文件漫游">配置文件漫游</h2>
<p>路径设置示例：<code>\\dsm.cm.com\Remote\%username%</code></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[RSS Collections]]></title>
        <id>http://www.ntlx.top/post/rss-collections/</id>
        <link href="http://www.ntlx.top/post/rss-collections/">
        </link>
        <updated>2021-05-18T05:10:23.000Z</updated>
        <summary type="html"><![CDATA[<p>Collect Great RSS Sources</p>
]]></summary>
        <content type="html"><![CDATA[<p>Collect Great RSS Sources</p>
<!-- more -->
<ul>
<li><a href="https://sspai.com/feed">少数派</a></li>
<li><a href="http://feeds.feedburner.com/playpc">電腦玩物</a></li>
<li><a href="https://www.waerfa.com/feed">Mac 玩儿法</a></li>
<li><a href="https://www.ifanr.com/feed">爱范儿</a></li>
<li><a href="http://feeds.feedburner.com/appinncom">小众软件</a></li>
<li><a href="https://feed.iplaysoft.com/">异次元软件世界</a></li>
<li><a href="http://www.apprcn.com/feed">反斗软件</a></li>
<li><a href="https://feedx.net/rss/nationalgeocn.xml">国家地理中文</a></li>
<li><a href="https://www.geekpark.net/rss">极客公园</a></li>
<li><a href="https://wanqu.co/feed/">湾区日报</a></li>
<li><a href="http://feeds.feedburner.com/jandan">煎蛋</a></li>
<li><a href="https://www.toodaylab.com/feed">理想生活实验室</a></li>
<li><a href="http://feeds.feedburner.com/programthink">编程随想的博客</a></li>
<li><a href="http://www.ruanyifeng.com/feed.html">阮一峰的网络日志</a></li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Docker]]></title>
        <id>http://www.ntlx.top/post/docker/</id>
        <link href="http://www.ntlx.top/post/docker/">
        </link>
        <updated>2021-05-18T04:59:39.000Z</updated>
        <summary type="html"><![CDATA[<p>Usage &amp; Settings</p>
]]></summary>
        <content type="html"><![CDATA[<p>Usage &amp; Settings</p>
<!-- more -->
<h1 id="install-docker-in-oss">Install Docker in OSs</h1>
<ul>
<li><a href="https://www.runoob.com/docker/centos-docker-install.html">CentOS</a></li>
<li><a href="https://www.runoob.com/docker/ubuntu-docker-install.html">Ubuntu</a></li>
<li><a href="https://www.runoob.com/docker/windows-docker-install.html">Windows</a></li>
<li><a href="https://www.runoob.com/docker/macos-docker-install.html">Mac OS</a></li>
</ul>
<blockquote>
<p><a href="https://www.runoob.com/docker/docker-compose.html">Install Docker Compose</a></p>
</blockquote>
<h1 id="set-mirror-for-registry">Set mirror for registry</h1>
<p>Add below to <code>/etc/docker/daemon.json</code></p>
<pre><code class="language-yaml">{
  &quot;registry-mirrors&quot; : [
    &quot;http://docker.mirrors.ustc.edu.cn&quot;
  ],
  &quot;insecure-registries&quot; : [
    &quot;docker.mirrors.ustc.edu.cn&quot;
  ],
  &quot;debug&quot; : true,
  &quot;experimental&quot; : true
}
</code></pre>
<h1 id="set-proxy-for-container">Set Proxy for container</h1>
<p>Add below to <code>~/.docker/config.json</code></p>
<pre><code class="language-yaml">{
  &quot;proxies&quot;:
  {
    &quot;default&quot;:
    {
      &quot;httpProxy&quot;: &quot;http://xxx:xxx&quot;,
      &quot;httpsProxy&quot;: &quot;http://xxx:xxx&quot;,
      &quot;noProxy&quot;: &quot;*.ntlx.top&quot;
    }
  }
}
</code></pre>
<h1 id="tips">Tips</h1>
<h2 id="clear-docker-logs">Clear Docker Logs</h2>
<blockquote>
<p><a href="https://blog.csdn.net/xunzhaoyao/article/details/72959917">Reference</a></p>
</blockquote>
<pre><code class="language-bash">#!/bin/sh

echo &quot;==================== start clean docker containers logs ==========================&quot;

logs=$(find /var/lib/docker/containers/ -name *-json.log)

for log in $logs
        do
                echo &quot;clean logs : $log&quot;
                cat /dev/null &gt; $log
        done

echo &quot;==================== end clean docker containers logs   ==========================&quot;
</code></pre>
<h1 id="service-deploy-note">Service Deploy Note</h1>
<h2 id="nexus">Nexus</h2>
<blockquote>
<p>如果构建的 Docker Image 比较多，推荐自建仓库进行管理</p>
</blockquote>
<pre><code class="language-bash">mkdir -p /public/Docker/Nexus
chown -R 200 /public/Docker/Nexus
docker run -d -p 8081:8081 -v /public/Docker/Nexus:/nexus-data --name nexus sonatype/nexus3
</code></pre>
<blockquote>
<p>访问 http://Docker.Host.IP:8081 进行配置，账户名为 admin，初始密码在 /public/Docker/Nexus/admin.password 文件里</p>
</blockquote>
<blockquote>
<ul>
<li>Nexus 还能作为各种包管理器、数据库甚至脚本的存储仓库，方便进行发布管理</li>
<li>Nexus 支持接入 LDAP 进行多用户管理</li>
</ul>
</blockquote>
<h3 id="login-error">Login ERROR</h3>
<p>Issue:</p>
<pre><code class="language-bash">Error saving credentials: error storing credentials - err: exit status 1, out: `Cannot autolaunch D-Bus without X11 $DISPLAY`
</code></pre>
<p>Fix:</p>
<pre><code class="language-bash">dpkg -r --ignore-depends=golang-docker-credential-helpers golang-docker-credential-helpers
</code></pre>
<h2 id="postgresql">postgresql</h2>
<pre><code class="language-bash">docker run -d --name='postgresql' --restart unless-stopped --log-opt max-size=10m -e 'POSTGRES_PASSWORD'='password' -p '5432:5432/tcp' -v './postgresql':'/var/lib/postgresql/data':'rw' 'postgres'
</code></pre>
<h2 id="wikijs">wikijs</h2>
<pre><code class="language-bash">docker run -d --name='wikijs' --restart unless-stopped --log-opt max-size=10m -e 'DB_TYPE'='postgres' -e 'DB_HOST'='10.1.1.4' -e 'DB_PORT'='5432' -e 'DB_USER'='postgres' -e 'DB_PASS'='password' -e 'DB_NAME'='postgres' -e SSL_ACTIVE=true -e LETSENCRYPT_DOMAIN=ntlx.top -e LETSENCRYPT_EMAIL=xxx@outlook.com  -p 80:3000 -p 443:3443 'requarks/wiki'
</code></pre>
<h2 id="aria2">aria2</h2>
<pre><code class="language-yaml">version: &quot;3&quot;
services:
  aria2:
    image: superng6/aria2
    container_name: aria2
    restart: unless-stopped
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Asia/Shanghai
      - SECRET=YourAria2SecretToken
      - CACHE=512M
      - UT=true
      - RUT=true
      - QUIET=true
      - FA=falloc
      - RECYCLE=true
      - MOVE=true
      - SMD=false
      - ANIDIR=ani
      - MOVDIR=movies
      - TVDIR=tv
      - CUSDIR=Z
    volumes:
      - ./config:/config
      - ./Download:/downloads
    ports:
      - 6881:6881
      - 6881:6881/udp
      - 6800:6800
    logging:
      options:
        max-size: &quot;1m&quot;

  ariang:
    image: superng6/ariang
    container_name: ariang
    restart: unless-stopped
    ports:
      - 8888:80
    logging:
      options:
        max-size: &quot;1m&quot;
</code></pre>
<h2 id="gitea">Gitea</h2>
<pre><code class="language-yaml">version: &quot;3&quot;

networks:
  gitea:
    external: false

services:
  server:
    image: gitea/gitea:latest
    container_name: gitea
    restart: always
    environment:
      - USER_UID=1000
      - USER_GID=1000
      - DB_TYPE=postgres
      - DB_HOST=postgres:5432
      - DB_NAME=gitea
      - DB_USER=gitea
      - DB_PASSWD=gitea
    networks:
      - gitea
    volumes:
      - /public/gitea:/data
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    ports:
      - &quot;80:3000&quot;
      - &quot;222:22&quot;
    depends_on:
      - postgres

  postgres:
    image: postgres:13
    container_name: postgres
    restart: always
    environment:
      - POSTGRES_USER=gitea
      - POSTGRES_PASSWORD=gitea
      - POSTGRES_DB=gitea
    networks:
      - gitea
    volumes:
      - ./postgres:/var/lib/postgresql/data
</code></pre>
<h2 id="gitlab">gitlab</h2>
<pre><code class="language-yaml">version: &quot;3&quot;
services:
  gitlab:
    image: 'gitlab/gitlab-ce'
    restart: always
    container_name: gitlab
    hostname: 'ntlx.top'
    environment:
      GITLAB_OMNIBUS_CONFIG: |
        external_url 'http://ntlx.top:23333'
        gitlab_rails['gitlab_shell_ssh_port'] = 22222
    ports:
      - '23333:23333'
      - '22222:22'
    volumes:
      - './config:/etc/gitlab'
      - './logs:/var/log/gitlab'
      - './data:/var/opt/gitlab'
    logging:
      options:
        max-size: &quot;1m&quot;
</code></pre>
<h3 id="smtp-settings">SMTP Settings</h3>
<p>If you would rather send application email via an SMTP server instead of via Sendmail, add the following configuration information to <code>/etc/gitlab/gitlab.rb</code> and run <code>gitlab-ctl reconfigure</code>, for example:</p>
<pre><code class="language-ruby">gitlab_rails['gitlab_email_enabled'] = true
gitlab_rails['smtp_enable'] = true
gitlab_rails['smtp_address'] = &quot;smtp.xxx.com&quot;
gitlab_rails['smtp_port'] = 25
gitlab_rails['smtp_user_name'] = &quot;xxx@xxx.com&quot;
gitlab_rails['smtp_password'] = &quot;YourPassword&quot;
gitlab_rails['smtp_domain'] = &quot;xxx.com&quot;
gitlab_rails['smtp_authentication'] = &quot;login&quot;
gitlab_rails['smtp_enable_starttls_auto'] = false
gitlab_rails['smtp_tls'] = false
gitlab_rails['gitlab_email_from'] = 'xxx@xxx.com'
gitlab_rails['gitlab_email_display_name'] = 'xxx GitLab'
gitlab_rails['gitlab_email_reply_to'] = 'xxx@xxx.com'
</code></pre>
<h2 id="nextcloud">NextCloud</h2>
<pre><code class="language-bash">docker run -d --name='NextCloud' --restart unless-stopped --log-opt max-size=10m -e 'POSTGRES_DB'='nextcloud' -e 'POSTGRES_USER'='postgres' -e 'POSTGRES_PASSWORD'='password' -e 'POSTGRES_HOST'='10.1.1.4' -e 'NEXTCLOUD_TRUSTED_DOMAINS'='ntlx.top:8080' -p '8080:80/tcp' -p '8080:80/udp' -v './NextCloud':'/var/www/html/':'rw' 'nextcloud'
</code></pre>
<h2 id="freshrss">FreshRSS</h2>
<pre><code class="language-bash">docker run -d --name=FreshRSS --log-opt max-size=10m --restart unless-stopped -e PUID=1000 -e PGID=1000 -e TZ=Asia/Shanghai -p 8070:80 -v ./config:/config linuxserver/freshrss
</code></pre>
<h2 id="rstudio-server">Rstudio Server</h2>
<pre><code class="language-bash">docker run --name &quot;Rstudio&quot; -d --restart unless-stopped --log-opt max-size=10m -p 8787:8787 -p 6311:6311 -v ./RstudioServer/home:/home quantumobject/docker-rstudio
</code></pre>
<h3 id="add-user">Add user</h3>
<pre><code class="language-bash">docker exec -it Rstudio /bin/bash
adduser lx
passwd password
mkdir /home/lx
chmod -R 755 /home/lx
</code></pre>
<h2 id="pptp">PPTP</h2>
<pre><code class="language-bash">docker run -d --name='PPTP' --net='bridge' --log-opt max-size=10m --privileged=true -e TZ=&quot;Asia/Shanghai&quot; -p '1723:1723/tcp' -p '1723:1723/udp' -v './PPTP/chap-secrets':'/etc/ppp/chap-secrets':'rw' 'mobtitude/vpn-pptp'
</code></pre>
<h2 id="l2tp">L2TP</h2>
<pre><code class="language-bash">modprobe af_key
docker run -d --name='L2TP' --net='bridge' --privileged=true -e TZ=&quot;Asia/Shanghai&quot; -p '500:500/tcp' -p '500:500/udp' -p '4500:4500/tcp' -p '4500:4500/udp' -p '1701:1701/tcp' -p '1701:1701/udp' -v '/lib/modules':'/lib/modules':'ro' --env-file ./L2TP/L2TP.env --log-opt max-size=10m 'fcojean/l2tp-ipsec-vpn-server'
</code></pre>
<h2 id="cloudflare-ddns">Cloudflare DDNS</h2>
<h3 id="using-config-file">Using config file</h3>
<blockquote>
<p><code>joshava/cloudflare-ddns</code> for x86_64 CPU, <code>joshava/cloudflare-ddns:arm32v6</code> for pi</p>
</blockquote>
<pre><code class="language-bash">docker run -d --name=DDNS -v ./CloudflareDDNS/config.yaml:/app/config.yaml joshava/cloudflare-ddns:arm32v6
</code></pre>
<p>docker compose version:</p>
<pre><code class="language-yaml">version: &quot;3&quot;
services:
  ddns:
    image: joshava/cloudflare-ddns
    restart: always
    container_name: ddns
    volumes:
      - './CloudflareDDNS/config.yaml:/app/config.yaml'
</code></pre>
<p>Example config file:</p>
<pre><code class="language-yaml">auth:
  scopedToken: xxx
domains:
  - name: xxx
    type: A
    proxied: false
    create: true
    zoneId: xxx
</code></pre>
<h3 id="using-env-settings">Using env settings</h3>
<blockquote>
<p>tags for arm: <code>arm32v6</code>, <code>armhf</code>, <code>aarch64</code>, <code>arm64v8</code>, <code>latest</code></p>
</blockquote>
<pre><code class="language-bash">docker run -d --name=DDNS -e API_KEY=xxx -e ZONE=xxx -e SUBDOMAIN=xxx oznu/cloudflare-ddns
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Raspberry Pi]]></title>
        <id>http://www.ntlx.top/post/raspberry-pi/</id>
        <link href="http://www.ntlx.top/post/raspberry-pi/">
        </link>
        <updated>2021-05-18T04:53:52.000Z</updated>
        <summary type="html"><![CDATA[<p>The most popular IoT core!</p>
]]></summary>
        <content type="html"><![CDATA[<p>The most popular IoT core!</p>
<!-- more -->
<h1 id="k3s">k3s</h1>
<p><a href="https://medium.com/@alexellisuk/five-years-of-raspberry-pi-clusters-77e56e547875">Five years of Raspberry Pi Clusters</a></p>
<h1 id="initial-configure">Initial configure</h1>
<blockquote>
<p>For Official OS: Raspbian Buster (based on Debian)</p>
</blockquote>
<p>Add blow content to a file, such as <code>~/init.sh</code>, then just run it like this <code>~/init.sh</code>.</p>
<pre><code class="language-bash">#!/usr/bin/expect -f

sudo cp /etc/apt/sources.list /etc/apt/sources.list.bak
sudo cp /etc/apt/sources.list.d/raspi.list /etc/apt/sources.list.d/raspi.list.bak

cat &lt;&lt; EOF &gt; sources.list
deb http://mirrors.tuna.tsinghua.edu.cn/raspbian/raspbian/ buster main contrib non-free rpi
deb-src http://mirrors.tuna.tsinghua.edu.cn/raspbian/raspbian/ buster main contrib non-free rpi
EOF

cat &lt;&lt; EOF &gt; raspi.list
deb http://mirrors.tuna.tsinghua.edu.cn/raspberrypi/ buster main ui
deb-src http://mirrors.tuna.tsinghua.edu.cn/raspberrypi/ buster main ui
EOF

mkdir -p ~/.pip/
cat &lt;&lt; EOF &gt; ~/.pip/pip.conf
[global]
index-url = https://pypi.tuna.tsinghua.edu.cn/simple/
EOF

sudo cp sources.list /etc/apt/sources.list
sudo cp raspi.list /etc/apt/sources.list.d/raspi.list

sudo apt update
sudo apt upgrade -y

sudo apt install -y git vim htop ncdu tmux bash-completion tcl expect
sudo apt install -y p7zip-full libio-compress-perl unrar-free unzip ncompress libperlio-gzip-perl bzip2

cat &lt;&lt; EOF &gt;&gt; ~/.bashrc

tablook () {
    column -s $'\t' -t &quot;\$1&quot; | less -S
}

alias les=&quot;less -SN&quot;

alias ls=&quot;ls --color=auto&quot;
alias l=&quot;ls -a&quot;
alias ll=&quot;ls -l&quot;
alias lll=&quot;ls -la&quot;

alias ..='cd ..'
alias ...='cd ../../'
alias ....='cd ../../../'
alias .....='cd ../../../../'
alias ......='cd ../../../../../'

# Use mcd to create a directory and cd to it simultaneously:
function mcd { mkdir -p &quot;\$1&quot; &amp;&amp; cd &quot;\$1&quot;;}

# Make grep pretty:
alias grep=&quot;grep --color=auto&quot;

# Show your \$PATH in a prettier format:
alias showpath='echo \$PATH | tr &quot;:&quot; &quot;\n&quot; | nl'

# as suggested by Mendel Cooper in &quot;Advanced Bash Scripting Guide&quot;
extract () {
   if [ -f \$1 ] ; then
       case \$1 in
        *.tar.bz2)      tar xvjf \$1 ;;
        *.tar.gz)       tar xvzf \$1 ;;
        *.tar.xz)       tar Jxvf \$1 ;;
        *.bz2)          bunzip2 \$1 ;;
        *.rar)          unrar x \$1 ;;
        *.gz)           gunzip \$1 ;;
        *.tar)          tar xvf \$1 ;;
        *.tbz2)         tar xvjf \$1 ;;
        *.tgz)          tar xvzf \$1 ;;
        *.zip)          unzip \$1 ;;
        *.Z)            uncompress \$1 ;;
        *.7z)           7z x \$1 ;;
        *)              echo &quot;don't know how to extract '\$1'...&quot; ;;
       esac
   else
       echo &quot;'\$1' is not a valid file!&quot;
   fi
}

EOF

source ~/.bashrc

git config --global user.name &quot;NTLx&quot;
git config --global user.email &quot;lx3325360@gmail.com&quot;

spawn ssh-keygen -t rsa -b 4096 -C &quot;lx3325360@gmail.com&quot;
expect &quot;*home*&quot;
send &quot;\n&quot;
expect &quot;*empty*&quot;
send &quot;\n&quot;
expect &quot;*again*&quot;
send &quot;\n&quot;
expect eof

# sudo apt install -y zsh zsh-autosuggestions zsh-syntax-highlighting zsh-theme-powerlevel9k remmina remmina-common remmina-dev remmina-plugin-rdp remmina-plugin-vnc fcitx fcitx-googlepinyin fcitx-module-cloudpinyin fcitx-sunpinyin
# cat &lt;&lt; EOF &gt; ~/.zshrc
# source /usr/share/powerlevel9k/powerlevel9k.zsh-theme
# source /usr/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
# source /usr/share/zsh-autosuggestions/zsh-autosuggestions.zsh

# export TERM=&quot;xterm-256color&quot;

# POWERLEVEL9K_PROMPT_ON_NEWLINE=true
# POWERLEVEL9K_LEFT_PROMPT_ELEMENTS=(os_icon user dir_writable dir vcs)
# POWERLEVEL9K_RIGHT_PROMPT_ELEMENTS=(status command_execution_time root_indicator background_jobs time disk_usage ram load)
# POWERLEVEL9K_MULTILINE_LAST_PROMPT_PREFIX=&quot;%(?:%{$fg_bold[green]%}➜ :%{$fg_bold[red]%}➜ )&quot;
# POWERLEVEL9K_MULTILINE_FIRST_PROMPT_PREFIX=&quot;&quot;
# POWERLEVEL9K_USER_ICON=&quot;\uF415&quot; # &lt;U+F415&gt;
# POWERLEVEL9K_ROOT_ICON=&quot;\uF09C&quot;
# POWERLEVEL9K_SUDO_ICON=$'\uF09C' # &lt;U+F09C&gt;
# POWERLEVEL9K_TIME_FORMAT=&quot;%D{%H:%M}&quot;
# POWERLEVEL9K_VCS_GIT_ICON='\uF408'
# POWERLEVEL9K_VCS_GIT_GITHUB_ICON='\uF408'
# EOF

echo 'You can now reboot your rpi to take effect, Good Luck!'
</code></pre>
<h2 id="install-docker">Install Docker</h2>
<pre><code class="language-bash">curl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun
sudo usermod -aG docker pi
</code></pre>
<h2 id="install-docker-compose">Install Docker Compose</h2>
<pre><code class="language-bash">sudo curl -L &quot;https://github.com/docker/compose/releases/download/1.26.2/docker-compose-$(uname -s)-$(uname -m)&quot; -o /usr/local/bin/docker-compose
</code></pre>
<p>OR</p>
<pre><code class="language-bash">sudo apt install -y libssl-dev libffi-dev
sudo apt install -y python3-pip
pip3 install docker-compose
</code></pre>
<h2 id="additional-settings">Additional Settings</h2>
<blockquote>
<p>Especially for Raspbian Buster Lite</p>
<ul>
<li>Default user: <strong>pi</strong></li>
<li>Default user password: <strong>raspberry</strong></li>
</ul>
</blockquote>
<p>Turn on SSH:</p>
<p><code>sudo raspi-config</code>, choose <code>5 Interface Options</code>, then choose <code>SSH</code> to enable.</p>
<p>Connect WiFi:</p>
<p><code>sudo raspi-config</code>, choose <code>2 Network Options</code>, then choose <code>N2 Wi-fi</code> and enter SSID &amp; password to connect.</p>
<h2 id="cpu-temprature">CPU Temprature</h2>
<p>Could just write a perl script to check, like <code>CPU.pl</code>:</p>
<pre><code class="language-perl">#!/usr/bin/perl
while(1) {
    print `cat /sys/class/thermal/thermal_zone0/temp`/1000;
    &lt;STDIN&gt;;
}
</code></pre>
<h1 id="manjaro-for-arm">Manjaro For ARM</h1>
<h2 id="download-system-file">Download system file</h2>
<p>Download system installation mirror files at <a href="https://osdn.net/projects/manjaro-arm/storage/rpi4/">OSDN</a>, you can choose form minimal, xfce, kde-plasma, mate and lxqt.</p>
<h2 id="flash-to-tf-card">Flash to TF card</h2>
<p>Use <a href="https://www.balena.io/etcher/">Etcher</a> or <code>dd</code> command described below:</p>
<ol>
<li>find portable device in Mac OS (use <code>diskutil list</code>) or Linux (use <code>lsblk</code> or <code>df</code> or something), for example <code>/dev/disk2</code>.</li>
<li>Unmount portable device on Mac OS (<code>diskutil unmountDisk /dev/disk2</code>) or Linux (<code>umount /dev/sdb</code>).</li>
<li>Use command <code>dd</code> to flash a system file to portable device like below:</li>
</ol>
<pre><code class="language-bash">sudo dd if=path/to/img_or_iso of=/dev/disk2 bs=4m;sync
</code></pre>
<blockquote>
<p>Remember to eject the portable device after above steps on Mac OS (<code>diskutil eject /dev/disk2</code>) or Linux (<code>eject -s /dev/disk2</code>).</p>
</blockquote>
<h2 id="choose-mirror">Choose mirror</h2>
<blockquote>
<p>For users in China, Denmark is the fastest mirror currently.</p>
</blockquote>
<pre><code class="language-bash">sudo pacman-mirrors -c Denmark -m rank [-i]
</code></pre>
<h2 id="instalation-script">Instalation Script</h2>
<pre><code class="language-bash">sudo cp /etc/pacman.conf /etc/pacman.conf.bak

cat &lt;&lt; EOF &gt; ~/pacman.conf
[options]
HoldPkg      = pacman glibc manjaro-system
XferCommand = /usr/bin/curl -x http://192.168.120.63:8888 -C - -f %u --output %o
Architecture = aarch64

CheckSpace
VerbosePkgLists

SigLevel    = Required DatabaseOptional
LocalFileSigLevel = Optional

[core]
Include = /etc/pacman.d/mirrorlist

[extra]
Include = /etc/pacman.d/mirrorlist

[community]
Include = /etc/pacman.d/mirrorlist

EOF

sudo cp ~/pacman.conf /etc/pacman.conf

git config --global http.proxy http://192.168.120.63:8888
git config --global https.proxy http://192.168.120.63:8888
export http_proxy=&quot;http://192.168.120.63:8888&quot;; export https_proxy=&quot;http://192.168.120.63:8888&quot;; export ftp_proxy=&quot;http://192.168.120.63:8888&quot;

sudo pacman-mirrors -c United_States -m rank
sudo pacman -Syyu
sudo pacman -S patch pkgconf fakeroot autoconf automake make cmake gcc clang vim yay wqy-microhei binutils nasm
yay -S xrdp
sudo systemctl enable xrdp.service
sudo systemctl start xrdp.service
sudo pacman -S remmina
# sudo pacman -S patch pkgconf fakeroot autoconf automake make cmake gcc clang vim yay wqy-microhei freerdp remmina
# yay -S xrdp xorgxrdp remmina-plugin-rdesktop remmina
# libtool --finish /usr/lib/xrdp
# libtool --finish /usr/lib/xorg/modules/input
</code></pre>
<h1 id="windows-iot-for-arm">Windows IoT For ARM</h1>
<h2 id="download-system">Download system</h2>
<p>Go to <a href="https://uupdump.ml/">UUP dump</a>, choose a system version (arm64), and choose <code>Download using aria2 and convert</code>, get the generated <code>*.zip</code> file, extract it, then run <code>*.cmd</code> under a windows system, you will get the <code>*.iso</code> system mirror file.</p>
<h2 id="deploy-system-to-tf-card">Deploy system to TF card</h2>
<p>First, download <a href="https://github.com/WOA-Project/WOA-Deployer-Rpi">WOA</a>.</p>
<p>Then, open system file (<code>*.iso</code>), and choose <code>source/install.wim</code> as source for deploying.</p>
<h1 id="software">Software</h1>
<h2 id="aria2-ng">Aria2 &amp; NG</h2>
<pre><code class="language-bash">git clone git@github.com:NTLx/aira2-ng.git
docker build -t aira2webui-ng aira2-ng
mkdir -p /home/pi/Download /home/pi/aria2_conf
docker run -d --name='aria2' -p '6800:6800/tcp' -p '6800:6800/udp' -p '80:80/tcp' -p '80:80/udp' -v '/home/pi/Download':'/data':'rw' -v '/home/pi/aria2_conf':'/config':'rw' aira2webui-ng
</code></pre>
<h1 id="disk">Disk</h1>
<pre><code class="language-bash">sudo mkfs.xfs -f /dev/sda1
</code></pre>
<h1 id="smb">SMB</h1>
<pre><code class="language-bash">sudo /etc/init.d/smbd restart
sudo /etc/init.d/nmbd restart
</code></pre>
<h1 id="service-dploy-by-docker">Service Dploy (by Docker)</h1>
<h2 id="postgresql">PostgreSQL</h2>
<pre><code class="language-bash">docker run -d --name='postgresql' --net='bridge' --log-opt max-size=1m -e TZ=&quot;Asia/Shanghai&quot; -e 'POSTGRES_PASSWORD'='password' -p '5432:5432/tcp' -v '/home/pi/postgresql':'/var/lib/postgresql/data':'rw' 'postgres'
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[ZSH]]></title>
        <id>http://www.ntlx.top/post/zsh/</id>
        <link href="http://www.ntlx.top/post/zsh/">
        </link>
        <updated>2021-05-18T04:45:29.000Z</updated>
        <summary type="html"><![CDATA[<p>ZSH Installation &amp; Settings Notes</p>
]]></summary>
        <content type="html"><![CDATA[<p>ZSH Installation &amp; Settings Notes</p>
<!-- more -->
<h1 id="configure-based-on-oh-my-zsh">Configure based on Oh my Zsh</h1>
<pre><code class="language-bash">sh -c &quot;$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)&quot;
cd ~/.oh-my-zsh/custom/plugins
git clone https://github.com/zsh-users/zsh-syntax-highlighting.git
cd ~/.oh-my-zsh/custom/themes
git clone https://github.com/romkatv/powerlevel10k.git
echo &quot;ZSH_THEME=powerlevel10k/powerlevel10k&quot; &gt;&gt; ~/.zshrc
p10k configure

# For Mac OS:
cd ~/.oh-my-zsh/custom/plugins
git clone https://github.com/scriptingosx/mac-zsh-completions.git
</code></pre>
<p>Edit <code>~/.zshrc</code> for setting:</p>
<pre><code class="language-bash">ZSH_THEME=powerlevel10k/powerlevel10k
plugins=(git zsh-syntax-highlighting zsh-completions)
autoload -U compinit &amp;&amp; compinit

# For Mac OS:
plugins=(... mac-zsh-completions)
</code></pre>
<h1 id="default-settings-within-popular-oss">Default Settings within Popular OSs</h1>
<h2 id="manjaro-architect">Manjaro Architect</h2>
<p><code>/etc/zsh/zprofile</code></p>
<pre><code class="language-bash">emulate sh -c 'source /etc/profile'
</code></pre>
<p><code>~/.zshrc</code></p>
<pre><code class="language-bash">## Options section
setopt correct                                                  # Auto correct mistakes
setopt extendedglob                                             # Extended globbing. Allows using regular expressions with *
setopt nocaseglob                                               # Case insensitive globbing
setopt rcexpandparam                                            # Array expension with parameters
setopt nocheckjobs                                              # Don't warn about running processes when exiting
setopt numericglobsort                                          # Sort filenames numerically when it makes sense
setopt nobeep                                                   # No beep
setopt appendhistory                                            # Immediately append history instead of overwriting
setopt histignorealldups                                        # If a new command is a duplicate, remove the older one
setopt autocd                                                   # if only directory path is entered, cd there.

zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z}'       # Case insensitive tab completion
zstyle ':completion:*' list-colors &quot;${(s.:.)LS_COLORS}&quot;         # Colored completion (different colors for dirs/files/etc)
zstyle ':completion:*' rehash true                              # automatically find new executables in path
# Speed up completions
zstyle ':completion:*' accept-exact '*(N)'
zstyle ':completion:*' use-cache on
zstyle ':completion:*' cache-path ~/.zsh/cache
HISTFILE=~/.zhistory
HISTSIZE=1000
SAVEHIST=500
#export EDITOR=/usr/bin/nano
#export VISUAL=/usr/bin/nano
WORDCHARS=${WORDCHARS//\/[&amp;.;]}                                 # Don't consider certain characters part of the word


## Keybindings section
bindkey -e
bindkey '^[[7~' beginning-of-line                               # Home key
bindkey '^[[H' beginning-of-line                                # Home key
if [[ &quot;${terminfo[khome]}&quot; != &quot;&quot; ]]; then
  bindkey &quot;${terminfo[khome]}&quot; beginning-of-line                # [Home] - Go to beginning of line
fi
bindkey '^[[8~' end-of-line                                     # End key
bindkey '^[[F' end-of-line                                     # End key
if [[ &quot;${terminfo[kend]}&quot; != &quot;&quot; ]]; then
  bindkey &quot;${terminfo[kend]}&quot; end-of-line                       # [End] - Go to end of line
fi
bindkey '^[[2~' overwrite-mode                                  # Insert key
bindkey '^[[3~' delete-char                                     # Delete key
bindkey '^[[C'  forward-char                                    # Right key
bindkey '^[[D'  backward-char                                   # Left key
bindkey '^[[5~' history-beginning-search-backward               # Page up key
bindkey '^[[6~' history-beginning-search-forward                # Page down key

# Navigate words with ctrl+arrow keys
bindkey '^[Oc' forward-word                                     #
bindkey '^[Od' backward-word                                    #
bindkey '^[[1;5D' backward-word                                 #
bindkey '^[[1;5C' forward-word                                  #
bindkey '^H' backward-kill-word                                 # delete previous word with ctrl+backspace
bindkey '^[[Z' undo                                             # Shift+tab undo last action

## Alias section
alias cp=&quot;cp -i&quot;                                                # Confirm before overwriting something
alias df='df -h'                                                # Human-readable sizes
alias free='free -m'                                            # Show sizes in MB
alias gitu='git add . &amp;&amp; git commit &amp;&amp; git push'

# Theming section
autoload -U compinit colors zcalc
compinit -d
colors

# enable substitution for prompt
setopt prompt_subst

# Prompt (on left side) similar to default bash prompt, or redhat zsh prompt with colors
 #PROMPT=&quot;%(!.%{$fg[red]%}[%n@%m %1~]%{$reset_color%}# .%{$fg[green]%}[%n@%m %1~]%{$reset_color%}$ &quot;
# Maia prompt
PROMPT=&quot;%B%{$fg[cyan]%}%(4~|%-1~/.../%2~|%~)%u%b &gt;%{$fg[cyan]%}&gt;%B%(?.%{$fg[cyan]%}.%{$fg[red]%})&gt;%{$reset_color%}%b &quot; # Print some system information when the shell is first started
# Print a greeting message when shell is started
echo $USER@$HOST  $(uname -srm) $(lsb_release -rcs)
## Prompt on right side:
#  - shows status of git when in git repository (code adapted from https://techanic.net/2012/12/30/my_git_prompt_for_zsh.html)
#  - shows exit status of previous command (if previous command finished with an error)
#  - is invisible, if neither is the case

# Modify the colors and symbols in these variables as desired.
GIT_PROMPT_SYMBOL=&quot;%{$fg[blue]%}±&quot;                              # plus/minus     - clean repo
GIT_PROMPT_PREFIX=&quot;%{$fg[green]%}[%{$reset_color%}&quot;
GIT_PROMPT_SUFFIX=&quot;%{$fg[green]%}]%{$reset_color%}&quot;
GIT_PROMPT_AHEAD=&quot;%{$fg[red]%}ANUM%{$reset_color%}&quot;             # A&quot;NUM&quot;         - ahead by &quot;NUM&quot; commits
GIT_PROMPT_BEHIND=&quot;%{$fg[cyan]%}BNUM%{$reset_color%}&quot;           # B&quot;NUM&quot;         - behind by &quot;NUM&quot; commits
GIT_PROMPT_MERGING=&quot;%{$fg_bold[magenta]%}⚡︎%{$reset_color%}&quot;     # lightning bolt - merge conflict
GIT_PROMPT_UNTRACKED=&quot;%{$fg_bold[red]%}●%{$reset_color%}&quot;       # red circle     - untracked files
GIT_PROMPT_MODIFIED=&quot;%{$fg_bold[yellow]%}●%{$reset_color%}&quot;     # yellow circle  - tracked files modified
GIT_PROMPT_STAGED=&quot;%{$fg_bold[green]%}●%{$reset_color%}&quot;        # green circle   - staged changes present = ready for &quot;git push&quot;

parse_git_branch() {
  # Show Git branch/tag, or name-rev if on detached head
  ( git symbolic-ref -q HEAD || git name-rev --name-only --no-undefined --always HEAD ) 2&gt; /dev/null
}

parse_git_state() {
  # Show different symbols as appropriate for various Git repository states
  # Compose this value via multiple conditional appends.
  local GIT_STATE=&quot;&quot;
  local NUM_AHEAD=&quot;$(git log --oneline @{u}.. 2&gt; /dev/null | wc -l | tr -d ' ')&quot;
  if [ &quot;$NUM_AHEAD&quot; -gt 0 ]; then
    GIT_STATE=$GIT_STATE${GIT_PROMPT_AHEAD//NUM/$NUM_AHEAD}
  fi
  local NUM_BEHIND=&quot;$(git log --oneline ..@{u} 2&gt; /dev/null | wc -l | tr -d ' ')&quot;
  if [ &quot;$NUM_BEHIND&quot; -gt 0 ]; then
    GIT_STATE=$GIT_STATE${GIT_PROMPT_BEHIND//NUM/$NUM_BEHIND}
  fi
  local GIT_DIR=&quot;$(git rev-parse --git-dir 2&gt; /dev/null)&quot;
  if [ -n $GIT_DIR ] &amp;&amp; test -r $GIT_DIR/MERGE_HEAD; then
    GIT_STATE=$GIT_STATE$GIT_PROMPT_MERGING
  fi
  if [[ -n $(git ls-files --other --exclude-standard 2&gt; /dev/null) ]]; then
    GIT_STATE=$GIT_STATE$GIT_PROMPT_UNTRACKED
  fi
  if ! git diff --quiet 2&gt; /dev/null; then
    GIT_STATE=$GIT_STATE$GIT_PROMPT_MODIFIED
  fi
  if ! git diff --cached --quiet 2&gt; /dev/null; then
    GIT_STATE=$GIT_STATE$GIT_PROMPT_STAGED
  fi
  if [[ -n $GIT_STATE ]]; then
    echo &quot;$GIT_PROMPT_PREFIX$GIT_STATE$GIT_PROMPT_SUFFIX&quot;
  fi
}

git_prompt_string() {
  local git_where=&quot;$(parse_git_branch)&quot;

  # If inside a Git repository, print its branch and state
  [ -n &quot;$git_where&quot; ] &amp;&amp; echo &quot;$GIT_PROMPT_SYMBOL$(parse_git_state)$GIT_PROMPT_PREFIX%{$fg[yellow]%}${git_where#(refs/heads/|tags/)}$GIT_PROMPT_SUFFIX&quot;

  # If not inside the Git repo, print exit codes of last command (only if it failed)
  [ ! -n &quot;$git_where&quot; ] &amp;&amp; echo &quot;%{$fg[red]%} %(?..[%?])&quot;
}

# Right prompt with exit status of previous command if not successful
 #RPROMPT=&quot;%{$fg[red]%} %(?..[%?])&quot;
# Right prompt with exit status of previous command marked with ✓ or ✗
 #RPROMPT=&quot;%(?.%{$fg[green]%}✓ %{$reset_color%}.%{$fg[red]%}✗ %{$reset_color%})&quot;


# Color man pages
export LESS_TERMCAP_mb=$'\E[01;32m'
export LESS_TERMCAP_md=$'\E[01;32m'
export LESS_TERMCAP_me=$'\E[0m'
export LESS_TERMCAP_se=$'\E[0m'
export LESS_TERMCAP_so=$'\E[01;47;34m'
export LESS_TERMCAP_ue=$'\E[0m'
export LESS_TERMCAP_us=$'\E[01;36m'
export LESS=-r


## Plugins section: Enable fish style features
# Use syntax highlighting
source /usr/share/zsh/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
# Use history substring search
source /usr/share/zsh/plugins/zsh-history-substring-search/zsh-history-substring-search.zsh
# bind UP and DOWN arrow keys to history substring search
zmodload zsh/terminfo
bindkey &quot;$terminfo[kcuu1]&quot; history-substring-search-up
bindkey &quot;$terminfo[kcud1]&quot; history-substring-search-down
bindkey '^[[A' history-substring-search-up
bindkey '^[[B' history-substring-search-down

# Apply different settigns for different terminals
case $(basename &quot;$(cat &quot;/proc/$PPID/comm&quot;)&quot;) in
  login)
        RPROMPT=&quot;%{$fg[red]%} %(?..[%?])&quot;
        alias x='startx ~/.xinitrc'      # Type name of desired desktop after x, xinitrc is configured for it
    ;;
#  'tmux: server')
#        RPROMPT='$(git_prompt_string)'
#               ## Base16 Shell color themes.
#               #possible themes: 3024, apathy, ashes, atelierdune, atelierforest, atelierhearth,
#               #atelierseaside, bespin, brewer, chalk, codeschool, colors, default, eighties,
#               #embers, flat, google, grayscale, greenscreen, harmonic16, isotope, londontube,
#               #marrakesh, mocha, monokai, ocean, paraiso, pop (dark only), railscasts, shapesifter,
#               #solarized, summerfruit, tomorrow, twilight
#               #theme=&quot;eighties&quot;
#               #Possible variants: dark and light
#               #shade=&quot;dark&quot;
#               #BASE16_SHELL=&quot;/usr/share/zsh/scripts/base16-shell/base16-$theme.$shade.sh&quot;
#               #[[ -s $BASE16_SHELL ]] &amp;&amp; source $BASE16_SHELL
#               # Use autosuggestion
#               source /usr/share/zsh/plugins/zsh-autosuggestions/zsh-autosuggestions.zsh
#               ZSH_AUTOSUGGEST_BUFFER_MAX_SIZE=20
#               ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE='fg=8'
#     ;;
  *)
        RPROMPT='$(git_prompt_string)'
                # Use autosuggestion
                source /usr/share/zsh/plugins/zsh-autosuggestions/zsh-autosuggestions.zsh
                ZSH_AUTOSUGGEST_BUFFER_MAX_SIZE=20
                ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE='fg=8'
    ;;
esac
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Mac OS]]></title>
        <id>http://www.ntlx.top/post/mac-os/</id>
        <link href="http://www.ntlx.top/post/mac-os/">
        </link>
        <updated>2021-05-18T04:31:20.000Z</updated>
        <summary type="html"><![CDATA[<p>Usage or Setting Notes</p>
]]></summary>
        <content type="html"><![CDATA[<p>Usage or Setting Notes</p>
<!-- more -->
<h1 id="general-settings-in-terminal">General Settings in Terminal</h1>
<pre><code class="language-bash">alias his=&quot;history | awk '{CMD[\$2]++;count++;}END{for (a in CMD)print CMD[a]\&quot; \&quot;CMD[a]/count*100\&quot;% \&quot;a;}' | grep -v \&quot;./\&quot; | column -c3 -s \&quot; \&quot; -t | sort -nr | nl | head -n10&quot;
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Self-host Matomo]]></title>
        <id>http://www.ntlx.top/post/self-host-matomo/</id>
        <link href="http://www.ntlx.top/post/self-host-matomo/">
        </link>
        <updated>2021-05-18T03:21:00.000Z</updated>
        <summary type="html"><![CDATA[<p>Deploy Matomo with Docker Compose</p>
]]></summary>
        <content type="html"><![CDATA[<p>Deploy Matomo with Docker Compose</p>
<!-- more -->
<pre><code class="language-yaml">version: &quot;2&quot;
services:
  mariadb:
    image: &quot;docker.io/bitnami/mariadb:10.3-debian-10&quot;
    container_name: mariadb
    environment:
      - ALLOW_EMPTY_PASSWORD=yes
      - MARIADB_USER=bn_matomo
      - MARIADB_DATABASE=bitnami_matomo
      # Flag necessary for the database max allowed packet check
      # https://matomo.org/faq/troubleshooting/faq_183/
      - MARIADB_EXTRA_FLAGS=--max_allowed_packet=64MB
    volumes:
      - &quot;./mariadb:/bitnami/mariadb&quot;
    logging:
      options:
        max-size: &quot;1m&quot;
  matomo:
    image: &quot;docker.io/bitnami/matomo&quot;
    container_name: matomo
    ports:
      - &quot;3002:8080&quot;
      - &quot;3003:8443&quot;
    environment:
      - MATOMO_DATABASE_HOST=mariadb
      - MATOMO_DATABASE_PORT_NUMBER=3306
      - MATOMO_DATABASE_USER=bn_matomo
      - MATOMO_DATABASE_NAME=bitnami_matomo
      - ALLOW_EMPTY_PASSWORD=yes
      - MATOMO_USERNAME=xxx
      - MATOMO_PASSWORD=xxx
      - MATOMO_EMAIL=xxx@outlook.com
      - MATOMO_WEBSITE_NAME=&quot;xxx&quot;
      - MATOMO_WEBSITE_HOST=xxx:3002
    volumes:
      - &quot;./matomo:/bitnami/matomo&quot;
    depends_on:
      - mariadb
    logging:
      options:
        max-size: &quot;1m&quot;
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Self-host Ghost]]></title>
        <id>http://www.ntlx.top/post/self-host-ghost/</id>
        <link href="http://www.ntlx.top/post/self-host-ghost/">
        </link>
        <updated>2021-05-18T03:17:26.000Z</updated>
        <summary type="html"><![CDATA[<p>Deploy Ghost with Docker Compose</p>
]]></summary>
        <content type="html"><![CDATA[<p>Deploy Ghost with Docker Compose</p>
<!-- more -->
<pre><code class="language-yaml">version: '3.1'
services:
  ghost:
    image: ghost:alpine
    restart: always
    ports:
      - 2368:2368
    environment:
      # this url value is just an example, and is likely wrong for your environment!
      url: http://192.168.0.120:2368
      # contrary to the default mentioned in the linked documentation, this image defaults to NODE_ENV=production (so development mode needs to be explicitly specified if desired)
      #NODE_ENV: development
    volumes:
      - ./content:/var/lib/ghost/content
</code></pre>
]]></content>
    </entry>
</feed>