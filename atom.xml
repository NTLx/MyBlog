<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://www.ntlx.top</id>
    <title>NTLx&apos;s Blog</title>
    <updated>2021-06-09T00:14:03.772Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="http://www.ntlx.top"/>
    <link rel="self" href="http://www.ntlx.top/atom.xml"/>
    <subtitle>My Tech Notes &amp; Thoughts</subtitle>
    <logo>http://www.ntlx.top/images/avatar.png</logo>
    <icon>http://www.ntlx.top/favicon.ico</icon>
    <rights>All rights reserved 2021, NTLx&apos;s Blog</rights>
    <entry>
        <title type="html"><![CDATA[Perl 科学计算代码片段]]></title>
        <id>http://www.ntlx.top/post/perl-ke-xue-ji-suan-dai-ma-pian-duan/</id>
        <link href="http://www.ntlx.top/post/perl-ke-xue-ji-suan-dai-ma-pian-duan/">
        </link>
        <updated>2021-06-08T02:54:13.000Z</updated>
        <summary type="html"><![CDATA[<p>Snippets collect.</p>
]]></summary>
        <content type="html"><![CDATA[<p>Snippets collect.</p>
<!-- more -->
<p>#分布函数</p>
<pre><code class="language-perl">my @ex8=(1,9,4,9,10,12,13,15,12,13);
my %hash=&amp;frequency(\@ex8);
print join(&quot;,&quot;,values %hash);
print join(&quot;,&quot;,keys %hash);

sub frequency{
    my($vec)=@_;
    my %hash;
    foreach(@$vec){
        ++$hash{$_};
    }
    return %hash;
}
</code></pre>
<p>#排序函数</p>
<pre><code class="language-perl">my @ex9=(1,9,4,9,10,12,13,15,12,13);
print join(',',&amp;sortf(&quot;numeric&quot;,&quot;asc&quot;,\@ex9));

sub sortf{
    my($type,$direction,$vec)=@_;
    my @vec_sort;
    if(($type eq &quot;numeric&quot;) &amp; ($direction eq &quot;asc&quot;)){
        @vec_sort=sort{$a&lt;=&gt;$b}@$vec;
    }
    if(($type eq &quot;numeric&quot;) &amp; ($direction eq &quot;desc&quot;)){
        @vec_sort=sort{$b&lt;=&gt;$a}@$vec;
    }
    if(($type eq &quot;string&quot;) &amp; ($direction eq &quot;asc&quot;)){
        @vec_sort=sort{$a cmp $b}@$vec;
    }
    if(($type eq &quot;string&quot;) &amp; ($direction eq &quot;desc&quot;)){
        @vec_sort=sort{$b cmp $a}@$vec;
    }
    return @vec_sort;
}
</code></pre>
<p>#众数</p>
<pre><code class="language-perl">my @ex10=(1,9,4,9,10,12,13,15,12,13);
print join(',',&amp;mode(\@ex10));

sub mode{
    my($vec)=@_;
    my %hash=&amp;frequency($vec);
    my @result;
    foreach(sort{ $hash{$b}&lt;=&gt;$hash{$a} }  keys %hash){
        last if @result &amp;&amp; $hash{$_} != $hash{$result[0]};
        push(@result,$_);
    }
    return @result;
}
</code></pre>
<p>#中位数</p>
<pre><code class="language-perl">my @ex111=(1,9,4,5);
print &amp;median(\@ex11);
my @ex112=(1,9,4,5,5);

sub median{
    my($vec)=@_;
    my @vec1=&amp;sortf('numeric','asc',$vec);
    my $length=scalar @$vec;
    my $result;
    if($length % 2){
        $result=$vec1[($length-1)/2];
    }else{
        $result=($vec1[$length/2]+$vec1[$length/2-1])/2;
    }
    return $result;
}
</code></pre>
<p>#四分之一分位数</p>
<pre><code class="language-perl">my @ex12=( 7, 15, 36, 39, 40, 41);
print join(',',&amp;quantile(\@ex12));

sub quantile{
    my($vec)=@_;
    my @vec1=&amp;sortf('numeric','asc',$vec);
    my $length=scalar @$vec+1;
    my($upper,$lower);
    if($length %4 ){
        my $temp1=int($length/4);
        my $temp2=int(3*$length/4);
        $upper=$vec1[$temp1-1]+($vec1[$temp1]-$vec1[$temp1-1])*($length/4-$temp1);
        $lower=$vec1[$temp2-1]+($vec1[$temp2]-$vec1[$temp2-1])*(3*$length/4-$temp2);
    }else{
        $upper=$vec1[$length/4-1];
        $lower=$vec1[3*$length/4-1];
    }
    my @result=($upper,$lower);
    return @result;
}
</code></pre>
<p>#最大值</p>
<pre><code class="language-perl">my @ex13=( 7, 15, 36, 39, 40, 41);
print &amp;max(\@ex13);

sub max{
    my($vec)=@_;
    my @result=&amp;sortf('numeric','desc',$vec);
    return $result[0];
}
</code></pre>
<p>#最小值</p>
<pre><code class="language-perl">my @ex14=( 7, 15, 36, 39, 40, 41);
print &amp;min(\@ex14);

sub min{
    my($vec)=@_;
    my @result=&amp;sortf('numeric','asc',$vec);
    return $result[0];
}
</code></pre>
<p>#标准化，共2种方法</p>
<pre><code class="language-perl">my @ex15=( 7, 15, 36, 39, 40, 41);
print join(',',&amp;scale(\@ex15,2));

sub scale{
    my($vec,$m)=@_;
    my @result;
    if($m eq 1){
        if(&amp;max($vec) eq &amp;min($vec)){
            die &quot;could not scale as range method!&quot;;
        }else{
            @result=map(($_-&amp;min($vec))/(&amp;max($vec)-&amp;min($vec)),@$vec);
            }
        return @result;
        }
        if($m eq  2){
            if(&amp;var($vec) eq 0){
            die &quot;could not scale as centered method!&quot;;
            }else{
                @result=map(($_-&amp;mean($vec))/&amp;sd($vec),@$vec);           
            }
            return @result;
        }
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[LanProxy by Docker]]></title>
        <id>http://www.ntlx.top/post/lanproxy-by-docker/</id>
        <link href="http://www.ntlx.top/post/lanproxy-by-docker/">
        </link>
        <updated>2021-05-25T10:19:31.000Z</updated>
        <summary type="html"><![CDATA[<p>For NAT traversal.<br>
Need a server which already had a public ip.</p>
]]></summary>
        <content type="html"><![CDATA[<p>For NAT traversal.<br>
Need a server which already had a public ip.</p>
<!-- more -->
<h1 id="server">Server</h1>
<blockquote>
<p>Must had a public ip already!</p>
</blockquote>
<h2 id="one-click-run">One-click run</h2>
<p><code>docker-compose.yml</code>:</p>
<pre><code class="language-yaml">version: '3.1'
services:
  lanproxy-client:
    image: franklin5/lanproxy-server
    container_name: lanproxy-server
    environment:
     - LANPROXY_USERNAME=your_username
     - LANPROXY_PASSWORD=your_password
    ports:
     # for web config UI
     - 8090:8090
     - 4900:4900
     - 4993:4993
     # for redirect port
     - 9000-9100:9000-9100
    restart: always
    logging:
      options:
        max-size: &quot;1m&quot;
</code></pre>
<h2 id="self-build">Self-build</h2>
<p><code>Dockerfile</code>:</p>
<pre><code class="language-Dockerfile">FROM alpine as git

WORKDIR /lanproxy

RUN apk update
RUN apk add git
RUN git clone https://github.com/NTLx/lanproxy.git ./

FROM maven as maven

WORKDIR /lanproxy

COPY --from=git /lanproxy ./

RUN mvn compile package -pl proxy-server -am 

RUN cd distribution &amp;&amp; DIR_NAME=$(echo `ls` | awk '{print $NF}') &amp;&amp; mv $DIR_NAME /lanproxy/lanproxy-server

FROM openjdk:8-jdk-alpine

WORKDIR /lanproxy-server

COPY --from=maven /lanproxy/lanproxy-server ./

EXPOSE 8090 4900 4993

CMD [&quot;sh&quot;, &quot;-c&quot;, &quot;sh bin/startup.sh &amp;&amp; tail -f logs/server.log&quot;]
</code></pre>
<p>Docker build CMD:</p>
<pre><code class="language-bash">docker build -t lanserver:v1 .
</code></pre>
<p><code>docker-compose.yml</code>:</p>
<pre><code class="language-yaml">version: '3.1'
services:
  lanproxy-client:
    image: lanserver:v1
    container_name: lanproxy-server
    environment:
     - LANPROXY_USERNAME=your_username
     - LANPROXY_PASSWORD=your_password
    ports:
     # for web config UI
     - 8090:8090
     - 4900:4900
     - 4993:4993
     # for redirect port
     - 9000-9100:9000-9100
    restart: always
    logging:
      options:
        max-size: &quot;1m&quot;
</code></pre>
<h1 id="client">Client</h1>
<blockquote>
<p><code>network_mode</code> is optional</p>
</blockquote>
<h2 id="one-click-run-2">One-click run</h2>
<p><code>docker-compose.yml</code>:</p>
<pre><code class="language-yaml">version: '3.1'
services:
  lanproxy-client:
    image: franklin5/lanproxy-client
    container_name: lanproxy-client
    environment:
     - LANPROXY_KEY=input_your_key
     - LANPROXY_HOST=input_your_host
    restart: always
    logging:
      options:
        max-size: &quot;1m&quot;
</code></pre>
<h2 id="self-build-2">Self-build</h2>
<p><code>Dockerfile</code> :</p>
<pre><code class="language-Dockerfile">FROM ubuntu

RUN apt update -y
RUN apt install openjdk-8-jdk -y
RUN apt install git -y

WORKDIR /
RUN git clone https://github.com/NTLx/lanproxy-client.git

ENTRYPOINT [&quot;/lanproxy-client/init.sh&quot;]
WORKDIR /lanproxy-client
# EXPOSE 8888
CMD [&quot;/bin/bash&quot;]
</code></pre>
<p>Docker build CMD:</p>
<pre><code class="language-bash">docker build -t lan:v1 .
</code></pre>
<p><code>docker-compose.yml</code>:</p>
<pre><code class="language-yaml">version: '3.1'
services:
  lanproxy-client:
    image: lan:v1
    container_name: lanproxy-client
    environment:
     - LANPROXY_KEY=input_your_key
     - LANPROXY_HOST=input_your_host
    restart: always
    network_mode: &quot;host&quot;
    logging:
      options:
        max-size: &quot;1m&quot;
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[How To Write]]></title>
        <id>http://www.ntlx.top/post/how-to-write/</id>
        <link href="http://www.ntlx.top/post/how-to-write/">
        </link>
        <updated>2021-05-21T02:13:53.000Z</updated>
        <summary type="html"><![CDATA[<p>Notes about how to write.</p>
]]></summary>
        <content type="html"><![CDATA[<p>Notes about how to write.</p>
<!-- more -->
<h1 id="grammar">Grammar</h1>
<h2 id="markdown">Markdown</h2>
<ul>
<li><a href="https://www.jianshu.com/p/q81RER">献给写作者的 Markdown 新手指南</a></li>
</ul>
<h2 id="latex">LaTeX</h2>
<ul>
<li><a href="http://dsm.cm.com:7777/d/f/544161148235200185">110分钟了解LaTeX2ε</a></li>
<li><a href="http://dsm.cm.com:7777/d/f/544161700862015618">latex123（大家来学LaTeX）</a></li>
</ul>
<h1 id="software">Software</h1>
<ul>
<li><a href="https://sspai.com/post/60116">VS Code 文本编辑器使用指南（基础篇）</a></li>
<li><a href="https://sspai.com/post/60117">VS Code 文本编辑器使用指南（进阶篇）</a></li>
</ul>
<h1 id="style">Style</h1>
<ul>
<li><a href="https://github.com/sparanoid/chinese-copywriting-guidelines">中文文案排版指北</a></li>
<li><a href="https://www.jianshu.com/p/3b638180e42c">技术文档写作规范</a></li>
<li><a href="https://github.com/google/styleguide/tree/ab48617e00be9d111804bd3715dd7b5f5732c9a3/docguide">Google documentation guide</a></li>
</ul>
<h1 id="automation">Automation</h1>
<ul>
<li><a href="https://sspai.com/post/60185">Microsoft Editor vs. Grammarly</a></li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Fonts]]></title>
        <id>http://www.ntlx.top/post/fonts/</id>
        <link href="http://www.ntlx.top/post/fonts/">
        </link>
        <updated>2021-05-21T02:11:57.000Z</updated>
        <summary type="html"><![CDATA[<p>Fonts collection.</p>
]]></summary>
        <content type="html"><![CDATA[<p>Fonts collection.</p>
<!-- more -->
<h1 id="recomendation">Recomendation</h1>
<h2 id="for-coding">For Coding</h2>
<p>推荐两款美观、护眼、符号全、辨识度高的 Mono Type 字体： <a href="http://192.168.10.133/EDL/files/MonacoforPowerline.zip">Monaco for Powerline</a>、<a href="http://192.168.10.133/EDL/files/FiraCode_1.206.zip">Fira Code</a></p>
<p>包含图标（符号更全）的字体集： <a href="https://www.nerdfonts.com/">Nerd Fonts</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[R]]></title>
        <id>http://www.ntlx.top/post/r/</id>
        <link href="http://www.ntlx.top/post/r/">
        </link>
        <updated>2021-05-21T02:09:44.000Z</updated>
        <summary type="html"><![CDATA[<p>R study notes.</p>
]]></summary>
        <content type="html"><![CDATA[<p>R study notes.</p>
<!-- more -->
<h1 id="grammar">Grammar</h1>
<p><a href="https://ntlx.github.io/blog/R_basic_learning.html">Basic: R script</a></p>
<h1 id="install-packages">Install Packages</h1>
<h2 id="within-conda">Within Conda</h2>
<p>For example, install bioconductor package karyoploteR</p>
<pre><code class="language-bash">/public/software/miniconda3/bin/conda install -n r3.6 -c bioconda bioconductor-karyoploteR
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Python]]></title>
        <id>http://www.ntlx.top/post/python/</id>
        <link href="http://www.ntlx.top/post/python/">
        </link>
        <updated>2021-05-21T02:07:11.000Z</updated>
        <summary type="html"><![CDATA[<p>Python study notes.</p>
]]></summary>
        <content type="html"><![CDATA[<p>Python study notes.</p>
<!-- more -->
<h1 id="basic-python-data-analysis">Basic: Python Data Analysis</h1>
<h2 id="notes">Notes</h2>
<ul>
<li><a href="https://ntlx.github.io/blog/Learn_Python/Day1_basic.html">Introduce &amp; basic</a></li>
<li><a href="https://ntlx.github.io/blog/Learn_Python/Day2_NumPy.html">NumPy</a></li>
<li><a href="https://ntlx.github.io/blog/Learn_Python/Day3_Pandas_1.html">Pandas 1st Part</a></li>
<li><a href="https://ntlx.github.io/blog/Learn_Python/Day4_Pandas_2.html">Pandas 2st Part</a></li>
<li><a href="https://ntlx.github.io/blog/Learn_Python/Day5_Pandas_3.html">Pandas 3st Part</a></li>
<li><a href="https://ntlx.github.io/blog/Learn_Python/Day6_matplotlib_1.html">matplotlib 1st Part</a></li>
<li><a href="https://ntlx.github.io/blog/Learn_Python/Day7_matplotlib_2.html">matplotlib 2st Part</a></li>
</ul>
<h2 id="practice">Practice</h2>
<ul>
<li><a href="https://ntlx.github.io/blog/Learn_Python/homework1_basic.html">Basic</a></li>
<li><a href="https://ntlx.github.io/blog/Learn_Python/homework2_numpy.html">NumPy</a></li>
<li><a href="https://ntlx.github.io/blog/Learn_Python/homework3_pandas_1.html">Pandas 1st Part</a></li>
<li><a href="https://ntlx.github.io/blog/Learn_Python/homework4_pandas_2.html">Pandas 2st Part</a></li>
<li><a href="https://ntlx.github.io/blog/Learn_Python/homework5_pandas_3.html">Pandas 3st Part</a></li>
<li><a href="https://ntlx.github.io/blog/Learn_Python/homework6_matplotlib_1.html">matplotlib 1st Part</a></li>
<li><a href="https://ntlx.github.io/blog/Learn_Python/homework7_matplotlib_2.html">matplotlib 2st Part</a></li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Git]]></title>
        <id>http://www.ntlx.top/post/git/</id>
        <link href="http://www.ntlx.top/post/git/">
        </link>
        <updated>2021-05-21T02:06:12.000Z</updated>
        <summary type="html"><![CDATA[<p>Usefull settings of Git.</p>
]]></summary>
        <content type="html"><![CDATA[<p>Usefull settings of Git.</p>
<!-- more -->
<h1 id="using-proxy">Using proxy</h1>
<pre><code class="language-bash">ssh-keygen -t rsa -b 4096 -C &quot;lx3325360@gmail.com&quot;
git config --global user.name &quot;NTLx&quot;
git config --global user.email &quot;lx3325360@gmail.com&quot;
git config --global http.proxy http://127.0.0.1:8888
git config --global https.proxy http://127.0.0.1:8888
</code></pre>
<h1 id="modify-commit-info">Modify commit info</h1>
<h2 id="change-author-info">Change Author Info</h2>
<h3 id="all">All</h3>
<pre><code class="language-bash">git filter-branch --env-filter 'export GIT_AUTHOR_EMAIL=new_author_email' --
</code></pre>
<blockquote>
<p><code>GIT_AUTHOR_NAME</code>, <code>GIT_COMMITTER_EMAIL</code>, <code>GIT_COMMITTER_NAME</code> could also be modified</p>
</blockquote>
<h3 id="specific">Specific</h3>
<pre><code class="language-bash">git filter-branch -f --env-filter '
OLD_EMAIL=&quot;Old@Email&quot;
CORRECT_NAME=&quot;Changed Name&quot;
CORRECT_EMAIL=&quot;Changed@Email&quot;
if [ &quot;$GIT_COMMITTER_EMAIL&quot; = &quot;$OLD_EMAIL&quot; ]
then
    export GIT_COMMITTER_NAME=&quot;$CORRECT_NAME&quot;
    export GIT_COMMITTER_EMAIL=&quot;$CORRECT_EMAIL&quot;
fi
if [ &quot;$GIT_AUTHOR_EMAIL&quot; = &quot;$OLD_EMAIL&quot; ]
then
    export GIT_AUTHOR_NAME=&quot;$CORRECT_NAME&quot;
    export GIT_AUTHOR_EMAIL=&quot;$CORRECT_EMAIL&quot;
fi
' --tag-name-filter cat -- --branches --tags
</code></pre>
<h1 id="log">Log</h1>
<h2 id="see-specific-author">See Specific Author</h2>
<pre><code class="language-bash">git log --author=&quot;Author Name&quot;
</code></pre>
<h1 id="notification-integration">Notification Integration</h1>
<h2 id="gitlab-telegram-bot-通知集成">GitLab &amp; Telegram Bot 通知集成</h2>
<p>Telegram 需科学上网使用</p>
<blockquote>
<p>在使用 GitLab 作为远程仓库时启用</p>
</blockquote>
<h3 id="telegram-bot通知集成">Telegram Bot通知集成</h3>
<ol>
<li>从 Telegram 搜索 <code>@gitlab_bot</code></li>
<li>加入 Bot 后点击底部 <code>START</code> 按钮会提示：</li>
</ol>
<figure data-type="image" tabindex="1"><img src="http://p5o85qxhq.bkt.clouddn.com/18-7-4/15846833.jpg" alt="" loading="lazy"></figure>
<blockquote>
<p>将完整URL提供给管理员即可完成 Telegram Bot 推送通知的设置</p>
</blockquote>
<h3 id="telegram-bot-推送示例">Telegram Bot 推送示例：</h3>
<figure data-type="image" tabindex="2"><img src="http://p5o85qxhq.bkt.clouddn.com/18-7-4/90816503.jpg" alt="" loading="lazy"></figure>
<p><strong>git 仓库的一切修改以 GitLab 仓库内容为核心，请先设置好 Telegram Bot，确保能正常获取 GitLab 仓库更新推送，修改本地 git 仓库任何文件之前先查看最近修改的推送，推荐先 pull 一下再进行本地修改，防止出现较复杂的合并冲突</strong></p>
<blockquote>
<p>大家可以登录 GitLab 仓库进行操作，提起分支合并请求（修改提交操作默认会开一个新的分支），也可以 clone 到本地修改后 push 到新的分支，提起合并请求</p>
</blockquote>
<figure data-type="image" tabindex="3"><img src="http://p5o85qxhq.bkt.clouddn.com/18-8-15/68912866.jpg" alt="" loading="lazy"></figure>
<p>Telegram Bot 的通知消息可以显示更多提交信息，推荐使用。</p>
<p>类似的，还可以在 GitLab 仓库集成 Slack 通知机器人、钉钉机器人等来获取仓库更新消息。</p>
<h1 id="tips">Tips</h1>
<ul>
<li>GitHub 上随便点开一个文件，把 url 的 <code>.com</code> 替换成 <code>.githistory.xyz</code> <a href="https://twitter.com/i/status/1265839242145460224">有惊喜</a></li>
<li><a href="github.com/hoxu/gitstats">gitstats</a></li>
</ul>
<h1 id="documents-collection">Documents Collection</h1>
<h2 id="cheat-sheet">Cheat Sheet</h2>
<p><a href="http://rogerdudler.github.io/git-guide/files/git_cheat_sheet.pdf">Check PDF</a></p>
<h2 id="the-simple-guide">The Simple Guide</h2>
<ul>
<li><a href="http://rogerdudler.github.io/git-guide/index.html">English Version</a></li>
<li><a href="http://rogerdudler.github.io/git-guide/index.zh.html">Chinese Version</a></li>
</ul>
<h2 id="git-配置最佳实践">Git 配置最佳实践</h2>
<p>原文链接： <a href="https://blog.scottnonnenberg.com/better-git-configuration/">blog.scottnonnenberg.com</a></p>
<p>我喜欢 <a href="https://git-scm.com/">Git</a>，<a href="https://github.com/scottnonnenberg/thoughts-system#other-files">每天</a>都在使用它。正如我<a href="https://blog.scottnonnenberg.com/eslint-part-1-exploration/#making-it-my-own">最近所做的事情</a>，花了一些时间通篇阅读文档，并检查我的全局 Git 配置。欢迎阅读<a href="https://blog.scottnonnenberg.com/tags/stack-improvements/">stack improvements</a>系列第四篇文章。</p>
<h3 id="一切都是git">一切都是Git</h3>
<p>我开始写代码的<a href="https://blog.scottnonnenberg.com/2017-twenty-years-online/">时代</a>还非常古老，那时候使用文件复制和<a href="https://en.wikipedia.org/wiki/Microsoft_Visual_SourceSafe">Visual SourceSafe</a>的方式进行源码管理。即使如此，我对源代码管理的概念也是非常吃惊的，我居然可以坐在家里撸代码。</p>
<p>后来，在加利福尼亚大学，在项目中我遇到 <a href="https://en.wikipedia.org/wiki/Concurrent_Versions_System">Concurrent Versions System (CVS)</a>，那时只有一些小项目，所以我当时并没有很好的理解它。</p>
<p>在微软工作的几年里，我使用 <a href="https://en.wikipedia.org/wiki/Team_Foundation_Server">Team Foundation Server</a> 进行代码管理，当时有个新名词“App Week”，指的是新接触 Visual Studio 的人将花费一整个星期的时间熟悉该产品，以确保它能正确工作。而在那段时间里，我所有的个人项目都是使用 <a href="https://en.wikipedia.org/wiki/Apache_Subversion">SVN</a>。它是免费而且容易在本地运行。通过它可以跟踪我所有的本地代码变化。</p>
<p>2010年秋天的时候，我在学习 <a href="http://rubyonrails.org/">Ruby on Rails</a> 来开发一个<a href="https://scottnonnenberg.com/work/#stark-raving-bits-2010-q-3-to-2011-q-2">项目</a>，通过查看教程，介绍了<a href="https://www.heroku.com/">Heroku</a> 和一个新的源代码管理系统：<strong>Git</strong>。这是令人吃惊的 - 我可以像它在本地托管一样对待它，同时也可以与他人互动。没有锁定，离线可用，智能合并。我爱上她了。</p>
<p>从此 Git <a href="https://rhodecode.com/insights/version-control-systems-2016">火了</a>。它成为了开源的标准。它在各种开源托管平台中使用。有许多GUI工具支持 - 专用的源代码控制工具以及代码编辑器。</p>
<p>所以，懂她非常重要。</p>
<h3 id="全局配置">全局配置</h3>
<p>不管你知不知道，其实你都已经有了一份 Git 全局配置。它是你 home 目录中的 <code>.gitconfig</code> 文件。大多数 <code>.gitconfig</code> 文件都包含你的用户名和电子邮件地址，是你在<a href="https://help.github.com/articles/set-up-git/">getting started with Git</a>过程中创建的。其实在这个文件中还有<a href="https://git-scm.com/docs/git-config#_variables">更多的配置项</a>。</p>
<p>我的整个 .gitconfig 可以<a href="https://gist.github.com/scottnonnenberg/fefa3f65fdb3715d25882f3023b31c29">通过这里查看</a>。需要的话可以直接到那里查看，不过本文我们将更详细地讨论每个部分。(也可以查看本页面中的<a href="#.gitconfig">示例</a>)</p>
<h4 id="alias">Alias</h4>
<p>.gitconfig 中有趣的部分是 <a href="https://git-scm.com/docs/git-config#git-config-alias">alias 部分</a>，您可以在其中创建自己的命令。感觉默认命令满足不了需求？在这里添加。有什么你不习惯的？在这里添加自己的版本吧！</p>
<ul>
<li><code>prune = fetch --prune</code> - 当在其他人将分支推送到远程仓库时，我也会得到了大量的本地分支。<a href="https://git-scm.com/docs/git-fetch#git-fetch--p">Prune</a>可以删除远端已经删除的任何本地分支。配置在这里，因为我总是忘记它。</li>
<li><code>undo = reset --soft HEAD ^</code> - 如果我在做出提交时犯了一个错误，这个命令会可以在提交之前撤销。通常我只是在这种情况下修改现有的提交，因为它保留了提交信息。</li>
<li><code>stash-all = stash save --include-untracked</code> - 当你正在开发，有人频繁的要求你切换分支时，<a href="https://git-scm.com/docs/git-stash">stash</a> 是非常有用的。这个命令确保当你 stash 时，可以记录没有被 <code>git add</code> 的新文件。</li>
<li><code>glog = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)%Creset'</code> - 使用<a href="https://git-scm.com/docs/git-log">默认 git log</a> 查看提交历史记录有时是无效率的，并没有真正关注最重要的信息。这种彩色的图形展示更容易理解，特别是当分支复杂的时候。</li>
</ul>
<h4 id="merge">Merge</h4>
<p>没有合并提交，没有合并两个历史记录，只是平滑的在两次提交之中。</p>
<p>你可能会想知道如何完成这项工作。答案用 <a href="https://git-scm.com/docs/git-rebase">git rebase</a>，用于把一个分支的修改合并到当前分支，它<a href="https://nathanleclaire.com/blog/2014/09/14/dont-be-scared-of-git-rebase/">非常有用</a></p>
<p>当我 pull 时与 <code>master</code> 有冲突的时候，我使用这种方式来处理。当你在本地分支上修改后，同时其他人在 <code>master</code> 上 做了修改，我想这样比你直接 merge 到你本地分支时的 commit 更好。</p>
<p>这样你可以避免多出一个 merge 的 commit。如果我打算新建一个merge commit，我可以用明确的 git merge -ff 来创建。</p>
<p>在发生合并冲突时，<code>conflictstyle = diff3</code> 会给您更多的信息。</p>
<h4 id="commit">Commit</h4>
<p><code>gpgSign = true</code> 确保您的所有 commit 都由你的 <a href="https://www.gnupg.org/">GPG</a> 密钥签名。这通常是一个好主意，因为 <code>.gitconfig</code> 文件中没有验证您的用户信息，这意味着看起来像您这样的提交可能会轻松显示在其他人的提交 信息中。</p>
<p>事实上，我曾经用过别人的凭据，因为帐户和机器配置耗时太长。我的提交请求是通过别人的帐号提交的，但内部的所有提交都是我的真实账号。</p>
<p><a href="https://help.github.com/articles/adding-a-new-gpg-key-to-your-github-account/">将你的 GPG key 添加到 Github</a> 并尝试一次提交，你可能就会解决你现在的疑问，您提交内容将会有<a href="https://github.com/scottnonnenberg/eslint-config-thehelp/pull/5/commits">一个“已验证”标记</a>。</p>
<p>注意：</p>
<ul>
<li>如果您有多个 GPG 密钥，可以使用 <a href="https://git-scm.com/docs/git-config#git-config-usersigningKey">user.signingKey</a> 选项指定要使用的密钥。</li>
<li>上述的配置在 GUI 工具里不会生效，你需要在工具里的设置里找配置项。</li>
<li><code>gpg-agent</code>可以保存口令，让我们更方便。所以使用它吧！</li>
</ul>
<h4 id="push">Push</h4>
<p><code>default = simple</code> 可能是你已经设置的<a href="https://git-scm.com/docs/git-config#git-config-pushdefault">配置项</a>。它可以更轻松地将您的本地分支推送到远程，当二者分支名一样的时候。</p>
<p><code>followTags = true</code> 很简单。配置它以后，当你 <code>git push</code> 的时候可以直接将本地的 tags 提交到远程，而不用每次都加参数 <code>--follow-tags</code>。不知道你是不是和我一样，我如果创建了一个tag，我就基本上一定会将它推到远程的。</p>
<h4 id="status">Status</h4>
<p><code>showUntrackedFiles = all</code> 通常当您添加一个新目录，但是还没有使用 <code>git add</code> 时，你用 <code>git status</code> 将只显示目录名称。这困扰我很多次了，因为一个新的，很大的一个目录目录却只显示一行。<a href="https://git-scm.com/docs/git-config#git-config-statusshowUntrackedFiles">此选项</a>在 <code>git status</code> 的时候显示该新目录下的所有文件。</p>
<p>注意：当仓库很大的时候，这可能会导致效率比较慢。</p>
<h4 id="transfer">Transfer</h4>
<p><code>fsckobjects = true</code> 告诉 Git，您希望在接收或发送修改时进行一些额外的检查。为什么要检查？毕竟发现错误赶早不赶晚！</p>
<p>注意：这可以使速度慢一些。</p>
<h4 id="diff-工具icdiff">Diff 工具：icdiff</h4>
<p>除了内置的 git diff 命令之外，Git 还允许您指定一个<a href="https://git-scm.com/docs/git-difftool">外部工具</a>来显示您的文件差异。下面配置可以配置默认使用 <a href="http://192.168.10.133/wiki/doku.php?id=oe_server:tools_on_server#icdiff">icdiff</a> 显示存储库的两个文件之间的差异：</p>
<pre><code class="language-ini">[diff]
  tool = icdiff
[difftool]
  prompt = false
[difftool &quot;icdiff&quot;]
  cmd = /usr/local/bin/icdiff --line-numbers $LOCAL $REMOTE
</code></pre>
<p>你可以像正常情况那样使用它：git difftool master branch</p>
<p><code>icdiff</code> 很有趣，因为它试图在控制台中生成多彩的 GitHub 风格的差异。比通常的基于块的差异样式<a href="https://blog.scottnonnenberg.com/top-ten-pull-request-review-mistakes/#3-unified-diffs">更容易阅读</a>。</p>
<p>注意：</p>
<ul>
<li>你可能安装 icdiff 有遇到一些问题。令人高兴的是，有一个简单的<a href="https://github.com/jeffkaufman/icdiff/issues/72">解决方法</a>。</li>
<li>将 <code>git diff</code> 当做备胎， <code>- icdiff</code> 似乎不会处理与<code>/dev/null</code>的比较。例如，在你添加一个新文件之后尝试 <code>git difftool --cached</code>。</li>
</ul>
<h3 id="bonus-more-revisions">Bonus: More revisions!</h3>
<p>你经常会用 git checkout master，对吧？在该命令中，<code>master</code> 是 <a href="https://git-scm.com/docs/gitrevisions">revisions</a> 的示例，是引用 master 分支中最新提交的简写。这些是常见的 revision 格式：</p>
<pre><code class="language-bash"># Check out a branch
git checkout branchname

# Check out a remote branch
git checkout remotes/origin/branchname

# Check out a specific commit
git checkout 158e4ef8409a7f115250309e1234567a44341404

# Check out most recent commit for current branch
git checkout HEAD
</code></pre>
<p>但事实证明，有一种语言来指定revisions。所有这些操作都适用于以上使用的任何名词：</p>
<pre><code class="language-bash"># ^ means 'first parent commit,' therefore the second-most recent commit in the master branch
git checkout master^

# If it's a merge commit, with more than one parent, this gets the second parent
git checkout master^2

# Same thing as three ^ characters - three 'first-parent' steps up the tree
git checkout master~3

# The first commit prior to a day ago
git checkout master@{yesterday}

# The first commit prior to 5 minutes ago
git checkout master@{5.minutes.ago}
</code></pre>
<p>您可以在<a href="https://git-scm.com/docs/gitrevisions">这里</a>找到所有支持的 revision 格式，我很惊讶它是多么全面！</p>
<p>记住，在一个 revision 中你可以使用大多数的 git 命令，比如：<code>git glog master@{10.days.ago}..master</code></p>
<h3 id="动起来吧">动起来吧！</h3>
<p>可以从我的 <code>.gitconfig</code> 开始，或者定制你自己的风格。你甚至可以像我一样更加深入了解命令列表和选项列表，更多的分享出去。</p>
<p>使 Git 对你最有用。Git 为减少 bug 以及解决代码重提提供了非常大的舒适性。动起来吧！</p>
<p>一些很好的资源：</p>
<ul>
<li><a href="https://git-scm.com/docs/git-config#_variables">这里</a>的配置需要具体项目具体分析。在项目配置文件中使用相同的格式：<code>project-dir / .git / config</code></li>
<li>获取所有 <code>git log</code> 配置的<a href="https://git-scm.com/docs/git-log#_options">最新信息</a></li>
<li><a href="https://git-scm.com/docs/gitrevisions">各个版本 Git</a></li>
<li><a href="https://mikegerwitz.com/papers/git-horror-story">了解签名</a></li>
<li><a href="http://https://hackernoon.com/lesser-known-git-commands-151a1918a60">自定义别名</a></li>
<li>有关 git 仓库损坏：
<ul>
<li><a href="https://groups.google.com/forum/#!topic/binary-transparency/f-BI4o8HZW0">https://groups.google.com/forum/#!topic/binary-transparency/f-BI4o8HZW0</a></li>
<li><a href="http://git.661346.n2.nabble.com/propagating-repo-corruption-across-clone-td7580504i40.html">http://git.661346.n2.nabble.com/propagating-repo-corruption-across-clone-td7580504i40.html</a></li>
</ul>
</li>
<li>对 Git 的复杂性感到沮丧？<a href="https://stevebennett.me/2012/02/24/10-things-i-hate-about-git/">猛击这里</a></li>
</ul>
<h3 id="gitconfig">.gitconfig</h3>
<pre><code class="language-ini">[user]
  email = scott@nonnenberg.com
  name = Scott Nonnenberg

[alias]
  prune = fetch --prune
  # Because I constantly forget how to do this
  # https://git-scm.com/docs/git-fetch#git-fetch--p

  undo = reset --soft HEAD^
  # Not quite as common as an amend, but still common
  # https://git-scm.com/docs/git-reset#git-reset-emgitresetemltmodegtltcommitgt

  stash-all = stash save --include-untracked
  # We wanna grab those pesky un-added files!
  # https://git-scm.com/docs/git-stash

  glog = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset'
  # No need for a GUI - a nice, colorful, graphical representation
  # https://git-scm.com/docs/git-log
  # via https://medium.com/@payload.dd/thanks-for-the-git-st-i-will-use-this-4da5839a21a4

[merge]
  ff = only
  # I pretty much never mean to do a real merge, since I use a rebase workflow.
  # Note: this global option applies to all merges, including those done during a git pull
  # https://git-scm.com/docs/git-config#git-config-mergeff

  conflictstyle = diff3
  # Standard diff is two sets of final changes. This introduces the original text before each side's changes.
  # https://git-scm.com/docs/git-config#git-config-mergeconflictStyle

[commit]
  gpgSign = true
  # &quot;other people can trust that the changes you've made really were made by you&quot;
  # https://help.github.com/articles/about-gpg/
  # https://git-scm.com/docs/git-config#git-config-commitgpgSign

[push]
  default = simple
  # &quot;push the current branch back to the branch whose changes are usually integrated into the current branch&quot;
  # &quot;refuse to push if the upstream branch’s name is different from the local one&quot;
  # https://git-scm.com/docs/git-config#git-config-pushdefault

  followTags = true
  # Because I get sick of telling git to do it manually
  # https://git-scm.com/docs/git-config#git-config-pushfollowTags

[status]
  showUntrackedFiles = all
  # Sometimes a newly-added folder, since it's only one line in git status, can slip under the radar.
  # https://git-scm.com/docs/git-config#git-config-statusshowUntrackedFiles

[transfer]
  fsckobjects = true
  # To combat repository corruption!
  # Note: this global option applies during receive and transmit
  # https://git-scm.com/docs/git-config#git-config-transferfsckObjects
  # via https://groups.google.com/forum/#!topic/binary-transparency/f-BI4o8HZW0


# A nice little github-like colorful, split diff right in the console.
# via http://owen.cymru/github-style-diff-in-terminal-with-icdiff/
[diff]
  tool = icdiff
[difftool]
  prompt = false
[difftool &quot;icdiff&quot;]
  cmd = /usr/local/bin/icdiff --line-numbers $LOCAL $REMOTE
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Editor Config]]></title>
        <id>http://www.ntlx.top/post/editor-config/</id>
        <link href="http://www.ntlx.top/post/editor-config/">
        </link>
        <updated>2021-05-21T02:03:28.000Z</updated>
        <summary type="html"><![CDATA[<p>An OS crossed format solution!</p>
]]></summary>
        <content type="html"><![CDATA[<p>An OS crossed format solution!</p>
<!-- more -->
<h1 id="前言">前言</h1>
<p>与“规范”相关的一个事情：</p>
<p>在进行脚本开发时，不同的人有不同的书写习惯，比如 python 脚本有用 tab 缩进也有用 space 缩进的、yaml 配置文件有用 2 个 space 也有用 4 个 space 控制格式的。<br>
这个问题在团队开发时更加凸显，尤其大家连编辑器的使用也不相同时。</p>
<p>为了书写规范化，现有一个简单易上手、跨编辑器且静默生效的代码风格定义和维护工具：EditorConfig，推荐在开发项目（例如 Git 仓库）中使用。</p>
<h1 id="editorconfig-是什么">EditorConfig 是什么</h1>
<p>EditorConfig 是一套用于统一代码格式的解决方案，很多项目都有用到，比如 Bootstrap、jQuery、Underscore 和 Ruby 等等。<a href="https://editorconfig.org/">官方网站</a>说的很简明，为了方便大家快速上手，这里是简单的翻译。</p>
<p>EditorConfig 可以帮助开发者在不同的编辑器和IDE之间定义和维护一致的代码风格。EditorConfig 包含一个用于定义代码格式的文件和一批编辑器插件，这些插件可以让编辑器读取配置文件并依此格式化代码。EditorConfig 的配置文件十分易读，并且可以很好的在VCS（Version Control System）下工作。</p>
<h1 id="在哪里存放配置文件">在哪里存放配置文件</h1>
<p>当打开一个文件时，EditorConfig 插件会在打开文件的目录和其每一级父目录查找 <code>.editorconfig</code> 文件，直到有一个配置文件 <code>root=true</code>。</p>
<p>EditorConfig 配置文件从上往下读取，并且路径最近的文件最后被读取。匹配的配置属性按照属性应用在代码上，所以最接近代码文件的属性优先级最高。</p>
<h1 id="下载插件">下载插件</h1>
<p>支持 VS Code、Vim、Atom、PyCharm 等众多编辑器/IDE，请去<a href="https://editorconfig.org/#download">官网</a>查看是否需要安装插件以及下载相关。</p>
<h1 id="示例配置文件">示例配置文件</h1>
<pre><code class="language-ini"># EditorConfig is awesome: https://EditorConfig.org

# top-most EditorConfig file
root = true

# Unix-style newlines with a newline ending every file
[*]
end_of_line = lf
insert_final_newline = true

# Matches multiple files with brace expansion notation
# Set default charset
[*.{js,py,pl,sh,r}]
charset = utf-8

# 4 space indentation
[*.py]
indent_style = space
indent_size = 4

# 2 space indentation
[*.{yml,yaml}]
indent_style = space
indent_size = 2

# tab indentation (no size specified)
[*.{js,pl,sh,r,rule,Makefile}]
indent_style = tab

# Indentation override for all JS under lib directory
[lib/**.js]
indent_style = space
indent_size = 2

# Matches the exact files either package.json or .travis.yml
[{package.json,.travis.yml}]
indent_style = space
indent_size = 2
</code></pre>
<p>目前所有的属性名和属性值都是大小写不敏感的。编译时都会将其转为小写。通常，如果没有明确指定某个属性，则会使用编辑器的配置，而 EditorConfig 不会处理。</p>
<p>推荐不要指定某些EditorConfig属性。比如，<code>tab_width</code> 不需要特别指定，除非它与 <code>indent_size</code> 不同。同样的，当 <code>indent_style</code> 设为 <code>tab</code> 时，不需要配置 <code>indent_size</code>，这样才方便阅读者使用他们习惯的缩进格式。另外，如果某些属性并没有规范化（比如 <code>end_of_line</code>），就最好不要设置它。</p>
<p><a href="https://github.com/editorconfig/editorconfig/wiki/Projects-Using-EditorConfig">这里</a>是一些使用了 EditorConfig 的示例项目</p>
<p>注意：不是每种插件都支持所有的属性，具体可见<a href="https://github.com/editorconfig/editorconfig/wiki/EditorConfig-Properties">Wiki</a>。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[APP Collections]]></title>
        <id>http://www.ntlx.top/post/app-collections/</id>
        <link href="http://www.ntlx.top/post/app-collections/">
        </link>
        <updated>2021-05-21T02:01:16.000Z</updated>
        <summary type="html"><![CDATA[<p>Collect usefull apps.</p>
]]></summary>
        <content type="html"><![CDATA[<p>Collect usefull apps.</p>
<!-- more -->
<h1 id="web-based-tools">Web-based Tools</h1>
<h2 id="search">Search</h2>
<ul>
<li><a href="https://socode.pro/">socode.pro</a>：程序员的搜索工具，将各种网络资源汇总在一个搜索框里面</li>
</ul>
<h2 id="file">File</h2>
<ul>
<li><a href="https://convertio.co/zh/">Convertio（File Format Converter）</a></li>
</ul>
<h3 id="pdf-tool">PDF Tool</h3>
<ul>
<li><a href="https://smallpdf.com/">SmallPDF</a></li>
<li><a href="https://lightpdf.cn/">轻闪 PDF</a></li>
</ul>
<h2 id="text">Text</h2>
<ul>
<li><a href="https://www.mathcha.io/">Online Mathematics Editor: Mathcha</a></li>
<li><a href="https://stackedit.io/">StackEdit – In-browser Markdown editor</a></li>
</ul>
<blockquote>
<figure data-type="image" tabindex="1"><img src="https://stackedit.io/static/landing/favicon.ico" alt="" loading="lazy"></figure>
<ul>
<li>实时预览</li>
<li>支持脚注</li>
<li>自动保存</li>
<li>可与云存储同步</li>
<li>多种格式导出</li>
<li>支持一键发布到GitHub等</li>
<li>本身不支持<code>[TOC]</code>添加目录语法，但是在一键发布的时候，可以选择自动生成目录（只对一级和二级目录进行自动生成）</li>
</ul>
</blockquote>
<h2 id="pic">Pic</h2>
<ul>
<li><a href="https://www.z4a.net/">Online Gallery: Z4A</a></li>
<li><a href="https://www.yasuotu.com/">Pic resize, cut, zip</a></li>
</ul>
<h2 id="video">Video</h2>
<ul>
<li><a href="http://my.cuplayer.com/login">Video Cloud: CuPlayer</a></li>
</ul>
<h2 id="other">Other</h2>
<ul>
<li><a href="https://www.apowersoft.cn/">Screen Shot, Screen Record, Audio Record, Audio Edit&amp;Convert, Video Convert: Apowersoft</a></li>
</ul>
<h1 id="installable-tools">Installable Tools</h1>
<h2 id="vscode">VSCode</h2>
<figure data-type="image" tabindex="2"><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/2/2d/Visual_Studio_Code_1.18_icon.svg/1200px-Visual_Studio_Code_1.18_icon.svg.png" alt="" loading="lazy"></figure>
<p>Visual Studio Code 简称 VSCode。不是 IDE 的全能文本编辑器，Microsoft 出品的神器，<a href="https://code.visualstudio.com/download">点此下载</a>。</p>
<blockquote>
<p>其优点太多，你只需要知道它是最先进的文本编辑器就好了。另外，再强调一点，它不是 IDE，和 PyCharm 等软件有区别。</p>
</blockquote>
<ul>
<li>Git 集成（可视化操作 Git）</li>
<li>强大的自定义能力</li>
<li>强大的插件功能</li>
<li>强大的兼容性</li>
<li>强大的社区支持</li>
<li>强大的官方支持</li>
</ul>
<p><strong>最新特色：可直连服务器进行开发</strong></p>
<p>更多特性请查看<a href="https://code.visualstudio.com/">官网</a></p>
<h2 id="for-markdown">For Markdown</h2>
<p><a href="https://github.com/Molunerfinn/PicGo">完美的图床软件</a><br>
<img src="/img/picgo.png" alt="picgo.png" loading="lazy"></p>
<p><a href="https://mathpix.com/">识别公式转换为 LaTeX 代码</a><br>
<img src="https://mathpix.com/images/mathpix-page/snip_all.png" alt="" loading="lazy"></p>
<p><a href="https://gitnoteapp.com/zh/">自带图床功能的基于 Git 的 Markdown 编辑器</a><br>
<img src="/img/gitmarkdown.png" alt="gitmarkdown.png" loading="lazy"></p>
<p><a href="https://ivarptr.github.io/yu-writer.site/">关注历史记录、版本恢复的 Markdown 编辑器</a><br>
<img src="https://ivarptr.github.io/yu-writer.site/resources/images/screenshot.png" alt="" loading="lazy"></p>
<h2 id="ide">IDE</h2>
<h3 id="python">Python</h3>
<p>PyCharm<br>
<img src="https://confluence.jetbrains.com/download/thumbnails/51188837/PyCharm_400x400_Twitter_logo_white.png" alt="" loading="lazy"></p>
<p>PyCharm 在 Mac OS X 的 <a href="https://resources.jetbrains.com/storage/products/pycharm/docs/PyCharm_ReferenceCard_mac.pdf">CheetSheet</a></p>
<h3 id="perl">Perl</h3>
<p>Komodo<br>
<img src="https://www.activestate.com/wp-content/uploads/2018/09/screenshot.png" alt="" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[PostgreSQL]]></title>
        <id>http://www.ntlx.top/post/postgresql/</id>
        <link href="http://www.ntlx.top/post/postgresql/">
        </link>
        <updated>2021-05-21T01:58:05.000Z</updated>
        <summary type="html"><![CDATA[<p>PostgreSQL usage note.</p>
]]></summary>
        <content type="html"><![CDATA[<p>PostgreSQL usage note.</p>
<!-- more -->
<h1 id="postgresql-数据库备份">postgresql 数据库备份</h1>
<pre><code class="language-bash">docker exec -t postgresql pg_dump -U postgres -d postgres -f /wiki.yyyymmdd.sql
docker cp postgresql:/wiki.yyyymmdd.sql .
</code></pre>
<p>备份脚本：</p>
<pre><code class="language-perl">#!/usr/bin/perl
($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) = localtime();
$year+=1900;
$mon+=1;
`docker exec -t postgresql pg_dump -U postgres -d postgres -f /wiki.$year.$mon.$mday.$hour.$min.$sec.sql`;
`docker cp postgresql:/wiki.$year.$mon.$mday.$hour.$min.$sec.sql /public`;
`docker exec -t postgresql rm /wiki.$year.$mon.$mday.$hour.$min.$sec.sql`;
`gzip /public/wiki.$year.$mon.$mday.$hour.$min.$sec.sql`;
#`scp -P 8022 /public/wiki.$year.$mon.$mday.$hour.$min.$sec.sql.gz lx\@cloud.cubicise.com:/public/wiki.backup/`;
#`rm /public/wiki.$year.$mon.$mday.$hour.$min.$sec.sql.gz`;
</code></pre>
<h1 id="postgresql-数据库还原">postgresql 数据库还原</h1>
<blockquote>
<p>还原时，若遇到错误，可建立一个全新（未建立过连接）的 postgresql container，导入数据库后再连接应用</p>
</blockquote>
<pre><code class="language-bash">docker cp wiki.yyyymmdd.sql postgresql:/
docker exec -it postgresql bash
su - postgres
psql -d postgres -U postgres -f /wiki.yyyymmdd.sql
</code></pre>
]]></content>
    </entry>
</feed>