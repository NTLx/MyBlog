<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://www.ntlx.top</id>
    <title>NTLx&apos;s Blog</title>
    <updated>2021-05-18T04:54:59.595Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="http://www.ntlx.top"/>
    <link rel="self" href="http://www.ntlx.top/atom.xml"/>
    <subtitle>My Tech Notes &amp; Thoughts</subtitle>
    <logo>http://www.ntlx.top/images/avatar.png</logo>
    <icon>http://www.ntlx.top/favicon.ico</icon>
    <rights>All rights reserved 2021, NTLx&apos;s Blog</rights>
    <entry>
        <title type="html"><![CDATA[Raspberry Pi]]></title>
        <id>http://www.ntlx.top/post/raspberry-pi/</id>
        <link href="http://www.ntlx.top/post/raspberry-pi/">
        </link>
        <updated>2021-05-18T04:53:52.000Z</updated>
        <summary type="html"><![CDATA[<p>The most popular IoT core!</p>
]]></summary>
        <content type="html"><![CDATA[<p>The most popular IoT core!</p>
<!-- more -->
<h1 id="k3s">k3s</h1>
<p><a href="https://medium.com/@alexellisuk/five-years-of-raspberry-pi-clusters-77e56e547875">Five years of Raspberry Pi Clusters</a></p>
<h1 id="initial-configure">Initial configure</h1>
<blockquote>
<p>For Official OS: Raspbian Buster (based on Debian)</p>
</blockquote>
<p>Add blow content to a file, such as <code>~/init.sh</code>, then just run it like this <code>~/init.sh</code>.</p>
<pre><code class="language-bash">#!/usr/bin/expect -f

sudo cp /etc/apt/sources.list /etc/apt/sources.list.bak
sudo cp /etc/apt/sources.list.d/raspi.list /etc/apt/sources.list.d/raspi.list.bak

cat &lt;&lt; EOF &gt; sources.list
deb http://mirrors.tuna.tsinghua.edu.cn/raspbian/raspbian/ buster main contrib non-free rpi
deb-src http://mirrors.tuna.tsinghua.edu.cn/raspbian/raspbian/ buster main contrib non-free rpi
EOF

cat &lt;&lt; EOF &gt; raspi.list
deb http://mirrors.tuna.tsinghua.edu.cn/raspberrypi/ buster main ui
deb-src http://mirrors.tuna.tsinghua.edu.cn/raspberrypi/ buster main ui
EOF

mkdir -p ~/.pip/
cat &lt;&lt; EOF &gt; ~/.pip/pip.conf
[global]
index-url = https://pypi.tuna.tsinghua.edu.cn/simple/
EOF

sudo cp sources.list /etc/apt/sources.list
sudo cp raspi.list /etc/apt/sources.list.d/raspi.list

sudo apt update
sudo apt upgrade -y

sudo apt install -y git vim htop ncdu tmux bash-completion tcl expect
sudo apt install -y p7zip-full libio-compress-perl unrar-free unzip ncompress libperlio-gzip-perl bzip2

cat &lt;&lt; EOF &gt;&gt; ~/.bashrc

tablook () {
    column -s $'\t' -t &quot;\$1&quot; | less -S
}

alias les=&quot;less -SN&quot;

alias ls=&quot;ls --color=auto&quot;
alias l=&quot;ls -a&quot;
alias ll=&quot;ls -l&quot;
alias lll=&quot;ls -la&quot;

alias ..='cd ..'
alias ...='cd ../../'
alias ....='cd ../../../'
alias .....='cd ../../../../'
alias ......='cd ../../../../../'

# Use mcd to create a directory and cd to it simultaneously:
function mcd { mkdir -p &quot;\$1&quot; &amp;&amp; cd &quot;\$1&quot;;}

# Make grep pretty:
alias grep=&quot;grep --color=auto&quot;

# Show your \$PATH in a prettier format:
alias showpath='echo \$PATH | tr &quot;:&quot; &quot;\n&quot; | nl'

# as suggested by Mendel Cooper in &quot;Advanced Bash Scripting Guide&quot;
extract () {
   if [ -f \$1 ] ; then
       case \$1 in
        *.tar.bz2)      tar xvjf \$1 ;;
        *.tar.gz)       tar xvzf \$1 ;;
        *.tar.xz)       tar Jxvf \$1 ;;
        *.bz2)          bunzip2 \$1 ;;
        *.rar)          unrar x \$1 ;;
        *.gz)           gunzip \$1 ;;
        *.tar)          tar xvf \$1 ;;
        *.tbz2)         tar xvjf \$1 ;;
        *.tgz)          tar xvzf \$1 ;;
        *.zip)          unzip \$1 ;;
        *.Z)            uncompress \$1 ;;
        *.7z)           7z x \$1 ;;
        *)              echo &quot;don't know how to extract '\$1'...&quot; ;;
       esac
   else
       echo &quot;'\$1' is not a valid file!&quot;
   fi
}

EOF

source ~/.bashrc

git config --global user.name &quot;NTLx&quot;
git config --global user.email &quot;lx3325360@gmail.com&quot;

spawn ssh-keygen -t rsa -b 4096 -C &quot;lx3325360@gmail.com&quot;
expect &quot;*home*&quot;
send &quot;\n&quot;
expect &quot;*empty*&quot;
send &quot;\n&quot;
expect &quot;*again*&quot;
send &quot;\n&quot;
expect eof

# sudo apt install -y zsh zsh-autosuggestions zsh-syntax-highlighting zsh-theme-powerlevel9k remmina remmina-common remmina-dev remmina-plugin-rdp remmina-plugin-vnc fcitx fcitx-googlepinyin fcitx-module-cloudpinyin fcitx-sunpinyin
# cat &lt;&lt; EOF &gt; ~/.zshrc
# source /usr/share/powerlevel9k/powerlevel9k.zsh-theme
# source /usr/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
# source /usr/share/zsh-autosuggestions/zsh-autosuggestions.zsh

# export TERM=&quot;xterm-256color&quot;

# POWERLEVEL9K_PROMPT_ON_NEWLINE=true
# POWERLEVEL9K_LEFT_PROMPT_ELEMENTS=(os_icon user dir_writable dir vcs)
# POWERLEVEL9K_RIGHT_PROMPT_ELEMENTS=(status command_execution_time root_indicator background_jobs time disk_usage ram load)
# POWERLEVEL9K_MULTILINE_LAST_PROMPT_PREFIX=&quot;%(?:%{$fg_bold[green]%}➜ :%{$fg_bold[red]%}➜ )&quot;
# POWERLEVEL9K_MULTILINE_FIRST_PROMPT_PREFIX=&quot;&quot;
# POWERLEVEL9K_USER_ICON=&quot;\uF415&quot; # &lt;U+F415&gt;
# POWERLEVEL9K_ROOT_ICON=&quot;\uF09C&quot;
# POWERLEVEL9K_SUDO_ICON=$'\uF09C' # &lt;U+F09C&gt;
# POWERLEVEL9K_TIME_FORMAT=&quot;%D{%H:%M}&quot;
# POWERLEVEL9K_VCS_GIT_ICON='\uF408'
# POWERLEVEL9K_VCS_GIT_GITHUB_ICON='\uF408'
# EOF

echo 'You can now reboot your rpi to take effect, Good Luck!'
</code></pre>
<h2 id="install-docker">Install Docker</h2>
<pre><code class="language-bash">curl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun
sudo usermod -aG docker pi
</code></pre>
<h2 id="install-docker-compose">Install Docker Compose</h2>
<pre><code class="language-bash">sudo curl -L &quot;https://github.com/docker/compose/releases/download/1.26.2/docker-compose-$(uname -s)-$(uname -m)&quot; -o /usr/local/bin/docker-compose
</code></pre>
<p>OR</p>
<pre><code class="language-bash">sudo apt install -y libssl-dev libffi-dev
sudo apt install -y python3-pip
pip3 install docker-compose
</code></pre>
<h2 id="additional-settings">Additional Settings</h2>
<blockquote>
<p>Especially for Raspbian Buster Lite</p>
<ul>
<li>Default user: <strong>pi</strong></li>
<li>Default user password: <strong>raspberry</strong></li>
</ul>
</blockquote>
<p>Turn on SSH:</p>
<p><code>sudo raspi-config</code>, choose <code>5 Interface Options</code>, then choose <code>SSH</code> to enable.</p>
<p>Connect WiFi:</p>
<p><code>sudo raspi-config</code>, choose <code>2 Network Options</code>, then choose <code>N2 Wi-fi</code> and enter SSID &amp; password to connect.</p>
<h2 id="cpu-temprature">CPU Temprature</h2>
<p>Could just write a perl script to check, like <code>CPU.pl</code>:</p>
<pre><code class="language-perl">#!/usr/bin/perl
while(1) {
    print `cat /sys/class/thermal/thermal_zone0/temp`/1000;
    &lt;STDIN&gt;;
}
</code></pre>
<h1 id="manjaro-for-arm">Manjaro For ARM</h1>
<h2 id="download-system-file">Download system file</h2>
<p>Download system installation mirror files at <a href="https://osdn.net/projects/manjaro-arm/storage/rpi4/">OSDN</a>, you can choose form minimal, xfce, kde-plasma, mate and lxqt.</p>
<h2 id="flash-to-tf-card">Flash to TF card</h2>
<p>Use <a href="https://www.balena.io/etcher/">Etcher</a> or <code>dd</code> command described below:</p>
<ol>
<li>find portable device in Mac OS (use <code>diskutil list</code>) or Linux (use <code>lsblk</code> or <code>df</code> or something), for example <code>/dev/disk2</code>.</li>
<li>Unmount portable device on Mac OS (<code>diskutil unmountDisk /dev/disk2</code>) or Linux (<code>umount /dev/sdb</code>).</li>
<li>Use command <code>dd</code> to flash a system file to portable device like below:</li>
</ol>
<pre><code class="language-bash">sudo dd if=path/to/img_or_iso of=/dev/disk2 bs=4m;sync
</code></pre>
<blockquote>
<p>Remember to eject the portable device after above steps on Mac OS (<code>diskutil eject /dev/disk2</code>) or Linux (<code>eject -s /dev/disk2</code>).</p>
</blockquote>
<h2 id="choose-mirror">Choose mirror</h2>
<blockquote>
<p>For users in China, Denmark is the fastest mirror currently.</p>
</blockquote>
<pre><code class="language-bash">sudo pacman-mirrors -c Denmark -m rank [-i]
</code></pre>
<h2 id="instalation-script">Instalation Script</h2>
<pre><code class="language-bash">sudo cp /etc/pacman.conf /etc/pacman.conf.bak

cat &lt;&lt; EOF &gt; ~/pacman.conf
[options]
HoldPkg      = pacman glibc manjaro-system
XferCommand = /usr/bin/curl -x http://192.168.120.63:8888 -C - -f %u --output %o
Architecture = aarch64

CheckSpace
VerbosePkgLists

SigLevel    = Required DatabaseOptional
LocalFileSigLevel = Optional

[core]
Include = /etc/pacman.d/mirrorlist

[extra]
Include = /etc/pacman.d/mirrorlist

[community]
Include = /etc/pacman.d/mirrorlist

EOF

sudo cp ~/pacman.conf /etc/pacman.conf

git config --global http.proxy http://192.168.120.63:8888
git config --global https.proxy http://192.168.120.63:8888
export http_proxy=&quot;http://192.168.120.63:8888&quot;; export https_proxy=&quot;http://192.168.120.63:8888&quot;; export ftp_proxy=&quot;http://192.168.120.63:8888&quot;

sudo pacman-mirrors -c United_States -m rank
sudo pacman -Syyu
sudo pacman -S patch pkgconf fakeroot autoconf automake make cmake gcc clang vim yay wqy-microhei binutils nasm
yay -S xrdp
sudo systemctl enable xrdp.service
sudo systemctl start xrdp.service
sudo pacman -S remmina
# sudo pacman -S patch pkgconf fakeroot autoconf automake make cmake gcc clang vim yay wqy-microhei freerdp remmina
# yay -S xrdp xorgxrdp remmina-plugin-rdesktop remmina
# libtool --finish /usr/lib/xrdp
# libtool --finish /usr/lib/xorg/modules/input
</code></pre>
<h1 id="windows-iot-for-arm">Windows IoT For ARM</h1>
<h2 id="download-system">Download system</h2>
<p>Go to <a href="https://uupdump.ml/">UUP dump</a>, choose a system version (arm64), and choose <code>Download using aria2 and convert</code>, get the generated <code>*.zip</code> file, extract it, then run <code>*.cmd</code> under a windows system, you will get the <code>*.iso</code> system mirror file.</p>
<h2 id="deploy-system-to-tf-card">Deploy system to TF card</h2>
<p>First, download <a href="https://github.com/WOA-Project/WOA-Deployer-Rpi">WOA</a>.</p>
<p>Then, open system file (<code>*.iso</code>), and choose <code>source/install.wim</code> as source for deploying.</p>
<h1 id="software">Software</h1>
<h2 id="aria2-ng">Aria2 &amp; NG</h2>
<pre><code class="language-bash">git clone git@github.com:NTLx/aira2-ng.git
docker build -t aira2webui-ng aira2-ng
mkdir -p /home/pi/Download /home/pi/aria2_conf
docker run -d --name='aria2' -p '6800:6800/tcp' -p '6800:6800/udp' -p '80:80/tcp' -p '80:80/udp' -v '/home/pi/Download':'/data':'rw' -v '/home/pi/aria2_conf':'/config':'rw' aira2webui-ng
</code></pre>
<h1 id="disk">Disk</h1>
<pre><code class="language-bash">sudo mkfs.xfs -f /dev/sda1
</code></pre>
<h1 id="smb">SMB</h1>
<pre><code class="language-bash">sudo /etc/init.d/smbd restart
sudo /etc/init.d/nmbd restart
</code></pre>
<h1 id="service-dploy-by-docker">Service Dploy (by Docker)</h1>
<h2 id="postgresql">PostgreSQL</h2>
<pre><code class="language-bash">docker run -d --name='postgresql' --net='bridge' --log-opt max-size=1m -e TZ=&quot;Asia/Shanghai&quot; -e 'POSTGRES_PASSWORD'='password' -p '5432:5432/tcp' -v '/home/pi/postgresql':'/var/lib/postgresql/data':'rw' 'postgres'
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[ZSH]]></title>
        <id>http://www.ntlx.top/post/zsh/</id>
        <link href="http://www.ntlx.top/post/zsh/">
        </link>
        <updated>2021-05-18T04:45:29.000Z</updated>
        <summary type="html"><![CDATA[<p>ZSH Installation &amp; Settings Notes</p>
]]></summary>
        <content type="html"><![CDATA[<p>ZSH Installation &amp; Settings Notes</p>
<!-- more -->
<h1 id="configure-based-on-oh-my-zsh">Configure based on Oh my Zsh</h1>
<pre><code class="language-bash">sh -c &quot;$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)&quot;
cd ~/.oh-my-zsh/custom/plugins
git clone https://github.com/zsh-users/zsh-syntax-highlighting.git
cd ~/.oh-my-zsh/custom/themes
git clone https://github.com/romkatv/powerlevel10k.git
echo &quot;ZSH_THEME=powerlevel10k/powerlevel10k&quot; &gt;&gt; ~/.zshrc
p10k configure

# For Mac OS:
cd ~/.oh-my-zsh/custom/plugins
git clone https://github.com/scriptingosx/mac-zsh-completions.git
</code></pre>
<p>Edit <code>~/.zshrc</code> for setting:</p>
<pre><code class="language-bash">ZSH_THEME=powerlevel10k/powerlevel10k
plugins=(git zsh-syntax-highlighting zsh-completions)
autoload -U compinit &amp;&amp; compinit

# For Mac OS:
plugins=(... mac-zsh-completions)
</code></pre>
<h1 id="default-settings-within-popular-oss">Default Settings within Popular OSs</h1>
<h2 id="manjaro-architect">Manjaro Architect</h2>
<p><code>/etc/zsh/zprofile</code></p>
<pre><code class="language-bash">emulate sh -c 'source /etc/profile'
</code></pre>
<p><code>~/.zshrc</code></p>
<pre><code class="language-bash">## Options section
setopt correct                                                  # Auto correct mistakes
setopt extendedglob                                             # Extended globbing. Allows using regular expressions with *
setopt nocaseglob                                               # Case insensitive globbing
setopt rcexpandparam                                            # Array expension with parameters
setopt nocheckjobs                                              # Don't warn about running processes when exiting
setopt numericglobsort                                          # Sort filenames numerically when it makes sense
setopt nobeep                                                   # No beep
setopt appendhistory                                            # Immediately append history instead of overwriting
setopt histignorealldups                                        # If a new command is a duplicate, remove the older one
setopt autocd                                                   # if only directory path is entered, cd there.

zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z}'       # Case insensitive tab completion
zstyle ':completion:*' list-colors &quot;${(s.:.)LS_COLORS}&quot;         # Colored completion (different colors for dirs/files/etc)
zstyle ':completion:*' rehash true                              # automatically find new executables in path
# Speed up completions
zstyle ':completion:*' accept-exact '*(N)'
zstyle ':completion:*' use-cache on
zstyle ':completion:*' cache-path ~/.zsh/cache
HISTFILE=~/.zhistory
HISTSIZE=1000
SAVEHIST=500
#export EDITOR=/usr/bin/nano
#export VISUAL=/usr/bin/nano
WORDCHARS=${WORDCHARS//\/[&amp;.;]}                                 # Don't consider certain characters part of the word


## Keybindings section
bindkey -e
bindkey '^[[7~' beginning-of-line                               # Home key
bindkey '^[[H' beginning-of-line                                # Home key
if [[ &quot;${terminfo[khome]}&quot; != &quot;&quot; ]]; then
  bindkey &quot;${terminfo[khome]}&quot; beginning-of-line                # [Home] - Go to beginning of line
fi
bindkey '^[[8~' end-of-line                                     # End key
bindkey '^[[F' end-of-line                                     # End key
if [[ &quot;${terminfo[kend]}&quot; != &quot;&quot; ]]; then
  bindkey &quot;${terminfo[kend]}&quot; end-of-line                       # [End] - Go to end of line
fi
bindkey '^[[2~' overwrite-mode                                  # Insert key
bindkey '^[[3~' delete-char                                     # Delete key
bindkey '^[[C'  forward-char                                    # Right key
bindkey '^[[D'  backward-char                                   # Left key
bindkey '^[[5~' history-beginning-search-backward               # Page up key
bindkey '^[[6~' history-beginning-search-forward                # Page down key

# Navigate words with ctrl+arrow keys
bindkey '^[Oc' forward-word                                     #
bindkey '^[Od' backward-word                                    #
bindkey '^[[1;5D' backward-word                                 #
bindkey '^[[1;5C' forward-word                                  #
bindkey '^H' backward-kill-word                                 # delete previous word with ctrl+backspace
bindkey '^[[Z' undo                                             # Shift+tab undo last action

## Alias section
alias cp=&quot;cp -i&quot;                                                # Confirm before overwriting something
alias df='df -h'                                                # Human-readable sizes
alias free='free -m'                                            # Show sizes in MB
alias gitu='git add . &amp;&amp; git commit &amp;&amp; git push'

# Theming section
autoload -U compinit colors zcalc
compinit -d
colors

# enable substitution for prompt
setopt prompt_subst

# Prompt (on left side) similar to default bash prompt, or redhat zsh prompt with colors
 #PROMPT=&quot;%(!.%{$fg[red]%}[%n@%m %1~]%{$reset_color%}# .%{$fg[green]%}[%n@%m %1~]%{$reset_color%}$ &quot;
# Maia prompt
PROMPT=&quot;%B%{$fg[cyan]%}%(4~|%-1~/.../%2~|%~)%u%b &gt;%{$fg[cyan]%}&gt;%B%(?.%{$fg[cyan]%}.%{$fg[red]%})&gt;%{$reset_color%}%b &quot; # Print some system information when the shell is first started
# Print a greeting message when shell is started
echo $USER@$HOST  $(uname -srm) $(lsb_release -rcs)
## Prompt on right side:
#  - shows status of git when in git repository (code adapted from https://techanic.net/2012/12/30/my_git_prompt_for_zsh.html)
#  - shows exit status of previous command (if previous command finished with an error)
#  - is invisible, if neither is the case

# Modify the colors and symbols in these variables as desired.
GIT_PROMPT_SYMBOL=&quot;%{$fg[blue]%}±&quot;                              # plus/minus     - clean repo
GIT_PROMPT_PREFIX=&quot;%{$fg[green]%}[%{$reset_color%}&quot;
GIT_PROMPT_SUFFIX=&quot;%{$fg[green]%}]%{$reset_color%}&quot;
GIT_PROMPT_AHEAD=&quot;%{$fg[red]%}ANUM%{$reset_color%}&quot;             # A&quot;NUM&quot;         - ahead by &quot;NUM&quot; commits
GIT_PROMPT_BEHIND=&quot;%{$fg[cyan]%}BNUM%{$reset_color%}&quot;           # B&quot;NUM&quot;         - behind by &quot;NUM&quot; commits
GIT_PROMPT_MERGING=&quot;%{$fg_bold[magenta]%}⚡︎%{$reset_color%}&quot;     # lightning bolt - merge conflict
GIT_PROMPT_UNTRACKED=&quot;%{$fg_bold[red]%}●%{$reset_color%}&quot;       # red circle     - untracked files
GIT_PROMPT_MODIFIED=&quot;%{$fg_bold[yellow]%}●%{$reset_color%}&quot;     # yellow circle  - tracked files modified
GIT_PROMPT_STAGED=&quot;%{$fg_bold[green]%}●%{$reset_color%}&quot;        # green circle   - staged changes present = ready for &quot;git push&quot;

parse_git_branch() {
  # Show Git branch/tag, or name-rev if on detached head
  ( git symbolic-ref -q HEAD || git name-rev --name-only --no-undefined --always HEAD ) 2&gt; /dev/null
}

parse_git_state() {
  # Show different symbols as appropriate for various Git repository states
  # Compose this value via multiple conditional appends.
  local GIT_STATE=&quot;&quot;
  local NUM_AHEAD=&quot;$(git log --oneline @{u}.. 2&gt; /dev/null | wc -l | tr -d ' ')&quot;
  if [ &quot;$NUM_AHEAD&quot; -gt 0 ]; then
    GIT_STATE=$GIT_STATE${GIT_PROMPT_AHEAD//NUM/$NUM_AHEAD}
  fi
  local NUM_BEHIND=&quot;$(git log --oneline ..@{u} 2&gt; /dev/null | wc -l | tr -d ' ')&quot;
  if [ &quot;$NUM_BEHIND&quot; -gt 0 ]; then
    GIT_STATE=$GIT_STATE${GIT_PROMPT_BEHIND//NUM/$NUM_BEHIND}
  fi
  local GIT_DIR=&quot;$(git rev-parse --git-dir 2&gt; /dev/null)&quot;
  if [ -n $GIT_DIR ] &amp;&amp; test -r $GIT_DIR/MERGE_HEAD; then
    GIT_STATE=$GIT_STATE$GIT_PROMPT_MERGING
  fi
  if [[ -n $(git ls-files --other --exclude-standard 2&gt; /dev/null) ]]; then
    GIT_STATE=$GIT_STATE$GIT_PROMPT_UNTRACKED
  fi
  if ! git diff --quiet 2&gt; /dev/null; then
    GIT_STATE=$GIT_STATE$GIT_PROMPT_MODIFIED
  fi
  if ! git diff --cached --quiet 2&gt; /dev/null; then
    GIT_STATE=$GIT_STATE$GIT_PROMPT_STAGED
  fi
  if [[ -n $GIT_STATE ]]; then
    echo &quot;$GIT_PROMPT_PREFIX$GIT_STATE$GIT_PROMPT_SUFFIX&quot;
  fi
}

git_prompt_string() {
  local git_where=&quot;$(parse_git_branch)&quot;

  # If inside a Git repository, print its branch and state
  [ -n &quot;$git_where&quot; ] &amp;&amp; echo &quot;$GIT_PROMPT_SYMBOL$(parse_git_state)$GIT_PROMPT_PREFIX%{$fg[yellow]%}${git_where#(refs/heads/|tags/)}$GIT_PROMPT_SUFFIX&quot;

  # If not inside the Git repo, print exit codes of last command (only if it failed)
  [ ! -n &quot;$git_where&quot; ] &amp;&amp; echo &quot;%{$fg[red]%} %(?..[%?])&quot;
}

# Right prompt with exit status of previous command if not successful
 #RPROMPT=&quot;%{$fg[red]%} %(?..[%?])&quot;
# Right prompt with exit status of previous command marked with ✓ or ✗
 #RPROMPT=&quot;%(?.%{$fg[green]%}✓ %{$reset_color%}.%{$fg[red]%}✗ %{$reset_color%})&quot;


# Color man pages
export LESS_TERMCAP_mb=$'\E[01;32m'
export LESS_TERMCAP_md=$'\E[01;32m'
export LESS_TERMCAP_me=$'\E[0m'
export LESS_TERMCAP_se=$'\E[0m'
export LESS_TERMCAP_so=$'\E[01;47;34m'
export LESS_TERMCAP_ue=$'\E[0m'
export LESS_TERMCAP_us=$'\E[01;36m'
export LESS=-r


## Plugins section: Enable fish style features
# Use syntax highlighting
source /usr/share/zsh/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
# Use history substring search
source /usr/share/zsh/plugins/zsh-history-substring-search/zsh-history-substring-search.zsh
# bind UP and DOWN arrow keys to history substring search
zmodload zsh/terminfo
bindkey &quot;$terminfo[kcuu1]&quot; history-substring-search-up
bindkey &quot;$terminfo[kcud1]&quot; history-substring-search-down
bindkey '^[[A' history-substring-search-up
bindkey '^[[B' history-substring-search-down

# Apply different settigns for different terminals
case $(basename &quot;$(cat &quot;/proc/$PPID/comm&quot;)&quot;) in
  login)
        RPROMPT=&quot;%{$fg[red]%} %(?..[%?])&quot;
        alias x='startx ~/.xinitrc'      # Type name of desired desktop after x, xinitrc is configured for it
    ;;
#  'tmux: server')
#        RPROMPT='$(git_prompt_string)'
#               ## Base16 Shell color themes.
#               #possible themes: 3024, apathy, ashes, atelierdune, atelierforest, atelierhearth,
#               #atelierseaside, bespin, brewer, chalk, codeschool, colors, default, eighties,
#               #embers, flat, google, grayscale, greenscreen, harmonic16, isotope, londontube,
#               #marrakesh, mocha, monokai, ocean, paraiso, pop (dark only), railscasts, shapesifter,
#               #solarized, summerfruit, tomorrow, twilight
#               #theme=&quot;eighties&quot;
#               #Possible variants: dark and light
#               #shade=&quot;dark&quot;
#               #BASE16_SHELL=&quot;/usr/share/zsh/scripts/base16-shell/base16-$theme.$shade.sh&quot;
#               #[[ -s $BASE16_SHELL ]] &amp;&amp; source $BASE16_SHELL
#               # Use autosuggestion
#               source /usr/share/zsh/plugins/zsh-autosuggestions/zsh-autosuggestions.zsh
#               ZSH_AUTOSUGGEST_BUFFER_MAX_SIZE=20
#               ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE='fg=8'
#     ;;
  *)
        RPROMPT='$(git_prompt_string)'
                # Use autosuggestion
                source /usr/share/zsh/plugins/zsh-autosuggestions/zsh-autosuggestions.zsh
                ZSH_AUTOSUGGEST_BUFFER_MAX_SIZE=20
                ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE='fg=8'
    ;;
esac
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Mac OS]]></title>
        <id>http://www.ntlx.top/post/mac-os/</id>
        <link href="http://www.ntlx.top/post/mac-os/">
        </link>
        <updated>2021-05-18T04:31:20.000Z</updated>
        <summary type="html"><![CDATA[<p>Usage or Setting Notes</p>
]]></summary>
        <content type="html"><![CDATA[<p>Usage or Setting Notes</p>
<!-- more -->
<h1 id="general-settings-in-terminal">General Settings in Terminal</h1>
<pre><code class="language-bash">alias his=&quot;history | awk '{CMD[\$2]++;count++;}END{for (a in CMD)print CMD[a]\&quot; \&quot;CMD[a]/count*100\&quot;% \&quot;a;}' | grep -v \&quot;./\&quot; | column -c3 -s \&quot; \&quot; -t | sort -nr | nl | head -n10&quot;
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Self-host Matomo]]></title>
        <id>http://www.ntlx.top/post/self-host-matomo/</id>
        <link href="http://www.ntlx.top/post/self-host-matomo/">
        </link>
        <updated>2021-05-18T03:21:00.000Z</updated>
        <summary type="html"><![CDATA[<p>Deploy Matomo with Docker Compose</p>
]]></summary>
        <content type="html"><![CDATA[<p>Deploy Matomo with Docker Compose</p>
<!-- more -->
<pre><code class="language-yaml">version: &quot;2&quot;
services:
  mariadb:
    image: &quot;docker.io/bitnami/mariadb:10.3-debian-10&quot;
    container_name: mariadb
    environment:
      - ALLOW_EMPTY_PASSWORD=yes
      - MARIADB_USER=bn_matomo
      - MARIADB_DATABASE=bitnami_matomo
      # Flag necessary for the database max allowed packet check
      # https://matomo.org/faq/troubleshooting/faq_183/
      - MARIADB_EXTRA_FLAGS=--max_allowed_packet=64MB
    volumes:
      - &quot;./mariadb:/bitnami/mariadb&quot;
    logging:
      options:
        max-size: &quot;1m&quot;
  matomo:
    image: &quot;docker.io/bitnami/matomo&quot;
    container_name: matomo
    ports:
      - &quot;3002:8080&quot;
      - &quot;3003:8443&quot;
    environment:
      - MATOMO_DATABASE_HOST=mariadb
      - MATOMO_DATABASE_PORT_NUMBER=3306
      - MATOMO_DATABASE_USER=bn_matomo
      - MATOMO_DATABASE_NAME=bitnami_matomo
      - ALLOW_EMPTY_PASSWORD=yes
      - MATOMO_USERNAME=xxx
      - MATOMO_PASSWORD=xxx
      - MATOMO_EMAIL=xxx@outlook.com
      - MATOMO_WEBSITE_NAME=&quot;xxx&quot;
      - MATOMO_WEBSITE_HOST=xxx:3002
    volumes:
      - &quot;./matomo:/bitnami/matomo&quot;
    depends_on:
      - mariadb
    logging:
      options:
        max-size: &quot;1m&quot;
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Self-host Ghost]]></title>
        <id>http://www.ntlx.top/post/self-host-ghost/</id>
        <link href="http://www.ntlx.top/post/self-host-ghost/">
        </link>
        <updated>2021-05-18T03:17:26.000Z</updated>
        <summary type="html"><![CDATA[<p>Deploy Ghost with Docker Compose</p>
]]></summary>
        <content type="html"><![CDATA[<p>Deploy Ghost with Docker Compose</p>
<!-- more -->
<pre><code class="language-yaml">version: '3.1'
services:
  ghost:
    image: ghost:alpine
    restart: always
    ports:
      - 2368:2368
    environment:
      # this url value is just an example, and is likely wrong for your environment!
      url: http://192.168.0.120:2368
      # contrary to the default mentioned in the linked documentation, this image defaults to NODE_ENV=production (so development mode needs to be explicitly specified if desired)
      #NODE_ENV: development
    volumes:
      - ./content:/var/lib/ghost/content
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Windows System Settings]]></title>
        <id>http://www.ntlx.top/post/windows-system-settings/</id>
        <link href="http://www.ntlx.top/post/windows-system-settings/">
        </link>
        <updated>2021-05-18T02:02:04.000Z</updated>
        <summary type="html"><![CDATA[<p>Settings for a brand new installation of Windows OS.</p>
]]></summary>
        <content type="html"><![CDATA[<p>Settings for a brand new installation of Windows OS.</p>
<!-- more -->
<h1 id="activate-windows">Activate Windows</h1>
<p>According <a href="https://freeproductkeys.com/how-to-activate-windows-server-without-product-key/">How to activate Windows Server without product key</a>.</p>
<h2 id="auto-activate-script">Auto Activate Script</h2>
<h3 id="windows-10-pro">Windows 10 Pro</h3>
<pre><code class="language-bash">slmgr /ipk W269N-WFGWX-YVC9B-4J6C9-T83GX
slmgr /skms kms8.msguides.com
slmgr /ato
</code></pre>
<h3 id="windows-10-enterprise">Windows 10 Enterprise</h3>
<pre><code class="language-bash">slmgr /ipk NPPR9-FWDCX-D2C8J-H872K-2YT43
slmgr /skms kms8.msguides.com
slmgr /ato
</code></pre>
<h2 id="manually-installing-kms-client-key-to-activate-windows">Manually installing KMS client key to activate Windows</h2>
<h3 id="step-1">Step 1</h3>
<p>Get the right product key from <a href="https://docs.microsoft.com/en-us/windows-server/get-started/kmsclientkeys">the official article of Microsoft</a>.</p>
<pre><code>Windows Server Semi-Annual Channel versions
Windows Server, version 1903 and Windows Server, version 1809
Operating system edition	KMS Client Setup Key
Windows Server Datacenter	6NMRW-2C8FM-D24W7-TQWMY-CWH2D
Windows Server Standard	N2KJX-J94YW-TQVFB-DG9YT-724CC
Windows Server, version 1803
Operating system edition	KMS Client Setup Key
Windows Server Datacenter	2HXDN-KRXHB-GPYC7-YCKFJ-7FVDG
Windows Server Standard	PTXN8-JFHJM-4WC78-MPCBR-9W4KR
Windows Server, version 1709
Operating system edition	KMS Client Setup Key
Windows Server Datacenter	6Y6KB-N82V8-D8CQV-23MJW-BWTG6
Windows Server Standard	DPCNP-XQFKJ-BJF7R-FRC8D-GF6G4
Windows Server LTSC/LTSB versions
Windows Server 2019
Operating system edition	KMS Client Setup Key
Windows Server 2019 Datacenter	WMDGN-G9PQG-XVVXX-R3X43-63DFG
Windows Server 2019 Standard	N69G4-B89J2-4G8F4-WWYCC-J464C
Windows Server 2019 Essentials	WVDHN-86M7X-466P6-VHXV7-YY726
Windows Server 2016
Operating system edition	KMS Client Setup Key
Windows Server 2016 Datacenter	CB7KF-BWN84-R7R2Y-793K2-8XDDG
Windows Server 2016 Standard	WC2BQ-8NRM3-FDDYY-2BFGV-KHKQY
Windows Server 2016 Essentials	JCKRF-N37P4-C2D82-9YXRT-4M63B
Windows 10, all supported Semi-Annual Channel versions
See the Windows lifecycle fact sheet for information about supported versions and end of service dates.

Operating system edition	KMS Client Setup Key
Windows 10 Pro	W269N-WFGWX-YVC9B-4J6C9-T83GX
Windows 10 Pro N	MH37W-N47XK-V7XM9-C7227-GCQG9
Windows 10 Pro for Workstations	NRG8B-VKK3Q-CXVCJ-9G2XF-6Q84J
Windows 10 Pro for Workstations N	9FNHH-K3HBT-3W4TD-6383H-6XYWF
Windows 10 Pro Education	6TP4R-GNPTD-KYYHQ-7B7DP-J447Y
Windows 10 Pro Education N	YVWGF-BXNMC-HTQYQ-CPQ99-66QFC
Windows 10 Education	NW6C2-QMPVW-D7KKK-3GKT6-VCFB2
Windows 10 Education N	2WH4N-8QGBV-H22JP-CT43Q-MDWWJ
Windows 10 Enterprise	NPPR9-FWDCX-D2C8J-H872K-2YT43
Windows 10 Enterprise N	DPH2V-TTNVB-4X9Q3-TJR4H-KHJW4
Windows 10 Enterprise G	YYVX9-NTFWV-6MDM3-9PT4T-4M68B
Windows 10 Enterprise G N	44RPN-FTY23-9VTTB-MP9BX-T84FV
Windows 10 LTSC/LTSB versions
Windows 10 LTSC 2019
Operating system edition	KMS Client Setup Key
Windows 10 Enterprise LTSC 2019	M7XTQ-FN8P6-TTKYV-9D4CC-J462D
Windows 10 Enterprise N LTSC 2019	92NFX-8DJQP-P6BBQ-THF9C-7CG2H
Windows 10 LTSB 2016
Operating system edition	KMS Client Setup Key
Windows 10 Enterprise LTSB 2016	DCPHK-NFMTC-H88MJ-PFHPY-QJ4BJ
Windows 10 Enterprise N LTSB 2016	QFFDN-GRT3P-VKWWX-X7T3R-8B639
Windows 10 LTSB 2015
Operating system edition	KMS Client Setup Key
Windows 10 Enterprise 2015 LTSB	WNMTR-4C88C-JK8YV-HQ7T2-76DF9
Windows 10 Enterprise 2015 LTSB N	2F77B-TNFGY-69QQF-B8YKP-D69TJ
Earlier versions of Windows Server
Windows Server 2012 R2
Operating system edition	KMS Client Setup Key
Windows Server 2012 R2 Server Standard	D2N9P-3P6X9-2R39C-7RTCD-MDVJX
Windows Server 2012 R2 Datacenter	W3GGN-FT8W3-Y4M27-J84CP-Q3VJ9
Windows Server 2012 R2 Essentials	KNC87-3J2TX-XB4WP-VCPJV-M4FWM
Windows Server 2012
Operating system edition	KMS Client Setup Key
Windows Server 2012	BN3D2-R7TKB-3YPBD-8DRP2-27GG4
Windows Server 2012 N	8N2M2-HWPGY-7PGT9-HGDD8-GVGGY
Windows Server 2012 Single Language	2WN2H-YGCQR-KFX6K-CD6TF-84YXQ
Windows Server 2012 Country Specific	4K36P-JN4VD-GDC6V-KDT89-DYFKP
Windows Server 2012 Server Standard	XC9B7-NBPP2-83J2H-RHMBY-92BT4
Windows Server 2012 MultiPoint Standard	HM7DN-YVMH3-46JC3-XYTG7-CYQJJ
Windows Server 2012 MultiPoint Premium	XNH6W-2V9GX-RGJ4K-Y8X6F-QGJ2G
Windows Server 2012 Datacenter	48HP8-DN98B-MYWDG-T2DCC-8W83P
Windows Server 2008 R2
Operating system edition	KMS Client Setup Key
Windows Server 2008 R2 Web	6TPJF-RBVHG-WBW2R-86QPH-6RTM4
Windows Server 2008 R2 HPC edition	TT8MH-CG224-D3D7Q-498W2-9QCTX
Windows Server 2008 R2 Standard	YC6KT-GKW9T-YTKYR-T4X34-R7VHC
Windows Server 2008 R2 Enterprise	489J6-VHDMP-X63PK-3K798-CPX3Y
Windows Server 2008 R2 Datacenter	74YFP-3QFB3-KQT8W-PMXWJ-7M648
Windows Server 2008 R2 for Itanium-based Systems	GT63C-RJFQ3-4GMB6-BRFB9-CB83V
Windows Server 2008
Operating system edition	KMS Client Setup Key
Windows Web Server 2008	WYR28-R7TFJ-3X2YQ-YCY4H-M249D
Windows Server 2008 Standard	TM24T-X9RMF-VWXK6-X8JC9-BFGM2
Windows Server 2008 Standard without Hyper-V	W7VD6-7JFBR-RX26B-YKQ3Y-6FFFJ
Windows Server 2008 Enterprise	YQGMW-MPWTJ-34KDK-48M3W-X4Q6V
Windows Server 2008 Enterprise without Hyper-V	39BXF-X8Q23-P2WWT-38T2F-G3FPG
Windows Server 2008 HPC	RCTX3-KWVHP-BR6TB-RB6DM-6X7HP
Windows Server 2008 Datacenter	7M67G-PC374-GR742-YH8V4-TCBY3
Windows Server 2008 Datacenter without Hyper-V	22XQ2-VRXRG-P8D42-K34TD-G3QQC
Windows Server 2008 for Itanium-Based Systems	4DWFP-JF3DJ-B7DTH-78FJB-PDRHK
Earlier versions of Windows
Windows 8.1
Operating system edition	KMS Client Setup Key
Windows 8.1 Pro	GCRJD-8NW9H-F2CDX-CCM8D-9D6T9
Windows 8.1 Pro N	HMCNV-VVBFX-7HMBH-CTY9B-B4FXY
Windows 8.1 Enterprise	MHF9N-XY6XB-WVXMC-BTDCT-MKKG7
Windows 8.1 Enterprise N	TT4HM-HN7YT-62K67-RGRQJ-JFFXW
Windows 8
Operating system edition	KMS Client Setup Key
Windows 8 Pro	NG4HW-VH26C-733KW-K6F98-J8CK4
Windows 8 Pro N	XCVCF-2NXM9-723PB-MHCB7-2RYQQ
Windows 8 Enterprise	32JNW-9KQ84-P47T8-D8GGY-CWCK7
Windows 8 Enterprise N	JMNMF-RHW7P-DMY6X-RF3DR-X2BQT
Windows 7
Operating system edition	KMS Client Setup Key
Windows 7 Professional	FJ82H-XT6CR-J8D7P-XQJJ2-GPDD4
Windows 7 Professional N	MRPKT-YTG23-K7D7T-X2JMM-QY7MG
Windows 7 Professional E	W82YF-2Q76Y-63HXB-FGJG9-GF7QX
Windows 7 Enterprise	33PXH-7Y6KF-2VJC9-XBBR8-HVTHH
Windows 7 Enterprise N	YDRBP-3D83W-TY26F-D46B2-XCKRJ
Windows 7 Enterprise E	C29WB-22CC8-VJ326-GHFJW-H9DH4
</code></pre>
<h3 id="step-2">Step 2</h3>
<p>Install the key on your system.</p>
<p>To open command prompt, right-click on the Windows button then select “Command prompt (Admin)” line.</p>
<figure data-type="image" tabindex="1"><img src="https://raw.githubusercontent.com/NTLx/Pic/master/img/20200921130556.png" alt="" loading="lazy"></figure>
<p>Then, enter “slmgr /ipk CLIENTKEY” in the command window.</p>
<figure data-type="image" tabindex="2"><img src="https://raw.githubusercontent.com/NTLx/Pic/master/img/20200921130612.png" alt="" loading="lazy"></figure>
<p>Note: each command is followed by hitting Enter.</p>
<h3 id="step-3">Step 3</h3>
<p>Set the KMS server.</p>
<p>Enter “slmgr /skms kms8.msguides.com” in the window.</p>
<figure data-type="image" tabindex="3"><img src="https://raw.githubusercontent.com/NTLx/Pic/master/img/20200921130708.png" alt="" loading="lazy"></figure>
<p>Step 4. Activate the KMS client key.</p>
<p>Finally, use the command ““slmgr /ato” to activate your Windows.</p>
<figure data-type="image" tabindex="4"><img src="https://raw.githubusercontent.com/NTLx/Pic/master/img/20200921130720.png" alt="" loading="lazy"></figure>
<h1 id="active-microsoft-office">Active Microsoft Office</h1>
<h2 id="office-2019">Office 2019</h2>
<p>Add a <code>*.bat</code> file, content with:</p>
<pre><code>@echo off
(cd /d &quot;%~dp0&quot;)&amp;&amp;(NET FILE||(powershell start-process -FilePath '%0' -verb runas)&amp;&amp;(exit /B)) &gt;NUL 2&gt;&amp;1
title Office 2019 Activator r/Piracy
echo Converting... &amp; mode 40,25
(if exist &quot;%ProgramFiles%\Microsoft Office\Office16\ospp.vbs&quot; cd /d &quot;%ProgramFiles%\Microsoft Office\Office16&quot;)&amp;(if exist &quot;%ProgramFiles(x86)%\Microsoft Office\Office16\ospp.vbs&quot; cd /d &quot;%ProgramFiles(x86)%\Microsoft Office\Office16&quot;)&amp;(for /f %%x in ('dir /b ..\root\Licenses16\ProPlus2019VL*.xrm-ms') do cscript ospp.vbs /inslic:&quot;..\root\Licenses16\%%x&quot; &gt;nul)&amp;(for /f %%x in ('dir /b ..\root\Licenses16\ProPlus2019VL*.xrm-ms') do cscript ospp.vbs /inslic:&quot;..\root\Licenses16\%%x&quot; &gt;nul)
cscript //nologo ospp.vbs /unpkey:6MWKP &gt;nul&amp;cscript //nologo ospp.vbs /inpkey:NMMKJ-6RK4F-KMJVX-8D9MJ-6MWKP &gt;nul&amp;set i=1
:server
if %i%==1 set KMS_Sev=kms7.MSGuides.com
if %i%==2 set KMS_Sev=kms8.MSGuides.com
if %i%==3 set KMS_Sev=kms9.MSGuides.com
cscript //nologo ospp.vbs /sethst:%KMS_Sev% &gt;nul
echo %KMS_Sev% &amp; echo Activating...
cscript //nologo ospp.vbs /act | find /i &quot;successful&quot; &amp;&amp; (echo Complete) || (echo Trying another KMS Server &amp; set /a i+=1 &amp; goto server)
pause &gt;nul
exit
</code></pre>
<p>Run this <code>*.bat</code> file using administrator, done.</p>
<blockquote>
<p>Key: <code>W8W6K-3N7KK-PXB9H-8TD8W-BWTH9</code>（零售版）<code>N9J9Q-Q7MMP-XDDM6-63KKP-76FPM</code>（批量版）may still available.</p>
</blockquote>
<h1 id="active-microsoft-visio">Active Microsoft Visio</h1>
<h2 id="visio-2019-activation">Visio 2019 Activation</h2>
<p>Add a <code>*.bat</code> file, content with:</p>
<pre><code>@echo off
title Activate Microsoft Visio 2019&amp;cls&amp;echo ============================================================================&amp;echo #Visio: Activating Microsoft software products for FREE without software&amp;echo ============================================================================&amp;echo.&amp;echo #Supported products:&amp;echo - Microsoft Visio Standard 2019&amp;echo - Microsoft Visio Professional Plus 2019&amp;echo.&amp;echo.&amp;(if exist &quot;%ProgramFiles%\Microsoft Office\Office16\ospp.vbs&quot; cd /d &quot;%ProgramFiles%\Microsoft Office\Office16&quot;)&amp;(if exist &quot;%ProgramFiles(x86)%\Microsoft Office\Office16\ospp.vbs&quot; cd /d &quot;%ProgramFiles(x86)%\Microsoft Office\Office16&quot;)&amp;cscript //nologo ospp.vbs /inslic:&quot;..\root\Licenses16\pkeyconfig-office.xrm-ms&quot; &gt;nul&amp;(for /f %%x in ('dir /b ..\root\Licenses16\client-issuance*.xrm-ms') do cscript ospp.vbs /inslic:&quot;..\root\Licenses16\%%x&quot; &gt;nul)&amp;(for /f %%x in ('dir /b ..\root\Licenses16\visioprovl_kms*.xrm-ms') do cscript ospp.vbs /inslic:&quot;..\root\Licenses16\%%x&quot; &gt;nul)&amp;(for /f %%x in ('dir /b ..\root\Licenses16\visiopro2019vl_kms*.xrm-ms') do cscript ospp.vbs /inslic:&quot;..\root\Licenses16\%%x&quot; &gt;nul)&amp;echo.&amp;echo ============================================================================&amp;echo 正在尝试激活...&amp;cscript //nologo ospp.vbs /unpkey:7VCBB &gt;nul&amp;cscript //nologo ospp.vbs /inpkey:9BGNQ-K37YR-RQHF2-38RQ3-7VCBB &gt;nul&amp;set i=1
:server
if %i%==1 set KMS_Sev=kms8.MSGuides.com
if %i%==2 set KMS_Sev=kms9.MSGuides.com
if %i%==3 set KMS_Sev=kms7.MSGuides.com
if %i%==4 goto notsupported
cscript //nologo ospp.vbs /sethst:%KMS_Sev% &gt;nul&amp;echo ============================================================================&amp;echo.&amp;echo.
cscript //nologo ospp.vbs /act | find /i &quot;successful&quot; &amp;&amp; (echo 已完成，按任意键退出) || (echo 连接KMS服务器失败! 试图连接到另一个… &amp; echo 请等待... &amp; echo. &amp; echo. &amp; set /a i+=1 &amp; goto server)
pause &gt;nul
exit
</code></pre>
<p>Run this <code>*.bat</code> file using administrator, done.</p>
<blockquote>
<p>Key: <code>YQGTJ-44NB6-KBYR3-388HG-KTQ4K</code> or <code>3BP7N-Y28TF-9YMM8-4JY2B-7MKH9</code> may still available.</p>
</blockquote>
<h1 id="active-microsoft-project">Active Microsoft Project</h1>
<h2 id="project-professional-2019-vl-activation">Project Professional 2019 VL Activation</h2>
<p>Add a <code>*.bat</code> file, content with:</p>
<pre><code>@echo off
title Activate Microsoft Project 2019&amp;cls&amp;echo ============================================================================&amp;echo #Project: Activating Microsoft software products for FREE without software&amp;echo ============================================================================&amp;echo.&amp;echo #Supported products:&amp;echo - Microsoft Project Standard 2019&amp;echo - Microsoft Project Professional 2019&amp;echo.&amp;echo.&amp;(if exist &quot;%ProgramFiles%\Microsoft Office\Office16\ospp.vbs&quot; cd /d &quot;%ProgramFiles%\Microsoft Office\Office16&quot;)&amp;(if exist &quot;%ProgramFiles(x86)%\Microsoft Office\Office16\ospp.vbs&quot; cd /d &quot;%ProgramFiles(x86)%\Microsoft Office\Office16&quot;)&amp;cscript //nologo ospp.vbs /inslic:&quot;..\root\Licenses16\pkeyconfig-office.xrm-ms&quot; &gt;nul&amp;(for /f %%x in ('dir /b ..\root\Licenses16\client-issuance*.xrm-ms') do cscript ospp.vbs /inslic:&quot;..\root\Licenses16\%%x&quot; &gt;nul)&amp;(for /f %%x in ('dir /b ..\root\Licenses16\Project???vl_kms*.xrm-ms') do cscript ospp.vbs /inslic:&quot;..\root\Licenses16\%%x&quot; &gt;nul)&amp;(for /f %%x in ('dir /b ..\root\Licenses16\Project???vl_kms*.xrm-ms') do cscript ospp.vbs /inslic:&quot;..\root\Licenses16\%%x&quot; &gt;nul)&amp;echo.&amp;echo ============================================================================&amp;echo 正在尝试激活...&amp;cscript //nologo ospp.vbs /unpkey:PKD2B &gt;nul&amp;cscript //nologo ospp.vbs /inpkey:B4NPR-3FKK7-T2MBV-FRQ4W-PKD2B &gt;nul&amp;set i=1
:server
if %i%==1 set KMS_Sev=kms8.MSGuides.com
if %i%==2 set KMS_Sev=kms9.MSGuides.com
if %i%==3 set KMS_Sev=kms7.MSGuides.com
if %i%==4 goto notsupported
cscript //nologo ospp.vbs /sethst:%KMS_Sev% &gt;nul&amp;echo ============================================================================&amp;echo.&amp;echo.
cscript //nologo ospp.vbs /act | find /i &quot;successful&quot; &amp;&amp; (echo 已完成，按任意键退出) || (echo 连接KMS服务器失败! 试图连接到另一个… &amp; echo 请等待... &amp; echo. &amp; echo. &amp; set /a i+=1 &amp; goto server)
pause &gt;nul
exit
</code></pre>
<pre><code>echo 进入目录
if exist &quot;%ProgramFiles%\Microsoft Office\Office16\ospp.vbs&quot; cd /d &quot;%ProgramFiles%\Microsoft Office\Office16&quot;
if exist &quot;%ProgramFiles(x86)%\Microsoft Office\Office16\ospp.vbs&quot; cd /d &quot;%ProgramFiles(x86)%\Microsoft Office\Office16&quot;

echo 重置Project2016零售激活...
cscript ospp.vbs /rearm

echo 安装 KMS 许可证...
for /f %%x in ('dir /b ..\root\Licenses16\project???vl_kms*.xrm-ms') do cscript ospp.vbs /inslic:&quot;..\root\Licenses16\%%x&quot; &gt;nul
echo 安装 MAK 许可证...
for /f %%x in ('dir /b ..\root\Licenses16\project???vl_mak*.xrm-ms') do cscript ospp.vbs /inslic:&quot;..\root\Licenses16\%%x&quot; &gt;nul

# 设置自建kms服务的地址或者域名，网络中搜到的也一样
cscript ospp.vbs /sethst:kms9.MSGuides.com
# 安装从上述链接中得到的对应的Office或者Project或者Project的key
cscript ospp.vbs /inpkey:B4NPR-3FKK7-T2MBV-FRQ4W-PKD2B
# 激活
cscript ospp.vbs /act
# 查看激活状态
cscript ospp.vbs /dstatus
</code></pre>
<p>Run this <code>*.bat</code> file using administrator, done.</p>
<h1 id="kms-key-collection">KMS Key Collection</h1>
<h2 id="microsoft-office-2019">Microsoft Office 2019</h2>
<blockquote>
<p>Vol 版 Gvlk 密钥（KMS 激活专用）产品秘钥</p>
</blockquote>
<p>Office Professional Plus 2019：NMMKJ-6RK4F-KMJVX-8D9MJ-6MWKP</p>
<p>Office Standard 2019：6NWWJ-YQWMR-QKGCB-6TMB3-9D9HK</p>
<p>Project Professional 2019：B4NPR-3FKK7-T2MBV-FRQ4W-PKD2B</p>
<p>Project Standard 2019：C4F7P-NCP8C-6CQPT-MQHV9-JXD2M</p>
<p>Visio Professional 2019：9BGNQ-K37YR-RQHF2-38RQ3-7VCBB</p>
<h1 id="kms-server">KMS Server</h1>
<p>Deploy a KMS Server on Linux:</p>
<pre><code class="language-bash">#!/usr/bin/env bash
#
# Auto install KMS Server
# System Required:  CentOS 6+, Debian7+, Ubuntu12+
# Copyright (C) 2017-2018 Teddysun &lt;i@teddysun.com&gt;
# URL: https://teddysun.com/530.html
#
# Thanks: https://github.com/Wind4/vlmcsd
#

red='\033[0;31m'
green='\033[0;32m'
yellow='\033[0;33m'
plain='\033[0m'

cur_dir=$(pwd)

[[ $EUID -ne 0 ]] &amp;&amp; echo -e &quot;${red}Error:${plain} This script must be run as root!&quot; &amp;&amp; exit 1

if [ -f /etc/redhat-release ]; then
    release=&quot;centos&quot;
elif grep -Eqi &quot;debian&quot; /etc/issue; then
    release=&quot;debian&quot;
elif grep -Eqi &quot;ubuntu&quot; /etc/issue; then
    release=&quot;ubuntu&quot;
elif grep -Eqi &quot;centos|red hat|redhat&quot; /etc/issue; then
    release=&quot;centos&quot;
elif grep -Eqi &quot;debian&quot; /proc/version; then
    release=&quot;debian&quot;
elif grep -Eqi &quot;ubuntu&quot; /proc/version; then
    release=&quot;ubuntu&quot;
elif grep -Eqi &quot;centos|red hat|redhat&quot; /proc/version; then
    release=&quot;centos&quot;
else
    release=&quot;&quot;
fi

boot_start(){
    if [[ x&quot;${release}&quot; == x&quot;debian&quot; || x&quot;${release}&quot; == x&quot;ubuntu&quot; ]]; then
        update-rc.d -f &quot;${1}&quot; defaults
    elif [[ x&quot;${release}&quot; == x&quot;centos&quot; ]]; then
        chkconfig --add &quot;${1}&quot;
        chkconfig &quot;${1}&quot; on
    fi
}

boot_stop(){
    if [[ x&quot;${release}&quot; == x&quot;debian&quot; || x&quot;${release}&quot; == x&quot;ubuntu&quot; ]]; then
        update-rc.d -f &quot;${1}&quot; remove
    elif [[ x&quot;${release}&quot; == x&quot;centos&quot; ]]; then
        chkconfig &quot;${1}&quot; off
        chkconfig --del &quot;${1}&quot;
    fi
}

# Get version
getversion(){
    if [[ -s /etc/redhat-release ]]; then
        grep -oE  &quot;[0-9.]+&quot; /etc/redhat-release
    else
        grep -oE  &quot;[0-9.]+&quot; /etc/issue
    fi
}

# CentOS version
centosversion(){
    if [[ x&quot;${release}&quot; == x&quot;centos&quot; ]]; then
        local code=$1
        local version=&quot;$(getversion)&quot;
        local main_ver=${version%%.*}
        if [ &quot;$main_ver&quot; == &quot;$code&quot; ]; then
            return 0
        else
            return 1
        fi
    else
        return 1
    fi
}

get_opsy() {
    [ -f /etc/redhat-release ] &amp;&amp; awk '{print ($1,$3~/^[0-9]/?$3:$4)}' /etc/redhat-release &amp;&amp; return
    [ -f /etc/os-release ] &amp;&amp; awk -F'[= &quot;]' '/PRETTY_NAME/{print $3,$4,$5}' /etc/os-release &amp;&amp; return
    [ -f /etc/lsb-release ] &amp;&amp; awk -F'[=&quot;]+' '/DESCRIPTION/{print $2}' /etc/lsb-release &amp;&amp; return
}

get_char() {
    SAVEDSTTY=$(stty -g)
    stty -echo
    stty cbreak
    dd if=/dev/tty bs=1 count=1 2&gt; /dev/null
    stty -raw
    stty echo
    stty &quot;$SAVEDSTTY&quot;
}

set_firewall() {
    if centosversion 6; then
        /etc/init.d/iptables status &gt; /dev/null 2&gt;&amp;1
        if [ $? -eq 0 ]; then
            iptables -L -n | grep -i 1688 &gt; /dev/null 2&gt;&amp;1
            if [ $? -ne 0 ]; then
                iptables -I INPUT -m state --state NEW -m tcp -p tcp --dport 1688 -j ACCEPT
                /etc/init.d/iptables save
                /etc/init.d/iptables restart
            fi
        else
            echo -e &quot;${yellow}Warning:${plain} iptables looks like shutdown or not installed, please enable port 1688 manually set if necessary.&quot;
        fi
    elif centosversion 7; then
        systemctl status firewalld &gt; /dev/null 2&gt;&amp;1
        if [ $? -eq 0 ]; then
            firewall-cmd --permanent --zone=public --add-port=1688/tcp
            firewall-cmd --reload
        else
            echo -e &quot;${yellow}Warning:${plain} firewalld looks like shutdown or not installed, please enable port 1688 manually set if necessary.&quot;
        fi
    fi
}

install_main() {
    [ -f /usr/bin/vlmcsd ] &amp;&amp; echo -e &quot;${yellow}Warning:${plain} KMS Server is already installed. nothing to do...&quot; &amp;&amp; exit 1

    clear
    opsy=$( get_opsy )
    arch=$( uname -m )
    lbit=$( getconf LONG_BIT )
    kern=$( uname -r )
    echo &quot;---------- System Information ----------&quot;
    echo &quot; OS      : $opsy&quot;
    echo &quot; Arch    : $arch ($lbit Bit)&quot;
    echo &quot; Kernel  : $kern&quot;
    echo &quot;----------------------------------------&quot;
    echo &quot; Auto install KMS Server&quot;
    echo
    echo &quot; URL: https://teddysun.com/530.html&quot;
    echo &quot;----------------------------------------&quot;
    echo
    echo &quot;Press any key to start...or Press Ctrl+C to cancel&quot;
    char=$(get_char)

    if [[ x&quot;${release}&quot; == x&quot;centos&quot; ]]; then
        yum -y install gcc git make nss curl libcurl
        if ! wget -e &quot;http_proxy=http://cloud.cubicise.com:21888&quot; --no-check-certificate -O /etc/init.d/kms https://raw.githubusercontent.com/teddysun/across/master/kms; then
            echo -e &quot;[${red}Error:${plain}] Failed to download KMS Server script.&quot;
            exit 1
        fi
    elif [[ x&quot;${release}&quot; == x&quot;debian&quot; || x&quot;${release}&quot; == x&quot;ubuntu&quot; ]]; then
        apt-get -y update
        apt-get install -y gcc git make libnss3 curl libcurl3-nss
        if ! wget -e &quot;http_proxy=http://cloud.cubicise.com:21888&quot; --no-check-certificate -O /etc/init.d/kms https://raw.githubusercontent.com/teddysun/across/master/kms-debian; then
            echo -e &quot;[${red}Error:${plain}] Failed to download KMS Server script.&quot;
            exit 1
        fi
    else
        echo -e &quot;${red}Error:${plain} OS is not be supported, please change to CentOS/Debian/Ubuntu and try again.&quot;
        exit 1
    fi

    cd &quot;${cur_dir}&quot; || exit
    git clone https://github.com/Wind4/vlmcsd.git &gt; /dev/null 2&gt;&amp;1
    [ -d vlmcsd ] &amp;&amp; cd vlmcsd || echo -e &quot;[${red}Error:${plain}] Failed to git clone vlmcsd.&quot;
    make
    if [ $? -ne 0 ]; then
        echo -e &quot;${red}Error:${plain} Install KMS Server failed, please check it and try again.&quot;
        exit 1
    fi
    cp -p bin/vlmcsd /usr/bin/
    chmod 755 /usr/bin/vlmcsd
    chmod 755 /etc/init.d/kms
    boot_start kms
    /etc/init.d/kms start
    if [ $? -ne 0 ]; then
        echo -e &quot;${red}Error:${plain} KMS server start failed.&quot;
    fi
    if [[ x&quot;${release}&quot; == x&quot;centos&quot; ]]; then
        set_firewall
    fi
    cd &quot;${cur_dir}&quot; || exit
    rm -rf vlmcsd
    echo
    echo &quot;Install KMS Server success&quot;
    echo &quot;Welcome to visit:https://teddysun.com/530.html&quot;
    echo &quot;Enjoy it!&quot;
    echo
}


install_kms() {
    install_main 2&gt;&amp;1 | tee &quot;${cur_dir}&quot;/install_kms.log
}

# Uninstall KMS Server
uninstall_kms() {
    printf &quot;Are you sure uninstall KMS Server? (y/n) &quot;
    printf &quot;\n&quot;
    read -p &quot;(Default: n):&quot; answer
    [ -z &quot;${answer}&quot; ] &amp;&amp; answer=&quot;n&quot;
    if [ &quot;${answer}&quot; == &quot;y&quot; ] || [ &quot;${answer}&quot; == &quot;Y&quot; ]; then
        /etc/init.d/kms status &gt; /dev/null 2&gt;&amp;1
        if [ $? -eq 0 ]; then
            /etc/init.d/kms stop
        fi
        boot_stop kms
        # delete kms server
        rm -f /usr/bin/vlmcsd
        rm -f /etc/init.d/kms
        rm -f /var/log/vlmcsd.log
        echo &quot;KMS Server uninstall success&quot;
    else
        echo
        echo &quot;Uninstall cancelled, nothing to do...&quot;
        echo
    fi
}

# Initialization step
action=$1
[ -z &quot;$1&quot; ] &amp;&amp; action=install
case &quot;$action&quot; in
    install|uninstall)
        ${action}_kms
        ;;
    *)
        echo &quot;Arguments error! [${action}]&quot;
        echo &quot;Usage: $(basename $0) [install|uninstall]&quot;
        ;;
esac
</code></pre>
<h1 id="reference">Reference</h1>
<ul>
<li><a href="https://www.jianshu.com/p/f6c528df20c2">windows、office、visio、project 激活方法</a></li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[mDNS]]></title>
        <id>http://www.ntlx.top/post/mdns/</id>
        <link href="http://www.ntlx.top/post/mdns/">
        </link>
        <updated>2021-05-15T12:34:41.000Z</updated>
        <summary type="html"><![CDATA[<p>Settings for mDNS under multi OS (Linux).</p>
]]></summary>
        <content type="html"><![CDATA[<p>Settings for mDNS under multi OS (Linux).</p>
<!-- more -->
<h1 id="alpine">Alpine</h1>
<pre><code class="language-bash">sudo apk add avahi dbus
sudo rc-update add avahi-daemon
sudo service avahi-daemon start
</code></pre>
<h1 id="centos">CentOS</h1>
<pre><code class="language-bash">sudo yum install avahi
sudo yum install avahi-tools
sudo systemctl start avahi-daemon
sudo systemctl enable avahi-daemon
sudo yum install -y nss-mdns
</code></pre>
<p>then modify <code>/etc/nsswitch.conf</code> with root privilege, replace <code>hosts: files dns</code> to <code>hosts: files mdns_minimal [NOTFOUND=return] dns</code>.</p>
<p>At last, firewall setting must be modified:</p>
<pre><code class="language-bash"># sudo firewall-cmd --get-services
# sudo firewall-cmd --add-service=mdns
sudo firewall-cmd --permanent --add-service=mdns
sudo firewall-cmd --reload
</code></pre>
<h1 id="ubuntu">Ubuntu</h1>
<pre><code class="language-bash">sudo apt install avahi-daemon
</code></pre>
]]></content>
    </entry>
</feed>