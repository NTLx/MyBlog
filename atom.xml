<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://www.ntlx.top</id>
    <title>NTLx&apos;s Blog</title>
    <updated>2021-10-28T05:43:36.678Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="http://www.ntlx.top"/>
    <link rel="self" href="http://www.ntlx.top/atom.xml"/>
    <subtitle>My Tech Notes &amp; Thoughts</subtitle>
    <logo>http://www.ntlx.top/images/avatar.png</logo>
    <icon>http://www.ntlx.top/favicon.ico</icon>
    <rights>All rights reserved 2021, NTLx&apos;s Blog</rights>
    <entry>
        <title type="html"><![CDATA[KMS Server]]></title>
        <id>http://www.ntlx.top/post/kms-server/</id>
        <link href="http://www.ntlx.top/post/kms-server/">
        </link>
        <updated>2021-10-27T13:04:09.000Z</updated>
        <summary type="html"><![CDATA[<p>Deploy KMS Server through Docker.</p>
]]></summary>
        <content type="html"><![CDATA[<p>Deploy KMS Server through Docker.</p>
<!-- more -->
<ol>
<li>get code:</li>
</ol>
<pre><code class="language-shell">git clone https://github.com/Wind4/vlmcsd-docker.git vlmcsd
cd vlmcsd
</code></pre>
<ol start="2">
<li>use docker compose:</li>
</ol>
<pre><code class="language-shell">docker-compose up -d
</code></pre>
<ol start="3">
<li>or build on local server:</li>
</ol>
<pre><code class="language-shell">docker build --build-arg http_proxy=http://192.168.0.109:20171 --build-arg https_proxy=http://192.168.0.109:20171 -t vlmcsd .
docker run -idt -p 1688:1688 vlmcsd
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Docker Resilio Sync]]></title>
        <id>http://www.ntlx.top/post/docker-resilio-sync/</id>
        <link href="http://www.ntlx.top/post/docker-resilio-sync/">
        </link>
        <updated>2021-10-17T01:22:54.000Z</updated>
        <summary type="html"><![CDATA[<p>Deploy Resilio Sync by Docker.</p>
]]></summary>
        <content type="html"><![CDATA[<p>Deploy Resilio Sync by Docker.</p>
<!-- more -->
<p>Through Docker Compose:</p>
<pre><code class="language-yaml">version: &quot;2.1&quot;
networks:
  resilio:
    external: false
services:
  resilio-sync:
    image: lscr.io/linuxserver/resilio-sync
    container_name: resilio-sync
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Asia/Shanghai
      - UMASK=022
    volumes:
      - ./config:/config
      - /path/to/downloads:/downloads
      - /path/to/data:/sync
    ports:
      - 9999:8888
      - 55555:55555
    restart: unless-stopped
    logging:
      options:
        max-size: &quot;1m&quot;
    networks:
      - resilio
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Tensorflow installation through conda]]></title>
        <id>http://www.ntlx.top/post/tensorflow-installation-through-conda/</id>
        <link href="http://www.ntlx.top/post/tensorflow-installation-through-conda/">
        </link>
        <updated>2021-08-01T03:48:25.000Z</updated>
        <summary type="html"><![CDATA[<p>Install tensorflow and it's environment though miniconda3.</p>
]]></summary>
        <content type="html"><![CDATA[<p>Install tensorflow and it's environment though miniconda3.</p>
<!-- more -->
<h1 id="windows">Windows</h1>
<blockquote>
<p>Installation instruction under Windows.</p>
</blockquote>
<h2 id="download-miniconda3">Download Miniconda3</h2>
<p>Through <a href="https://docs.conda.io/en/latest/miniconda.html#windows-installers">Official Site</a> or <a href="https://mirrors.tuna.tsinghua.edu.cn/anaconda/miniconda/">Mirror Site</a>, or just <a href="https://mirrors.tuna.tsinghua.edu.cn/anaconda/miniconda/Miniconda3-py37_4.9.2-Windows-x86_64.exe">Click Here</a>.</p>
<h2 id="install-miniconda3">Install Miniconda3</h2>
<p>Run Miniconda3 Installer, for example <code>Miniconda3-py37_4.9.2-Windows-x86_64.exe</code>, keep every configuration as default, then open <code>Anaconda Prompt</code>, and type this:</p>
<pre><code class="language-shell">conda init
exit
</code></pre>
<p>Then you can use <code>Anaconda Prompt</code> or <code>Microsoft Terminal</code> or <code>Microsoft Visual Studio Code</code> or any terminal you want.</p>
<blockquote>
<p>If you prefer to use different terminal rather than <code>Anaconda Prompt</code>, the first time you open it, you should run <code>conda init</code> command to make sure the system environment was correct, it is importent!</p>
</blockquote>
<h2 id="mirror">Mirror</h2>
<p>For speed up package download, you should set up mirror for your conda.</p>
<p>Here gives <code>mirrors.tuna.tsinghua.edu.cn</code> for example.</p>
<ol>
<li>Open terminal and run <code>conda config --set show_channel_urls yes</code>.</li>
<li>Edit <code>.condarc</code> file which under your home dir, replace the content as below:</li>
</ol>
<pre><code class="language-yaml">channels:
    - defaults
show_channel_urls: true
default_channels:
    - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main
    - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/r
    - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/msys2
custom_channels:
    conda-forge: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud
    msys2: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud
    bioconda: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud
    menpo: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud
    pytorch: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud
    simpleitk: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud
</code></pre>
<ol>
<li>Run <code>conda clean -i</code> to make sure you are using mirror.</li>
</ol>
<h2 id="mamba">Mamba</h2>
<p>After the installation of Miniconda3, the package <code>mamba</code> was recommanded to use, it will be very fast compared to use <code>conda</code> command directly.</p>
<p>Mamba Installation:</p>
<pre><code class="language-bash">conda install mamba -n base -c conda-forge
</code></pre>
<blockquote>
<p>The documents of mamba will be at the <a href="https://github.com/mamba-org/mamba">GitHub Project</a>.</p>
</blockquote>
<h2 id="only-use-conda">Only Use Conda</h2>
<blockquote>
<p>May cause some problem.</p>
</blockquote>
<h3 id="create-use-env">Create &amp; Use ENV</h3>
<blockquote>
<p>Create ENV was optional but recommanded, you can just use the default ENV (base).</p>
</blockquote>
<p>Run as below (for example) to create &amp; use conda ENV:</p>
<pre><code class="language-bash">mamba create -n tf tensorflow=1.15.0
conda activate tf
</code></pre>
<h3 id="install-tensorflow-dependency-tools">Install Tensorflow &amp; Dependency &amp; Tools</h3>
<p>Run commands as below:</p>
<pre><code class="language-bash">mamba install numpy pandas matplotlib scikit-learn notebook
</code></pre>
<h4 id="use-jupyter-notebook">Use Jupyter Notebook</h4>
<p>For example, run command as below:</p>
<pre><code class="language-bash">conda activate tf
jupyter-notebook
</code></pre>
<h2 id="use-pip-manage-python-packages">Use pip manage python packages</h2>
<ol>
<li>(Optional) Create a python ENV and switch to this ENV.</li>
<li>Run <code>mamba install numpy pandas matplotlib scikit-learn notebook</code>.</li>
<li>Run <code>pip install -i https://pypi.tuna.tsinghua.edu.cn/simple tensorflow==1.15</code></li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Mac Apps]]></title>
        <id>http://www.ntlx.top/post/mac-apps/</id>
        <link href="http://www.ntlx.top/post/mac-apps/">
        </link>
        <updated>2021-06-30T02:54:58.000Z</updated>
        <summary type="html"><![CDATA[<p>Must have apps for Mac OS.</p>
]]></summary>
        <content type="html"><![CDATA[<p>Must have apps for Mac OS.</p>
<!-- more -->
<ul>
<li>balenaEtcher</li>
<li>CleanMyMac X</li>
<li>Edge</li>
<li>Gridea</li>
<li>Irvue</li>
<li>iSyncr</li>
<li>iTerm</li>
<li>KeyCastr</li>
<li>MaxSnap</li>
<li>Microsoft Remote Desktop Beta</li>
<li>MyZip Pro</li>
<li>PDF Expert</li>
<li>PicGo</li>
<li>RescueTime</li>
<li>Sensei</li>
<li>Transmit</li>
<li>Visual Studio Code - Insiders</li>
<li>网易邮箱大师</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[SSHFS Server]]></title>
        <id>http://www.ntlx.top/post/sshfs-server/</id>
        <link href="http://www.ntlx.top/post/sshfs-server/">
        </link>
        <updated>2021-06-22T05:13:36.000Z</updated>
        <summary type="html"><![CDATA[<p>Deploy &amp; Settings for SFTP server.</p>
]]></summary>
        <content type="html"><![CDATA[<p>Deploy &amp; Settings for SFTP server.</p>
<!-- more -->
<h1 id="settings">Settings</h1>
<p>Edit <code>/etc/ssh/sshd_config</code>:</p>
<pre><code class="language-bash">Subsystem sftp /usr/lib/ssh/sftp-server -R

Match Group CM
  ChrootDirectory %h
  ForceCommand internal-sftp -R
</code></pre>
<blockquote>
<p><code>-R</code> means read only</p>
</blockquote>
<h1 id="reference">Reference</h1>
<p><a href="https://saucer-man.com/operation_and_maintenance/480.html">基于SSHFS的网盘搭建</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[SSHFS Client]]></title>
        <id>http://www.ntlx.top/post/sshfs-for-windows/</id>
        <link href="http://www.ntlx.top/post/sshfs-for-windows/">
        </link>
        <updated>2021-06-22T02:24:01.000Z</updated>
        <summary type="html"><![CDATA[<p>Client: mount remote disk through <code>SSH</code> using <code>SSHFS</code>.</p>
]]></summary>
        <content type="html"><![CDATA[<p>Client: mount remote disk through <code>SSH</code> using <code>SSHFS</code>.</p>
<!-- more -->
<h1 id="software-installation">Software installation</h1>
<blockquote>
<p>GUI manager was recommanded on windows</p>
</blockquote>
<h2 id="windows">Windows</h2>
<ol>
<li><a href="https://github.com/billziss-gh/winfsp/releases">winfsp</a></li>
<li><a href="https://github.com/billziss-gh/sshfs-win/releases">sshfs-win</a></li>
<li><a href="https://github.com/evsar3/sshfs-win-manager/releases">SSHFS-Win Manager</a> (GUI)</li>
</ol>
<h2 id="mac-os">Mac OS</h2>
<pre><code class="language-bash">brew cask install osxfuse
brew install sshfs
reboot
</code></pre>
<h2 id="linux">Linux</h2>
<p>Ubuntu for example:</p>
<pre><code class="language-bash">sudo apt install sshfs
</code></pre>
<p>CentOS for example:</p>
<pre><code class="language-bash">yum install -y epel-release
yum -y install fuse-sshfs
</code></pre>
<h3 id="usage">Usage</h3>
<pre><code class="language-bash">sshfs tecmint@x.x.x.x:/home/tecmint/ /mnt/tecmint
sshfs -o ssh_command='sshpass -p 123456 ssh' -o cache=yes,allow_other tecmint@x.x.x.x:/home/tecmint/ /mnt/tecmint
</code></pre>
<blockquote>
<p><code>o transform_symlinks</code> 表示转换绝对链接符号为相对链接符号<br>
<code>-o follow_symlinks</code> 沿用服务器上的链接符号<br>
<code>-C</code> or <code>-o compression=yes</code> 压缩<br>
<code>-o reconnect</code> 自动重连<br>
<code>-o cache=yes</code><br>
<code>-o allow_other</code></p>
</blockquote>
<h3 id="check-cmd">Check cmd</h3>
<pre><code class="language-bash">df -hT
</code></pre>
<h3 id="unmount">Unmount</h3>
<pre><code class="language-bash">umount /mnt/tecmint 
</code></pre>
<h3 id="auto-mount">Auto mount</h3>
<p>Add below to <code>/etc/fstab</code>:</p>
<pre><code class="language-bash">sshfs#tecmint@x.x.x.x:/home/tecmint/ /mnt/tecmint fuse defaults 0 0 
sshfs#user@hostname:path mount_point fuse defaults,auto,allow_other 0 0
</code></pre>
<blockquote>
<p><code>allow_other</code> 这个参数很重要，没有这个参数的话，挂载过来的目录只有 <code>root</code> 能够访问</p>
</blockquote>
<h4 id="mount-without-password">Mount without password</h4>
<p>via SSH key, add below to <code>/etc/fstab</code>:</p>
<pre><code class="language-bash">sshfs#tecmint@x.x.x.x:/home/tecmint/ /mnt/tecmint fuse IdentityFile=~/.ssh/id_rsa defaults 0 0
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Rstudio Server]]></title>
        <id>http://www.ntlx.top/post/rstudio-server/</id>
        <link href="http://www.ntlx.top/post/rstudio-server/">
        </link>
        <updated>2021-06-18T05:57:04.000Z</updated>
        <summary type="html"><![CDATA[<p>Installation Note</p>
]]></summary>
        <content type="html"><![CDATA[<p>Installation Note</p>
<!-- more -->
<h1 id="installer">Installer</h1>
<p>Download installer from <a href="https://www.rstudio.com/products/rstudio/download-server">official site</a>, or:</p>
<pre><code class="language-bash">sudo apt-get install gdebi-core
wget https://download2.rstudio.org/server/bionic/amd64/rstudio-server-1.4.1717-amd64.deb
sudo gdebi rstudio-server-1.4.1717-amd64.deb
</code></pre>
<h1 id="setting-r-path">Setting R path</h1>
<p>Add below to <code>/etc/rstudio/rserver.conf</code>:</p>
<pre><code class="language-bash">rsession-which-r=/software/miniconda3/envs/R4.1/bin/R
rsession-ld-library-path=/software/miniconda3/envs/R4.1/lib
</code></pre>
<p>Then <code>sudo rstudio-server start</code>.</p>
<h1 id="port">Port</h1>
<p><code>8787</code></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Auto Power Off for Linux]]></title>
        <id>http://www.ntlx.top/post/auto-power-off-for-linux/</id>
        <link href="http://www.ntlx.top/post/auto-power-off-for-linux/">
        </link>
        <updated>2021-06-16T02:33:16.000Z</updated>
        <summary type="html"><![CDATA[<p>Auto detect AC power down &amp; auto shutdown system.</p>
]]></summary>
        <content type="html"><![CDATA[<p>Auto detect AC power down &amp; auto shutdown system.</p>
<!-- more -->
<p>Create a shell script, named like <code>PowerCheck.AutoPowerOff.sh</code>:</p>
<pre><code class="language-bash">#!/bin/bash
MonitorIP=192.168.1.1
DelayTime=300s
ping -c 1 $MonitorIP &gt; /dev/null
ret=$?
if [ $ret -eq 0 ]
then
echo `date` &gt;&gt; /home/lx/PowerCheck.log
echo ' AC Power OK ! ' &gt;&gt; /home/lx/PowerCheck.log
else
echo `date` &gt;&gt; /home/lx/PowerCheck.log
echo ' AC Power maybe off, checking again after 1 minutes ! ' &gt;&gt; /home/lx/PowerCheck.log
sleep $DelayTime
ping -c 1 $MonitorIP &gt; /dev/null
ret=$?
if [ $ret -eq 0 ]
then
echo `date` &gt;&gt; /home/lx/PowerCheck.log
echo ' Check again, AC Power OK ! ' &gt;&gt; /home/lx/PowerCheck.log
else
echo `date` &gt;&gt; /home/lx/PowerCheck.log
echo 'poweroff' &gt;&gt; /home/lx/PowerCheck.log
sudo -S poweroff &lt;&lt; EOF
YourSuperUserPassword
EOF
fi
fi
</code></pre>
<p>Then edit <code>crontab</code> by cmd <code>crontab -e</code>:</p>
<pre><code class="language-bash">*/5 * * * * /home/lx/PowerCheck.AutoPowerOff.sh
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Docker IPsec VPN]]></title>
        <id>http://www.ntlx.top/post/docker-ipsec-vpn/</id>
        <link href="http://www.ntlx.top/post/docker-ipsec-vpn/">
        </link>
        <updated>2021-06-14T08:36:43.000Z</updated>
        <summary type="html"><![CDATA[<p>Self-build VPN, easy &amp; free !</p>
]]></summary>
        <content type="html"><![CDATA[<p>Self-build VPN, easy &amp; free !</p>
<!-- more -->
<blockquote>
<p>Thanks to <a href="https://github.com/hwdsl2">Lin Song</a> who brought <a href="https://github.com/hwdsl2/docker-ipsec-vpn-server">docker-ipsec-vpn-server</a> open-source project to everyone for building &amp; using VPN service very convenient.</p>
</blockquote>
<h1 id="server">Server</h1>
<blockquote>
<p>via Docker Compose</p>
</blockquote>
<pre><code class="language-yaml">version: &quot;3&quot;
networks:
  vpn:
    external: false
services:
  vpn:
    image: hwdsl2/ipsec-vpn-server
    container_name: vpn
    restart: unless-stopped
    privileged: true
    networks:
      - vpn
    ports:
      - 500:500/udp
      - 4500:4500/udp
    volumes:
      - ./ipsec.d:/etc/ipsec.d
      - ./vpn.env:/opt/src/vpn.env:ro
    logging:
      options:
        max-size: &quot;1m&quot;
</code></pre>
<p>Example settings within <code>./vpn.env</code>:</p>
<pre><code class="language-yaml">VPN_IPSEC_PSK='88888888'
VPN_USER='user'
VPN_PASSWORD='password'
VPN_ADDL_USERS='user1 user2'
VPN_ADDL_PASSWORDS='password1 password2'
VPN_DNS_SRV1='1.1.1.1'
VPN_DNS_SRV2='1.0.0.1'
</code></pre>
<h1 id="client">Client</h1>
<blockquote>
<p>Only Windows 10 need a little help</p>
</blockquote>
<h2 id="windows-10">Windows 10</h2>
<ol>
<li><a href="https://www.shrew.net/download/vpn/vpn-client-2.2.2-release.exe">Download client software</a></li>
<li>Follow the <a href="https://github.com/hwdsl2/setup-ipsec-vpn/blob/master/docs/clients-xauth-zh.md#windows">instruction</a> to connect server</li>
</ol>
<h2 id="other-os">Other OS</h2>
<p>Just use build-in VPN support.</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Proxy]]></title>
        <id>http://www.ntlx.top/post/proxy/</id>
        <link href="http://www.ntlx.top/post/proxy/">
        </link>
        <updated>2021-06-10T04:55:14.000Z</updated>
        <summary type="html"><![CDATA[<p><code>网络代理</code> 可以简单理解为更改特定或所有网络传输的数据通道（或线路），以达到绕过监测、提高数据传输安全性的目的。</p>
]]></summary>
        <content type="html"><![CDATA[<p><code>网络代理</code> 可以简单理解为更改特定或所有网络传输的数据通道（或线路），以达到绕过监测、提高数据传输安全性的目的。</p>
<!-- more -->
<h1 id="说明">说明</h1>
<p><code>网络代理</code> 有两种策略：</p>
<ul>
<li>智能代理：智能代理根据预先设定的地址列表决定是否对某个互联网连接进行代理，因此并不能保证所有需要代理的连接全部都会进行代理，但一般能够保证大部分连接的使用，且不会影响不需要代理的连接，推荐日常使用</li>
<li>全局代理：全局代理即让 <code>网络代理</code> 接管所有的网络数据传输，可以保证所有需要代理的连接全部都会进行代理，但不需要代理的连接也会强制进行代理，会造成部分国内网络访问的困难，故一般在智能代理无法满足需求时使用</li>
</ul>
<blockquote>
<p>一般先让系统所有流量走代理，把浏览器的代理工具配置好，然后关掉系统代理，仅让浏览器或其它需要代理的软件单独代理流量</p>
</blockquote>
<blockquote>
<p>本文配置参数仅作示例</p>
</blockquote>
<h1 id="系统代理">系统代理</h1>
<blockquote>
<p><code>系统代理</code> 将对除 <code>终端</code> 外的所有程序生效</p>
</blockquote>
<h2 id="windows-10">Windows 10</h2>
<blockquote>
<p>若系统代理配置不生效，请注销后再次登录即可</p>
</blockquote>
<h3 id="进入系统代理设置">进入系统代理设置</h3>
<ol>
<li>点击任务栏上的网络状态图标，位置如图所示：<br>
<img src="https://cdn.jsdelivr.net/gh/NTLx/Pic/PicGo/20201223095853.png" alt="" loading="lazy"></li>
<li>在弹出的界面中点击 <code>网络和 Internet 设置</code><br>
<img src="https://cdn.jsdelivr.net/gh/NTLx/Pic/PicGo/20201223095902.png" alt="" loading="lazy"></li>
<li>在弹出的界面中点击左侧导航栏里的 <code>代理</code><br>
<img src="https://cdn.jsdelivr.net/gh/NTLx/Pic/PicGo/20201223095910.png" alt="" loading="lazy"></li>
<li>如果 <code>自动检测设置</code> 的状态为 <code>开</code>（如下图所示），请将其切换为 <code>关</code> 的状态<br>
<img src="https://cdn.jsdelivr.net/gh/NTLx/Pic/PicGo/20201223095918.png" alt="" loading="lazy"></li>
</ol>
<h3 id="设置全局代理">设置全局代理</h3>
<ol>
<li>在 <code>手动设置代理</code> 设置区域内，将 <code>使用代理服务器</code> 的状态切换为 <code>开</code><br>
<img src="https://cdn.jsdelivr.net/gh/NTLx/Pic/PicGo/20201223100001.png" alt="" loading="lazy"></li>
<li>在 <code>地址</code> 一栏填写代理服务器地址，在 <code>端口</code> 一栏填写代理服务器端口，在 <code>请勿对以下列条目开头的地址使用代理服务器</code> 一栏填写 <code>127.0.*;192.168.*;localhost</code>，将 <code>请勿将代理服务器用于本地(Intranet)地址</code> 前的复选框选中，如下图所示：<br>
<img src="https://cdn.jsdelivr.net/gh/NTLx/Pic/PicGo/20201223100007.png" alt="" loading="lazy"></li>
<li>点击 <code>保存</code> 按钮即可</li>
</ol>
<h2 id="mac-os">Mac OS</h2>
<blockquote>
<p>若系统代理配置不生效，请将其它网络相关配置还原至默认值，或咨询网络管理员</p>
</blockquote>
<h3 id="进入系统代理设置-2">进入系统代理设置</h3>
<ol>
<li>进入设置：点击 Dock 上的 <code>系统偏好设置</code> 图标，或者点击屏幕左上角的 Apple 徽标，单击 <code>系统偏好设置...</code></li>
<li>单击 <code>网络</code><br>
<img src="https://cdn.jsdelivr.net/gh/NTLx/Pic/PicGo/20201223100437.png" alt="" loading="lazy"></li>
<li>选中需要进行代理设置的网络连接（或当前网络连接，例如此处示例的 <code>以太网</code>），然后点击 <code>高级...</code> 按钮<br>
<img src="https://cdn.jsdelivr.net/gh/NTLx/Pic/PicGo/20201223100449.png" alt="" loading="lazy"></li>
<li>单击 <code>代理</code> 选项卡<br>
<img src="https://cdn.jsdelivr.net/gh/NTLx/Pic/PicGo/20201223100458.png" alt="" loading="lazy"></li>
</ol>
<h3 id="设置全局代理-2">设置全局代理</h3>
<ol>
<li>取消勾选 <code>自动代理配置</code></li>
<li>勾选 <code>SOCKS 代理</code>，并按下图配置（需填写上文提供的 Socks 代理服务器地址）<br>
<img src="https://cdn.jsdelivr.net/gh/NTLx/Pic/PicGo/20201223100544.png" alt="" loading="lazy"></li>
<li>勾选 <code>FTP 代理</code>，并按下图配置（需填写上文提供的 Http 代理服务器地址）<br>
<img src="https://cdn.jsdelivr.net/gh/NTLx/Pic/PicGo/20201223100552.png" alt="" loading="lazy"></li>
<li>勾选 <code>网页代理</code>，并按下图配置（需填写上文提供的 Http 代理服务器地址）<br>
<img src="https://cdn.jsdelivr.net/gh/NTLx/Pic/PicGo/20201223100601.png" alt="" loading="lazy"></li>
<li>勾选 <code>安全网页代理</code>，并按下图配置（需填写上文提供的 Http 代理服务器地址）<br>
<img src="https://cdn.jsdelivr.net/gh/NTLx/Pic/PicGo/20201223100609.png" alt="" loading="lazy"></li>
<li>点击 <code>好</code> 按钮，然后点击 <code>应用</code> 按钮即可</li>
</ol>
<h1 id="浏览器代理">浏览器代理</h1>
<p>顾名思义，仅让浏览器使用代理进行网络访问</p>
<blockquote>
<p>若已开启系统代理，请先关闭，不建议与浏览器代理一同开启</p>
</blockquote>
<h2 id="chrome">Chrome</h2>
<blockquote>
<p>Chrome 浏览器默认的插件安装方式是从其官方插件商店操作，该商店需要科学上网</p>
</blockquote>
<h3 id="下载代理切换插件">下载代理切换插件</h3>
<ol>
<li>第一次配置前，请先配置并开启系统全局代理</li>
<li>访问 <a href="https://chrome.google.com/webstore">Chrome 网上应用商店</a></li>
<li>找到页面左上角的 <code>搜索店内应用</code> 输入框（确保图中蓝色色块选中的是 <code>扩展程序</code>），并输入 <code>Proxy SwitchyOmega</code>（如下图所示），然后点击键盘 <code>Enter</code> 键<br>
<img src="https://cdn.jsdelivr.net/gh/NTLx/Pic/PicGo/20201223100649.png" alt="" loading="lazy"></li>
<li>点击 Chrome 扩展程序 <code>Proxy SwitchyOmega</code> 的 <code>添加至 Chrome</code> 按钮<br>
<img src="https://cdn.jsdelivr.net/gh/NTLx/Pic/PicGo/20201223100754.png" alt="" loading="lazy"></li>
<li>在弹出的对话框中选择 <code>添加扩展程序</code><br>
<img src="https://cdn.jsdelivr.net/gh/NTLx/Pic/PicGo/20201223100712.png" alt="" loading="lazy"></li>
<li>安装成功后，会跳出设置界面，并自动开始自带的介绍流程，请不要跳过<br>
<img src="https://cdn.jsdelivr.net/gh/NTLx/Pic/PicGo/20201223100812.png" alt="" loading="lazy"></li>
<li>关闭系统全局代理</li>
</ol>
<h3 id="一般配置">一般配置</h3>
<ol>
<li>在 <code>SwithyOmega</code> 设置界面左侧导航栏中点击<code>界面</code><br>
<img src="https://cdn.jsdelivr.net/gh/NTLx/Pic/PicGo/20201223100822.png" alt="" loading="lazy"></li>
<li>在 <code>切换选项</code> 中的 <code>初始情景模式</code> 中选择 <code>auto switch</code><br>
<img src="https://cdn.jsdelivr.net/gh/NTLx/Pic/PicGo/20201223100831.png" alt="" loading="lazy"></li>
<li>然后点击左侧导航栏底部的 <code>应用选项</code><br>
<img src="https://cdn.jsdelivr.net/gh/NTLx/Pic/PicGo/20201223100846.png" alt="" loading="lazy"></li>
<li>在 <code>SwithyOmega</code> 设置界面左侧导航栏中点击 <code>proxy</code><br>
<img src="https://cdn.jsdelivr.net/gh/NTLx/Pic/PicGo/20201223101244.png" alt="" loading="lazy"></li>
<li>按照下图进行设置：<br>
<img src="https://cdn.jsdelivr.net/gh/NTLx/Pic/PicGo/20201223101252.png" alt="" loading="lazy"></li>
<li>然后点击左侧导航栏底部的 <code>应用选项</code></li>
<li>在 <code>SwithyOmega</code> 设置界面左侧导航栏中点击 <code>auto switch</code><br>
<img src="https://cdn.jsdelivr.net/gh/NTLx/Pic/PicGo/20201223101301.png" alt="" loading="lazy"></li>
<li>在 <code>规则设置列表</code> 区域中，点击选中 <code>规则列表格式</code> 的 <code>AutoProxy</code>，然后在 <code>规则列表网址</code> 中填写<code>https://raw.githubusercontent.com/gfwlist/gfwlist/master/gfwlist.txt</code>，然后点击 <code>立即更新情景模式</code> 按钮<br>
<img src="https://cdn.jsdelivr.net/gh/NTLx/Pic/PicGo/20201223100859.png" alt="" loading="lazy"></li>
<li>在 <code>切换规则</code> 区域中，按照下图设置 <code>规则列表规则</code> 和 <code>默认情景模式</code><br>
<img src="https://cdn.jsdelivr.net/gh/NTLx/Pic/PicGo/20201223100944.png" alt="" loading="lazy"></li>
<li>然后点击左侧导航栏底部的 <code>应用选项</code></li>
</ol>
<h3 id="设置智能代理">设置智能代理</h3>
<ol>
<li>单击 Chrome 浏览器地址栏右侧的 <code>SwitchyOmega</code> 图标<br>
<img src="https://cdn.jsdelivr.net/gh/NTLx/Pic/PicGo/20201223101021.png" alt="" loading="lazy"></li>
<li>选择 <code>auto switch</code><br>
<img src="https://cdn.jsdelivr.net/gh/NTLx/Pic/PicGo/20201223101011.png" alt="" loading="lazy"></li>
</ol>
<h3 id="设置全局代理-3">设置全局代理</h3>
<ol>
<li>单击 Chrome 浏览器地址栏右侧的 <code>SwitchyOmega</code> 图标<br>
<img src="https://cdn.jsdelivr.net/gh/NTLx/Pic/PicGo/20201223101021.png" alt="" loading="lazy"></li>
<li>选择 <code>proxy</code><br>
<img src="https://cdn.jsdelivr.net/gh/NTLx/Pic/PicGo/20201223101042.png" alt="" loading="lazy"></li>
</ol>
<h2 id="edge">Edge</h2>
<p>微软基于 <code>Chromium</code> 开发的新版 <code>Edge</code> 浏览器可从其自带插件商店安装 <code>SwithyOmega</code> 插件来使用网络代理，而且整个过程无需在系统开启全局代理的环境下操作。</p>
<h1 id="终端代理">终端代理</h1>
<blockquote>
<p>系统代理和浏览器代理均不会对终端生效，终端需单独配置代理</p>
</blockquote>
<pre><code class="language-bash">export http_proxy=&quot;http://winservice.cm.com:10809&quot;; export https_proxy=&quot;http://winservice.cm.com:10809&quot;; export ftp_proxy=&quot;http://winservice.cm.com:10809&quot;
</code></pre>
<p>或者</p>
<pre><code class="language-bash">export ALL_PROXY=socks5://winservice.cm.com:10808
</code></pre>
]]></content>
    </entry>
</feed>