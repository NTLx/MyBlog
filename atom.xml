<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://www.ntlx.top</id>
    <title>NTLx&apos;s Blog</title>
    <updated>2021-06-14T08:51:47.959Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="http://www.ntlx.top"/>
    <link rel="self" href="http://www.ntlx.top/atom.xml"/>
    <subtitle>My Tech Notes &amp; Thoughts</subtitle>
    <logo>http://www.ntlx.top/images/avatar.png</logo>
    <icon>http://www.ntlx.top/favicon.ico</icon>
    <rights>All rights reserved 2021, NTLx&apos;s Blog</rights>
    <entry>
        <title type="html"><![CDATA[Docker IPsec VPN]]></title>
        <id>http://www.ntlx.top/post/docker-ipsec-vpn/</id>
        <link href="http://www.ntlx.top/post/docker-ipsec-vpn/">
        </link>
        <updated>2021-06-14T08:36:43.000Z</updated>
        <summary type="html"><![CDATA[<p>Self-build VPN, easy &amp; free !</p>
]]></summary>
        <content type="html"><![CDATA[<p>Self-build VPN, easy &amp; free !</p>
<!-- more -->
<blockquote>
<p>Thanks to <a href="https://github.com/hwdsl2">Lin Song</a> who brought <a href="https://github.com/hwdsl2/docker-ipsec-vpn-server">docker-ipsec-vpn-server</a> open-source project to everyone for building &amp; using VPN service very convenient.</p>
</blockquote>
<h1 id="server">Server</h1>
<blockquote>
<p>via Docker Compose</p>
</blockquote>
<pre><code class="language-yaml">version: &quot;3&quot;
networks:
  vpn:
    external: false
services:
  vpn:
    image: hwdsl2/ipsec-vpn-server
    container_name: vpn
    restart: unless-stopped
    privileged: true
    networks:
      - vpn
    ports:
      - 500:500/udp
      - 4500:4500/udp
    volumes:
      - ./ipsec.d:/etc/ipsec.d
      - ./vpn.env:/opt/src/vpn.env:ro
    logging:
      options:
        max-size: &quot;1m&quot;
</code></pre>
<p>Example settings within <code>./vpn.env</code>:</p>
<pre><code class="language-yaml">VPN_IPSEC_PSK='88888888'
VPN_USER='user'
VPN_PASSWORD='password'
VPN_ADDL_USERS='user1 user2'
VPN_ADDL_PASSWORDS='password1 password2'
VPN_DNS_SRV1='1.1.1.1'
VPN_DNS_SRV2='1.0.0.1'
</code></pre>
<h1 id="client">Client</h1>
<blockquote>
<p>Only Windows 10 need a little help</p>
</blockquote>
<h2 id="windows-10">Windows 10</h2>
<ol>
<li><a href="https://www.shrew.net/download/vpn/vpn-client-2.2.2-release.exe">Download client software</a></li>
<li>Follow the <a href="https://github.com/hwdsl2/setup-ipsec-vpn/blob/master/docs/clients-xauth-zh.md#windows">instruction</a> to connect server</li>
</ol>
<h2 id="other-os">Other OS</h2>
<p>Just use build-in VPN support.</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Proxy]]></title>
        <id>http://www.ntlx.top/post/proxy/</id>
        <link href="http://www.ntlx.top/post/proxy/">
        </link>
        <updated>2021-06-10T04:55:14.000Z</updated>
        <summary type="html"><![CDATA[<p><code>网络代理</code> 可以简单理解为更改特定或所有网络传输的数据通道（或线路），以达到绕过监测、提高数据传输安全性的目的。</p>
]]></summary>
        <content type="html"><![CDATA[<p><code>网络代理</code> 可以简单理解为更改特定或所有网络传输的数据通道（或线路），以达到绕过监测、提高数据传输安全性的目的。</p>
<!-- more -->
<h1 id="说明">说明</h1>
<p><code>网络代理</code> 有两种策略：</p>
<ul>
<li>智能代理：智能代理根据预先设定的地址列表决定是否对某个互联网连接进行代理，因此并不能保证所有需要代理的连接全部都会进行代理，但一般能够保证大部分连接的使用，且不会影响不需要代理的连接，推荐日常使用</li>
<li>全局代理：全局代理即让 <code>网络代理</code> 接管所有的网络数据传输，可以保证所有需要代理的连接全部都会进行代理，但不需要代理的连接也会强制进行代理，会造成部分国内网络访问的困难，故一般在智能代理无法满足需求时使用</li>
</ul>
<blockquote>
<p>一般先让系统所有流量走代理，把浏览器的代理工具配置好，然后关掉系统代理，仅让浏览器或其它需要代理的软件单独代理流量</p>
</blockquote>
<blockquote>
<p>本文配置参数仅作示例</p>
</blockquote>
<h1 id="系统代理">系统代理</h1>
<h2 id="windows-10">Windows 10</h2>
<blockquote>
<p>若系统代理配置不生效，请注销后再次登录即可</p>
</blockquote>
<h3 id="进入系统代理设置">进入系统代理设置</h3>
<ol>
<li>点击任务栏上的网络状态图标，位置如图所示：<br>
<img src="https://cdn.jsdelivr.net/gh/NTLx/Pic/PicGo/20201223095853.png" alt="" loading="lazy"></li>
<li>在弹出的界面中点击 <code>网络和 Internet 设置</code><br>
<img src="https://cdn.jsdelivr.net/gh/NTLx/Pic/PicGo/20201223095902.png" alt="" loading="lazy"></li>
<li>在弹出的界面中点击左侧导航栏里的 <code>代理</code><br>
<img src="https://cdn.jsdelivr.net/gh/NTLx/Pic/PicGo/20201223095910.png" alt="" loading="lazy"></li>
<li>如果 <code>自动检测设置</code> 的状态为 <code>开</code>（如下图所示），请将其切换为 <code>关</code> 的状态<br>
<img src="https://cdn.jsdelivr.net/gh/NTLx/Pic/PicGo/20201223095918.png" alt="" loading="lazy"></li>
</ol>
<h3 id="设置全局代理">设置全局代理</h3>
<ol>
<li>在 <code>手动设置代理</code> 设置区域内，将 <code>使用代理服务器</code> 的状态切换为 <code>开</code><br>
<img src="https://cdn.jsdelivr.net/gh/NTLx/Pic/PicGo/20201223100001.png" alt="" loading="lazy"></li>
<li>在 <code>地址</code> 一栏填写代理服务器地址，在 <code>端口</code> 一栏填写代理服务器端口，在 <code>请勿对以下列条目开头的地址使用代理服务器</code> 一栏填写 <code>127.0.*;192.168.*;localhost</code>，将 <code>请勿将代理服务器用于本地(Intranet)地址</code> 前的复选框选中，如下图所示：<br>
<img src="https://cdn.jsdelivr.net/gh/NTLx/Pic/PicGo/20201223100007.png" alt="" loading="lazy"></li>
<li>点击 <code>保存</code> 按钮即可</li>
</ol>
<h2 id="mac-os">Mac OS</h2>
<h3 id="进入系统代理设置-2">进入系统代理设置</h3>
<ol>
<li>进入设置：点击 Dock 上的 <code>系统偏好设置</code> 图标，或者点击屏幕左上角的 Apple 徽标，单击 <code>系统偏好设置...</code></li>
<li>单击 <code>网络</code><br>
<img src="https://cdn.jsdelivr.net/gh/NTLx/Pic/PicGo/20201223100437.png" alt="" loading="lazy"></li>
<li>选中需要进行代理设置的网络连接（或当前网络连接，例如此处示例的 <code>以太网</code>），然后点击 <code>高级...</code> 按钮<br>
<img src="https://cdn.jsdelivr.net/gh/NTLx/Pic/PicGo/20201223100449.png" alt="" loading="lazy"></li>
<li>单击 <code>代理</code> 选项卡<br>
<img src="https://cdn.jsdelivr.net/gh/NTLx/Pic/PicGo/20201223100458.png" alt="" loading="lazy"></li>
</ol>
<h3 id="设置全局代理-2">设置全局代理</h3>
<ol>
<li>取消勾选 <code>自动代理配置</code></li>
<li>勾选 <code>SOCKS 代理</code>，并按下图配置（需填写上文提供的 Socks 代理服务器地址）<br>
<img src="https://cdn.jsdelivr.net/gh/NTLx/Pic/PicGo/20201223100544.png" alt="" loading="lazy"></li>
<li>勾选 <code>FTP 代理</code>，并按下图配置（需填写上文提供的 Http 代理服务器地址）<br>
<img src="https://cdn.jsdelivr.net/gh/NTLx/Pic/PicGo/20201223100552.png" alt="" loading="lazy"></li>
<li>勾选 <code>网页代理</code>，并按下图配置（需填写上文提供的 Http 代理服务器地址）<br>
<img src="https://cdn.jsdelivr.net/gh/NTLx/Pic/PicGo/20201223100601.png" alt="" loading="lazy"></li>
<li>勾选 <code>安全网页代理</code>，并按下图配置（需填写上文提供的 Http 代理服务器地址）<br>
<img src="https://cdn.jsdelivr.net/gh/NTLx/Pic/PicGo/20201223100609.png" alt="" loading="lazy"></li>
<li>点击 <code>好</code> 按钮，然后点击 <code>应用</code> 按钮即可</li>
</ol>
<h1 id="浏览器代理">浏览器代理</h1>
<p>顾名思义，仅让浏览器使用代理进行网络访问</p>
<blockquote>
<p>若已开启系统代理，请先关闭，不建议与浏览器代理一同开启</p>
</blockquote>
<h2 id="chrome">Chrome</h2>
<h3 id="下载代理切换插件">下载代理切换插件</h3>
<ol>
<li>第一次配置前，请先配置并开启系统全局代理</li>
<li>访问 <a href="https://chrome.google.com/webstore">Chrome 网上应用商店</a></li>
<li>找到页面左上角的 <code>搜索店内应用</code> 输入框（确保图中蓝色色块选中的是 <code>扩展程序</code>），并输入 <code>Proxy SwitchyOmega</code>（如下图所示），然后点击键盘 <code>Enter</code> 键<br>
<img src="https://cdn.jsdelivr.net/gh/NTLx/Pic/PicGo/20201223100649.png" alt="" loading="lazy"></li>
<li>点击 Chrome 扩展程序 <code>Proxy SwitchyOmega</code> 的 <code>添加至 Chrome</code> 按钮<br>
<img src="https://cdn.jsdelivr.net/gh/NTLx/Pic/PicGo/20201223100754.png" alt="" loading="lazy"></li>
<li>在弹出的对话框中选择 <code>添加扩展程序</code><br>
<img src="https://cdn.jsdelivr.net/gh/NTLx/Pic/PicGo/20201223100712.png" alt="" loading="lazy"></li>
<li>安装成功后，会跳出设置界面，并自动开始自带的介绍流程，请不要跳过<br>
<img src="https://cdn.jsdelivr.net/gh/NTLx/Pic/PicGo/20201223100812.png" alt="" loading="lazy"></li>
<li>关闭系统全局代理</li>
</ol>
<h3 id="一般配置">一般配置</h3>
<ol>
<li>在 <code>SwithyOmega</code> 设置界面左侧导航栏中点击<code>界面</code><br>
<img src="https://cdn.jsdelivr.net/gh/NTLx/Pic/PicGo/20201223100822.png" alt="" loading="lazy"></li>
<li>在 <code>切换选项</code> 中的 <code>初始情景模式</code> 中选择 <code>auto switch</code><br>
<img src="https://cdn.jsdelivr.net/gh/NTLx/Pic/PicGo/20201223100831.png" alt="" loading="lazy"></li>
<li>然后点击左侧导航栏底部的 <code>应用选项</code><br>
<img src="https://cdn.jsdelivr.net/gh/NTLx/Pic/PicGo/20201223100846.png" alt="" loading="lazy"></li>
<li>在 <code>SwithyOmega</code> 设置界面左侧导航栏中点击 <code>proxy</code><br>
<img src="https://cdn.jsdelivr.net/gh/NTLx/Pic/PicGo/20201223101244.png" alt="" loading="lazy"></li>
<li>按照下图进行设置：<br>
<img src="https://cdn.jsdelivr.net/gh/NTLx/Pic/PicGo/20201223101252.png" alt="" loading="lazy"></li>
<li>然后点击左侧导航栏底部的 <code>应用选项</code></li>
<li>在 <code>SwithyOmega</code> 设置界面左侧导航栏中点击 <code>auto switch</code><br>
<img src="https://cdn.jsdelivr.net/gh/NTLx/Pic/PicGo/20201223101301.png" alt="" loading="lazy"></li>
<li>在 <code>规则设置列表</code> 区域中，点击选中 <code>规则列表格式</code> 的 <code>AutoProxy</code>，然后在 <code>规则列表网址</code> 中填写<code>https://raw.githubusercontent.com/gfwlist/gfwlist/master/gfwlist.txt</code>，然后点击 <code>立即更新情景模式</code> 按钮<br>
<img src="https://cdn.jsdelivr.net/gh/NTLx/Pic/PicGo/20201223100859.png" alt="" loading="lazy"></li>
<li>在 <code>切换规则</code> 区域中，按照下图设置 <code>规则列表规则</code> 和 <code>默认情景模式</code><br>
<img src="https://cdn.jsdelivr.net/gh/NTLx/Pic/PicGo/20201223100944.png" alt="" loading="lazy"></li>
<li>然后点击左侧导航栏底部的 <code>应用选项</code></li>
</ol>
<h3 id="设置智能代理">设置智能代理</h3>
<ol>
<li>单击 Chrome 浏览器地址栏右侧的 <code>SwitchyOmega</code> 图标<br>
<img src="https://cdn.jsdelivr.net/gh/NTLx/Pic/PicGo/20201223101021.png" alt="" loading="lazy"></li>
<li>选择 <code>auto switch</code><br>
<img src="https://cdn.jsdelivr.net/gh/NTLx/Pic/PicGo/20201223101011.png" alt="" loading="lazy"></li>
</ol>
<h3 id="设置全局代理-3">设置全局代理</h3>
<ol>
<li>单击 Chrome 浏览器地址栏右侧的 <code>SwitchyOmega</code> 图标<br>
<img src="https://cdn.jsdelivr.net/gh/NTLx/Pic/PicGo/20201223101021.png" alt="" loading="lazy"></li>
<li>选择 <code>proxy</code><br>
<img src="https://cdn.jsdelivr.net/gh/NTLx/Pic/PicGo/20201223101042.png" alt="" loading="lazy"></li>
</ol>
<h2 id="edge">Edge</h2>
<p>微软基于 <code>Chromium</code> 开发的新版 <code>Edge</code> 浏览器可从其自带插件商店安装 <code>SwithyOmega</code> 插件来使用网络代理，而且整个过程无需在系统开启全局代理的环境下操作。</p>
<h1 id="终端代理">终端代理</h1>
<blockquote>
<p>系统代理和浏览器代理均不会对终端生效，终端需单独配置代理</p>
</blockquote>
<pre><code class="language-bash">export http_proxy=&quot;http://winservice.cm.com:10809&quot;; export https_proxy=&quot;http://winservice.cm.com:10809&quot;; export ftp_proxy=&quot;http://winservice.cm.com:10809&quot;
</code></pre>
<p>或者</p>
<pre><code class="language-bash">export ALL_PROXY=socks5://winservice.cm.com:10808
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[PicGo]]></title>
        <id>http://www.ntlx.top/post/picgo/</id>
        <link href="http://www.ntlx.top/post/picgo/">
        </link>
        <updated>2021-06-10T02:48:36.000Z</updated>
        <summary type="html"><![CDATA[<p>Self build image hosting service solution, for Free !</p>
]]></summary>
        <content type="html"><![CDATA[<p>Self build image hosting service solution, for Free !</p>
<!-- more -->
<h1 id="introduction">Introduction</h1>
<p><a href="https://molunerfinn.com/PicGo/">PicGo</a> 是一款开源的跨平台<a href="https://baike.baidu.com/item/%E5%9B%BE%E5%BA%8A">图床</a>工具软件，我们用它来进行图片托管，实现文本与文件的分离。</p>
<h1 id="installation">Installation</h1>
<blockquote>
<p>以 Windows 系统为例</p>
</blockquote>
<ol>
<li>下载软件安装包：可从<a href="http://dsm.cm.com:100/d/f/549941883955099824">文件服务器</a>下载 <code>v2.2.2</code> 版本，或从<a href="https://github.com/Molunerfinn/PicGo/releases">官方 release</a> 下载最新版本</li>
<li>运行安装包，显示如下界面，点击 <code>下一步</code> 按钮即可<br>
<img src="https://cdn.jsdelivr.net/gh/NTLx/Pic/PicGo/20201225084555.png" alt="" loading="lazy"></li>
<li>接下来选择软件安装位置，一般保持默认即可，然后点击<code>安装</code>按钮<br>
<img src="https://cdn.jsdelivr.net/gh/NTLx/Pic/PicGo/20201225084609.png" alt="" loading="lazy"></li>
<li>待安装完成，点击<code>完成</code>按钮即可，此时可在系统的任务栏托盘上找到 PicGo 的图标：<br>
<img src="https://cdn.jsdelivr.net/gh/NTLx/Pic/PicGo/20201225084619.png" alt="" loading="lazy"></li>
<li>左键单击 PicGo 的任务栏图标可打开软件主界面：<br>
<img src="https://cdn.jsdelivr.net/gh/NTLx/Pic/PicGo/20201225084631.png" alt="" loading="lazy"></li>
<li>右键单击 PicGo 的任务栏图标可打开快捷菜单：<br>
<img src="https://cdn.jsdelivr.net/gh/NTLx/Pic/PicGo/20201225084641.png" alt="" loading="lazy"></li>
</ol>
<h1 id="setting">Setting</h1>
<p>PicGo 安装好后，需要进行一些配置才能正常使用。</p>
<h2 id="github-jsdeliver">GitHub + jsDeliver</h2>
<blockquote>
<p>使用 GitHub 作为免费图床，通过免费 CDN 加速图片加载</p>
</blockquote>
<p><a href="https://blog.csdn.net/Rivalsx/article/details/106994195">设置方法</a></p>
<h2 id="nextcloud">NextCloud</h2>
<blockquote>
<p>使用 NextCloud 作为云存储方案提供图床功能，这里以自建的 NextCloud 服务作为说明</p>
</blockquote>
<ol>
<li>打开软件主界面，在左侧导航栏点击 <code>插件设置</code>，然后输入 <code>nextcloud</code>，安装 <code>nextcloud-uploader</code> 插件（如果弹出提示“需要安装 Node”，根据提示安装 Node 即可）<br>
<img src="https://cdn.jsdelivr.net/gh/NTLx/Pic/PicGo/20201225084709.png" alt="" loading="lazy"></li>
<li>点击左侧导航栏中的 <code>图床设置</code>，然后在展开的列表里点击 <code>NextCloud图床</code></li>
<li>然后按照下图进行配置（配置参数仅作示例）：<br>
<img src="https://cdn.jsdelivr.net/gh/NTLx/Pic/PicGo/20201225084659.png" alt="" loading="lazy"></li>
</ol>
<blockquote>
<p>服务地址：<code>http://cloud.cubicise.com:82</code><br>
用户名：<code>PicGo</code><br>
密码：<code>password</code><br>
保存路径：<code>PicGo</code></p>
</blockquote>
<p>各项参数填写完毕后，点击 <code>确定</code> 按钮，然后点击 <code>设为默认图床</code> 按钮，关闭软件主界面即可</p>
<h1 id="usage">Usage</h1>
<p>请参考<a href="https://picgo.github.io/PicGo-Doc/zh/guide/">官方文档</a>。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Perl 科学计算代码片段]]></title>
        <id>http://www.ntlx.top/post/perl-ke-xue-ji-suan-dai-ma-pian-duan/</id>
        <link href="http://www.ntlx.top/post/perl-ke-xue-ji-suan-dai-ma-pian-duan/">
        </link>
        <updated>2021-06-08T02:54:13.000Z</updated>
        <summary type="html"><![CDATA[<p>Snippets collect.</p>
]]></summary>
        <content type="html"><![CDATA[<p>Snippets collect.</p>
<!-- more -->
<h1 id="分布函数">分布函数</h1>
<pre><code class="language-perl">my @ex8=(1,9,4,9,10,12,13,15,12,13);
my %hash=&amp;frequency(\@ex8);
print join(&quot;,&quot;,values %hash);
print join(&quot;,&quot;,keys %hash);

sub frequency{
    my($vec)=@_;
    my %hash;
    foreach(@$vec){
        ++$hash{$_};
    }
    return %hash;
}
</code></pre>
<h1 id="排序函数">排序函数</h1>
<pre><code class="language-perl">my @ex9=(1,9,4,9,10,12,13,15,12,13);
print join(',',&amp;sortf(&quot;numeric&quot;,&quot;asc&quot;,\@ex9));

sub sortf{
    my($type,$direction,$vec)=@_;
    my @vec_sort;
    if(($type eq &quot;numeric&quot;) &amp; ($direction eq &quot;asc&quot;)){
        @vec_sort=sort{$a&lt;=&gt;$b}@$vec;
    }
    if(($type eq &quot;numeric&quot;) &amp; ($direction eq &quot;desc&quot;)){
        @vec_sort=sort{$b&lt;=&gt;$a}@$vec;
    }
    if(($type eq &quot;string&quot;) &amp; ($direction eq &quot;asc&quot;)){
        @vec_sort=sort{$a cmp $b}@$vec;
    }
    if(($type eq &quot;string&quot;) &amp; ($direction eq &quot;desc&quot;)){
        @vec_sort=sort{$b cmp $a}@$vec;
    }
    return @vec_sort;
}
</code></pre>
<h1 id="众数">众数</h1>
<pre><code class="language-perl">my @ex10=(1,9,4,9,10,12,13,15,12,13);
print join(',',&amp;mode(\@ex10));

sub mode{
    my($vec)=@_;
    my %hash=&amp;frequency($vec);
    my @result;
    foreach(sort{ $hash{$b}&lt;=&gt;$hash{$a} }  keys %hash){
        last if @result &amp;&amp; $hash{$_} != $hash{$result[0]};
        push(@result,$_);
    }
    return @result;
}
</code></pre>
<h1 id="中位数">中位数</h1>
<pre><code class="language-perl">my @ex111=(1,9,4,5);
print &amp;median(\@ex11);
my @ex112=(1,9,4,5,5);

sub median{
    my($vec)=@_;
    my @vec1=&amp;sortf('numeric','asc',$vec);
    my $length=scalar @$vec;
    my $result;
    if($length % 2){
        $result=$vec1[($length-1)/2];
    }else{
        $result=($vec1[$length/2]+$vec1[$length/2-1])/2;
    }
    return $result;
}
</code></pre>
<h1 id="四分之一分位数">四分之一分位数</h1>
<pre><code class="language-perl">my @ex12=( 7, 15, 36, 39, 40, 41);
print join(',',&amp;quantile(\@ex12));

sub quantile{
    my($vec)=@_;
    my @vec1=&amp;sortf('numeric','asc',$vec);
    my $length=scalar @$vec+1;
    my($upper,$lower);
    if($length %4 ){
        my $temp1=int($length/4);
        my $temp2=int(3*$length/4);
        $upper=$vec1[$temp1-1]+($vec1[$temp1]-$vec1[$temp1-1])*($length/4-$temp1);
        $lower=$vec1[$temp2-1]+($vec1[$temp2]-$vec1[$temp2-1])*(3*$length/4-$temp2);
    }else{
        $upper=$vec1[$length/4-1];
        $lower=$vec1[3*$length/4-1];
    }
    my @result=($upper,$lower);
    return @result;
}
</code></pre>
<h1 id="最大值">最大值</h1>
<pre><code class="language-perl">my @ex13=( 7, 15, 36, 39, 40, 41);
print &amp;max(\@ex13);

sub max{
    my($vec)=@_;
    my @result=&amp;sortf('numeric','desc',$vec);
    return $result[0];
}
</code></pre>
<h1 id="最小值">最小值</h1>
<pre><code class="language-perl">my @ex14=( 7, 15, 36, 39, 40, 41);
print &amp;min(\@ex14);

sub min{
    my($vec)=@_;
    my @result=&amp;sortf('numeric','asc',$vec);
    return $result[0];
}
</code></pre>
<h1 id="标准化共2种方法">标准化，共2种方法</h1>
<pre><code class="language-perl">my @ex15=( 7, 15, 36, 39, 40, 41);
print join(',',&amp;scale(\@ex15,2));

sub scale{
    my($vec,$m)=@_;
    my @result;
    if($m eq 1){
        if(&amp;max($vec) eq &amp;min($vec)){
            die &quot;could not scale as range method!&quot;;
        }else{
            @result=map(($_-&amp;min($vec))/(&amp;max($vec)-&amp;min($vec)),@$vec);
            }
        return @result;
        }
        if($m eq  2){
            if(&amp;var($vec) eq 0){
            die &quot;could not scale as centered method!&quot;;
            }else{
                @result=map(($_-&amp;mean($vec))/&amp;sd($vec),@$vec);           
            }
            return @result;
        }
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[LanProxy by Docker]]></title>
        <id>http://www.ntlx.top/post/lanproxy-by-docker/</id>
        <link href="http://www.ntlx.top/post/lanproxy-by-docker/">
        </link>
        <updated>2021-05-25T10:19:31.000Z</updated>
        <summary type="html"><![CDATA[<p>For NAT traversal.<br>
Need a server which already had a public ip.</p>
]]></summary>
        <content type="html"><![CDATA[<p>For NAT traversal.<br>
Need a server which already had a public ip.</p>
<!-- more -->
<h1 id="server">Server</h1>
<blockquote>
<p>Must had a public ip already!</p>
</blockquote>
<h2 id="one-click-run">One-click run</h2>
<p><code>docker-compose.yml</code>:</p>
<pre><code class="language-yaml">version: '3.1'
services:
  lanproxy-client:
    image: franklin5/lanproxy-server
    container_name: lanproxy-server
    volumes:
     - ./config:/root/.lanproxy
    environment:
     - LANPROXY_USERNAME=your_username
     - LANPROXY_PASSWORD=your_password
    ports:
     # for web config UI
     - 8090:8090
     - 4900:4900
     - 4993:4993
     # for redirect port
     - 9000-9100:9000-9100
    restart: always
    logging:
      options:
        max-size: &quot;1m&quot;
</code></pre>
<h2 id="self-build">Self-build</h2>
<p><code>Dockerfile</code>:</p>
<pre><code class="language-Dockerfile">FROM alpine as git

WORKDIR /lanproxy

RUN apk update
RUN apk add git
RUN git clone https://github.com/NTLx/lanproxy.git ./

FROM maven as maven

WORKDIR /lanproxy

COPY --from=git /lanproxy ./

RUN mvn compile package -pl proxy-server -am 

RUN cd distribution &amp;&amp; DIR_NAME=$(echo `ls` | awk '{print $NF}') &amp;&amp; mv $DIR_NAME /lanproxy/lanproxy-server

FROM openjdk:8-jdk-alpine

WORKDIR /lanproxy-server

COPY --from=maven /lanproxy/lanproxy-server ./

EXPOSE 8090 4900 4993

CMD [&quot;sh&quot;, &quot;-c&quot;, &quot;sh bin/startup.sh &amp;&amp; tail -f logs/server.log&quot;]
</code></pre>
<p>Docker build CMD:</p>
<pre><code class="language-bash">docker build -t lanserver:v1 .
</code></pre>
<p><code>docker-compose.yml</code>:</p>
<pre><code class="language-yaml">version: '3.1'
services:
  lanproxy-client:
    image: lanserver:v1
    container_name: lanproxy-server
    volumes:
     - ./config:/root/.lanproxy
    environment:
     - LANPROXY_USERNAME=your_username
     - LANPROXY_PASSWORD=your_password
    ports:
     # for web config UI
     - 8090:8090
     - 4900:4900
     - 4993:4993
     # for redirect port
     - 9000-9100:9000-9100
    restart: always
    logging:
      options:
        max-size: &quot;1m&quot;
</code></pre>
<h1 id="client">Client</h1>
<blockquote>
<p><code>network_mode</code> is optional</p>
</blockquote>
<h2 id="one-click-run-2">One-click run</h2>
<p><code>docker-compose.yml</code>:</p>
<pre><code class="language-yaml">version: '3.1'
services:
  lanproxy-client:
    image: franklin5/lanproxy-client
    container_name: lanproxy-client
    environment:
     - LANPROXY_KEY=input_your_key
     - LANPROXY_HOST=input_your_host
    restart: always
    logging:
      options:
        max-size: &quot;1m&quot;
</code></pre>
<h2 id="self-build-2">Self-build</h2>
<p><code>Dockerfile</code> :</p>
<pre><code class="language-Dockerfile">FROM ubuntu

RUN apt update -y
RUN apt install openjdk-8-jdk -y
RUN apt install git -y

WORKDIR /
RUN git clone https://github.com/NTLx/lanproxy-client.git

ENTRYPOINT [&quot;/lanproxy-client/init.sh&quot;]
WORKDIR /lanproxy-client
# EXPOSE 8888
CMD [&quot;/bin/bash&quot;]
</code></pre>
<p>Docker build CMD:</p>
<pre><code class="language-bash">docker build -t lan:v1 .
</code></pre>
<p><code>docker-compose.yml</code>:</p>
<pre><code class="language-yaml">version: '3.1'
services:
  lanproxy-client:
    image: lan:v1
    container_name: lanproxy-client
    environment:
     - LANPROXY_KEY=input_your_key
     - LANPROXY_HOST=input_your_host
    restart: always
    network_mode: &quot;host&quot;
    logging:
      options:
        max-size: &quot;1m&quot;
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[How To Write]]></title>
        <id>http://www.ntlx.top/post/how-to-write/</id>
        <link href="http://www.ntlx.top/post/how-to-write/">
        </link>
        <updated>2021-05-21T02:13:53.000Z</updated>
        <summary type="html"><![CDATA[<p>Notes about how to write.</p>
]]></summary>
        <content type="html"><![CDATA[<p>Notes about how to write.</p>
<!-- more -->
<h1 id="grammar">Grammar</h1>
<h2 id="markdown">Markdown</h2>
<ul>
<li><a href="https://www.jianshu.com/p/q81RER">献给写作者的 Markdown 新手指南</a></li>
</ul>
<h2 id="latex">LaTeX</h2>
<ul>
<li><a href="http://dsm.cm.com:7777/d/f/544161148235200185">110分钟了解LaTeX2ε</a></li>
<li><a href="http://dsm.cm.com:7777/d/f/544161700862015618">latex123（大家来学LaTeX）</a></li>
</ul>
<h1 id="software">Software</h1>
<ul>
<li><a href="https://sspai.com/post/60116">VS Code 文本编辑器使用指南（基础篇）</a></li>
<li><a href="https://sspai.com/post/60117">VS Code 文本编辑器使用指南（进阶篇）</a></li>
</ul>
<h1 id="style">Style</h1>
<ul>
<li><a href="https://github.com/sparanoid/chinese-copywriting-guidelines">中文文案排版指北</a></li>
<li><a href="https://www.jianshu.com/p/3b638180e42c">技术文档写作规范</a></li>
<li><a href="https://github.com/google/styleguide/tree/ab48617e00be9d111804bd3715dd7b5f5732c9a3/docguide">Google documentation guide</a></li>
</ul>
<h1 id="automation">Automation</h1>
<ul>
<li><a href="https://sspai.com/post/60185">Microsoft Editor vs. Grammarly</a></li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Fonts]]></title>
        <id>http://www.ntlx.top/post/fonts/</id>
        <link href="http://www.ntlx.top/post/fonts/">
        </link>
        <updated>2021-05-21T02:11:57.000Z</updated>
        <summary type="html"><![CDATA[<p>Fonts collection.</p>
]]></summary>
        <content type="html"><![CDATA[<p>Fonts collection.</p>
<!-- more -->
<h1 id="recomendation">Recomendation</h1>
<h2 id="for-coding">For Coding</h2>
<p>推荐两款美观、护眼、符号全、辨识度高的 Mono Type 字体： <a href="http://192.168.10.133/EDL/files/MonacoforPowerline.zip">Monaco for Powerline</a>、<a href="http://192.168.10.133/EDL/files/FiraCode_1.206.zip">Fira Code</a></p>
<p>包含图标（符号更全）的字体集： <a href="https://www.nerdfonts.com/">Nerd Fonts</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[R]]></title>
        <id>http://www.ntlx.top/post/r/</id>
        <link href="http://www.ntlx.top/post/r/">
        </link>
        <updated>2021-05-21T02:09:44.000Z</updated>
        <summary type="html"><![CDATA[<p>R study notes.</p>
]]></summary>
        <content type="html"><![CDATA[<p>R study notes.</p>
<!-- more -->
<h1 id="grammar">Grammar</h1>
<p><a href="https://ntlx.github.io/blog/R_basic_learning.html">Basic: R script</a></p>
<h1 id="install-packages">Install Packages</h1>
<h2 id="within-conda">Within Conda</h2>
<p>For example, install bioconductor package karyoploteR</p>
<pre><code class="language-bash">/public/software/miniconda3/bin/conda install -n r3.6 -c bioconda bioconductor-karyoploteR
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Python]]></title>
        <id>http://www.ntlx.top/post/python/</id>
        <link href="http://www.ntlx.top/post/python/">
        </link>
        <updated>2021-05-21T02:07:11.000Z</updated>
        <summary type="html"><![CDATA[<p>Python study notes.</p>
]]></summary>
        <content type="html"><![CDATA[<p>Python study notes.</p>
<!-- more -->
<h1 id="basic-python-data-analysis">Basic: Python Data Analysis</h1>
<h2 id="notes">Notes</h2>
<ul>
<li><a href="https://ntlx.github.io/blog/Learn_Python/Day1_basic.html">Introduce &amp; basic</a></li>
<li><a href="https://ntlx.github.io/blog/Learn_Python/Day2_NumPy.html">NumPy</a></li>
<li><a href="https://ntlx.github.io/blog/Learn_Python/Day3_Pandas_1.html">Pandas 1st Part</a></li>
<li><a href="https://ntlx.github.io/blog/Learn_Python/Day4_Pandas_2.html">Pandas 2st Part</a></li>
<li><a href="https://ntlx.github.io/blog/Learn_Python/Day5_Pandas_3.html">Pandas 3st Part</a></li>
<li><a href="https://ntlx.github.io/blog/Learn_Python/Day6_matplotlib_1.html">matplotlib 1st Part</a></li>
<li><a href="https://ntlx.github.io/blog/Learn_Python/Day7_matplotlib_2.html">matplotlib 2st Part</a></li>
</ul>
<h2 id="practice">Practice</h2>
<ul>
<li><a href="https://ntlx.github.io/blog/Learn_Python/homework1_basic.html">Basic</a></li>
<li><a href="https://ntlx.github.io/blog/Learn_Python/homework2_numpy.html">NumPy</a></li>
<li><a href="https://ntlx.github.io/blog/Learn_Python/homework3_pandas_1.html">Pandas 1st Part</a></li>
<li><a href="https://ntlx.github.io/blog/Learn_Python/homework4_pandas_2.html">Pandas 2st Part</a></li>
<li><a href="https://ntlx.github.io/blog/Learn_Python/homework5_pandas_3.html">Pandas 3st Part</a></li>
<li><a href="https://ntlx.github.io/blog/Learn_Python/homework6_matplotlib_1.html">matplotlib 1st Part</a></li>
<li><a href="https://ntlx.github.io/blog/Learn_Python/homework7_matplotlib_2.html">matplotlib 2st Part</a></li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Git]]></title>
        <id>http://www.ntlx.top/post/git/</id>
        <link href="http://www.ntlx.top/post/git/">
        </link>
        <updated>2021-05-21T02:06:12.000Z</updated>
        <summary type="html"><![CDATA[<p>Usefull settings of Git.</p>
]]></summary>
        <content type="html"><![CDATA[<p>Usefull settings of Git.</p>
<!-- more -->
<h1 id="using-proxy">Using proxy</h1>
<pre><code class="language-bash">ssh-keygen -t rsa -b 4096 -C &quot;lx3325360@gmail.com&quot;
git config --global user.name &quot;NTLx&quot;
git config --global user.email &quot;lx3325360@gmail.com&quot;
git config --global http.proxy http://127.0.0.1:8888
git config --global https.proxy http://127.0.0.1:8888
</code></pre>
<h1 id="modify-commit-info">Modify commit info</h1>
<h2 id="change-author-info">Change Author Info</h2>
<h3 id="all">All</h3>
<pre><code class="language-bash">git filter-branch --env-filter 'export GIT_AUTHOR_EMAIL=new_author_email' --
</code></pre>
<blockquote>
<p><code>GIT_AUTHOR_NAME</code>, <code>GIT_COMMITTER_EMAIL</code>, <code>GIT_COMMITTER_NAME</code> could also be modified</p>
</blockquote>
<h3 id="specific">Specific</h3>
<pre><code class="language-bash">git filter-branch -f --env-filter '
OLD_EMAIL=&quot;Old@Email&quot;
CORRECT_NAME=&quot;Changed Name&quot;
CORRECT_EMAIL=&quot;Changed@Email&quot;
if [ &quot;$GIT_COMMITTER_EMAIL&quot; = &quot;$OLD_EMAIL&quot; ]
then
    export GIT_COMMITTER_NAME=&quot;$CORRECT_NAME&quot;
    export GIT_COMMITTER_EMAIL=&quot;$CORRECT_EMAIL&quot;
fi
if [ &quot;$GIT_AUTHOR_EMAIL&quot; = &quot;$OLD_EMAIL&quot; ]
then
    export GIT_AUTHOR_NAME=&quot;$CORRECT_NAME&quot;
    export GIT_AUTHOR_EMAIL=&quot;$CORRECT_EMAIL&quot;
fi
' --tag-name-filter cat -- --branches --tags
</code></pre>
<h1 id="log">Log</h1>
<h2 id="see-specific-author">See Specific Author</h2>
<pre><code class="language-bash">git log --author=&quot;Author Name&quot;
</code></pre>
<h1 id="notification-integration">Notification Integration</h1>
<h2 id="gitlab-telegram-bot-通知集成">GitLab &amp; Telegram Bot 通知集成</h2>
<p>Telegram 需科学上网使用</p>
<blockquote>
<p>在使用 GitLab 作为远程仓库时启用</p>
</blockquote>
<h3 id="telegram-bot通知集成">Telegram Bot通知集成</h3>
<ol>
<li>从 Telegram 搜索 <code>@gitlab_bot</code></li>
<li>加入 Bot 后点击底部 <code>START</code> 按钮会提示：</li>
</ol>
<figure data-type="image" tabindex="1"><img src="http://p5o85qxhq.bkt.clouddn.com/18-7-4/15846833.jpg" alt="" loading="lazy"></figure>
<blockquote>
<p>将完整URL提供给管理员即可完成 Telegram Bot 推送通知的设置</p>
</blockquote>
<h3 id="telegram-bot-推送示例">Telegram Bot 推送示例：</h3>
<figure data-type="image" tabindex="2"><img src="http://p5o85qxhq.bkt.clouddn.com/18-7-4/90816503.jpg" alt="" loading="lazy"></figure>
<p><strong>git 仓库的一切修改以 GitLab 仓库内容为核心，请先设置好 Telegram Bot，确保能正常获取 GitLab 仓库更新推送，修改本地 git 仓库任何文件之前先查看最近修改的推送，推荐先 pull 一下再进行本地修改，防止出现较复杂的合并冲突</strong></p>
<blockquote>
<p>大家可以登录 GitLab 仓库进行操作，提起分支合并请求（修改提交操作默认会开一个新的分支），也可以 clone 到本地修改后 push 到新的分支，提起合并请求</p>
</blockquote>
<figure data-type="image" tabindex="3"><img src="http://p5o85qxhq.bkt.clouddn.com/18-8-15/68912866.jpg" alt="" loading="lazy"></figure>
<p>Telegram Bot 的通知消息可以显示更多提交信息，推荐使用。</p>
<p>类似的，还可以在 GitLab 仓库集成 Slack 通知机器人、钉钉机器人等来获取仓库更新消息。</p>
<h1 id="tips">Tips</h1>
<ul>
<li>GitHub 上随便点开一个文件，把 url 的 <code>.com</code> 替换成 <code>.githistory.xyz</code> <a href="https://twitter.com/i/status/1265839242145460224">有惊喜</a></li>
<li><a href="github.com/hoxu/gitstats">gitstats</a></li>
</ul>
<h1 id="documents-collection">Documents Collection</h1>
<h2 id="cheat-sheet">Cheat Sheet</h2>
<p><a href="http://rogerdudler.github.io/git-guide/files/git_cheat_sheet.pdf">Check PDF</a></p>
<h2 id="the-simple-guide">The Simple Guide</h2>
<ul>
<li><a href="http://rogerdudler.github.io/git-guide/index.html">English Version</a></li>
<li><a href="http://rogerdudler.github.io/git-guide/index.zh.html">Chinese Version</a></li>
</ul>
<h2 id="git-配置最佳实践">Git 配置最佳实践</h2>
<p>原文链接： <a href="https://blog.scottnonnenberg.com/better-git-configuration/">blog.scottnonnenberg.com</a></p>
<p>我喜欢 <a href="https://git-scm.com/">Git</a>，<a href="https://github.com/scottnonnenberg/thoughts-system#other-files">每天</a>都在使用它。正如我<a href="https://blog.scottnonnenberg.com/eslint-part-1-exploration/#making-it-my-own">最近所做的事情</a>，花了一些时间通篇阅读文档，并检查我的全局 Git 配置。欢迎阅读<a href="https://blog.scottnonnenberg.com/tags/stack-improvements/">stack improvements</a>系列第四篇文章。</p>
<h3 id="一切都是git">一切都是Git</h3>
<p>我开始写代码的<a href="https://blog.scottnonnenberg.com/2017-twenty-years-online/">时代</a>还非常古老，那时候使用文件复制和<a href="https://en.wikipedia.org/wiki/Microsoft_Visual_SourceSafe">Visual SourceSafe</a>的方式进行源码管理。即使如此，我对源代码管理的概念也是非常吃惊的，我居然可以坐在家里撸代码。</p>
<p>后来，在加利福尼亚大学，在项目中我遇到 <a href="https://en.wikipedia.org/wiki/Concurrent_Versions_System">Concurrent Versions System (CVS)</a>，那时只有一些小项目，所以我当时并没有很好的理解它。</p>
<p>在微软工作的几年里，我使用 <a href="https://en.wikipedia.org/wiki/Team_Foundation_Server">Team Foundation Server</a> 进行代码管理，当时有个新名词“App Week”，指的是新接触 Visual Studio 的人将花费一整个星期的时间熟悉该产品，以确保它能正确工作。而在那段时间里，我所有的个人项目都是使用 <a href="https://en.wikipedia.org/wiki/Apache_Subversion">SVN</a>。它是免费而且容易在本地运行。通过它可以跟踪我所有的本地代码变化。</p>
<p>2010年秋天的时候，我在学习 <a href="http://rubyonrails.org/">Ruby on Rails</a> 来开发一个<a href="https://scottnonnenberg.com/work/#stark-raving-bits-2010-q-3-to-2011-q-2">项目</a>，通过查看教程，介绍了<a href="https://www.heroku.com/">Heroku</a> 和一个新的源代码管理系统：<strong>Git</strong>。这是令人吃惊的 - 我可以像它在本地托管一样对待它，同时也可以与他人互动。没有锁定，离线可用，智能合并。我爱上她了。</p>
<p>从此 Git <a href="https://rhodecode.com/insights/version-control-systems-2016">火了</a>。它成为了开源的标准。它在各种开源托管平台中使用。有许多GUI工具支持 - 专用的源代码控制工具以及代码编辑器。</p>
<p>所以，懂她非常重要。</p>
<h3 id="全局配置">全局配置</h3>
<p>不管你知不知道，其实你都已经有了一份 Git 全局配置。它是你 home 目录中的 <code>.gitconfig</code> 文件。大多数 <code>.gitconfig</code> 文件都包含你的用户名和电子邮件地址，是你在<a href="https://help.github.com/articles/set-up-git/">getting started with Git</a>过程中创建的。其实在这个文件中还有<a href="https://git-scm.com/docs/git-config#_variables">更多的配置项</a>。</p>
<p>我的整个 .gitconfig 可以<a href="https://gist.github.com/scottnonnenberg/fefa3f65fdb3715d25882f3023b31c29">通过这里查看</a>。需要的话可以直接到那里查看，不过本文我们将更详细地讨论每个部分。(也可以查看本页面中的<a href="#.gitconfig">示例</a>)</p>
<h4 id="alias">Alias</h4>
<p>.gitconfig 中有趣的部分是 <a href="https://git-scm.com/docs/git-config#git-config-alias">alias 部分</a>，您可以在其中创建自己的命令。感觉默认命令满足不了需求？在这里添加。有什么你不习惯的？在这里添加自己的版本吧！</p>
<ul>
<li><code>prune = fetch --prune</code> - 当在其他人将分支推送到远程仓库时，我也会得到了大量的本地分支。<a href="https://git-scm.com/docs/git-fetch#git-fetch--p">Prune</a>可以删除远端已经删除的任何本地分支。配置在这里，因为我总是忘记它。</li>
<li><code>undo = reset --soft HEAD ^</code> - 如果我在做出提交时犯了一个错误，这个命令会可以在提交之前撤销。通常我只是在这种情况下修改现有的提交，因为它保留了提交信息。</li>
<li><code>stash-all = stash save --include-untracked</code> - 当你正在开发，有人频繁的要求你切换分支时，<a href="https://git-scm.com/docs/git-stash">stash</a> 是非常有用的。这个命令确保当你 stash 时，可以记录没有被 <code>git add</code> 的新文件。</li>
<li><code>glog = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)%Creset'</code> - 使用<a href="https://git-scm.com/docs/git-log">默认 git log</a> 查看提交历史记录有时是无效率的，并没有真正关注最重要的信息。这种彩色的图形展示更容易理解，特别是当分支复杂的时候。</li>
</ul>
<h4 id="merge">Merge</h4>
<p>没有合并提交，没有合并两个历史记录，只是平滑的在两次提交之中。</p>
<p>你可能会想知道如何完成这项工作。答案用 <a href="https://git-scm.com/docs/git-rebase">git rebase</a>，用于把一个分支的修改合并到当前分支，它<a href="https://nathanleclaire.com/blog/2014/09/14/dont-be-scared-of-git-rebase/">非常有用</a></p>
<p>当我 pull 时与 <code>master</code> 有冲突的时候，我使用这种方式来处理。当你在本地分支上修改后，同时其他人在 <code>master</code> 上 做了修改，我想这样比你直接 merge 到你本地分支时的 commit 更好。</p>
<p>这样你可以避免多出一个 merge 的 commit。如果我打算新建一个merge commit，我可以用明确的 git merge -ff 来创建。</p>
<p>在发生合并冲突时，<code>conflictstyle = diff3</code> 会给您更多的信息。</p>
<h4 id="commit">Commit</h4>
<p><code>gpgSign = true</code> 确保您的所有 commit 都由你的 <a href="https://www.gnupg.org/">GPG</a> 密钥签名。这通常是一个好主意，因为 <code>.gitconfig</code> 文件中没有验证您的用户信息，这意味着看起来像您这样的提交可能会轻松显示在其他人的提交 信息中。</p>
<p>事实上，我曾经用过别人的凭据，因为帐户和机器配置耗时太长。我的提交请求是通过别人的帐号提交的，但内部的所有提交都是我的真实账号。</p>
<p><a href="https://help.github.com/articles/adding-a-new-gpg-key-to-your-github-account/">将你的 GPG key 添加到 Github</a> 并尝试一次提交，你可能就会解决你现在的疑问，您提交内容将会有<a href="https://github.com/scottnonnenberg/eslint-config-thehelp/pull/5/commits">一个“已验证”标记</a>。</p>
<p>注意：</p>
<ul>
<li>如果您有多个 GPG 密钥，可以使用 <a href="https://git-scm.com/docs/git-config#git-config-usersigningKey">user.signingKey</a> 选项指定要使用的密钥。</li>
<li>上述的配置在 GUI 工具里不会生效，你需要在工具里的设置里找配置项。</li>
<li><code>gpg-agent</code>可以保存口令，让我们更方便。所以使用它吧！</li>
</ul>
<h4 id="push">Push</h4>
<p><code>default = simple</code> 可能是你已经设置的<a href="https://git-scm.com/docs/git-config#git-config-pushdefault">配置项</a>。它可以更轻松地将您的本地分支推送到远程，当二者分支名一样的时候。</p>
<p><code>followTags = true</code> 很简单。配置它以后，当你 <code>git push</code> 的时候可以直接将本地的 tags 提交到远程，而不用每次都加参数 <code>--follow-tags</code>。不知道你是不是和我一样，我如果创建了一个tag，我就基本上一定会将它推到远程的。</p>
<h4 id="status">Status</h4>
<p><code>showUntrackedFiles = all</code> 通常当您添加一个新目录，但是还没有使用 <code>git add</code> 时，你用 <code>git status</code> 将只显示目录名称。这困扰我很多次了，因为一个新的，很大的一个目录目录却只显示一行。<a href="https://git-scm.com/docs/git-config#git-config-statusshowUntrackedFiles">此选项</a>在 <code>git status</code> 的时候显示该新目录下的所有文件。</p>
<p>注意：当仓库很大的时候，这可能会导致效率比较慢。</p>
<h4 id="transfer">Transfer</h4>
<p><code>fsckobjects = true</code> 告诉 Git，您希望在接收或发送修改时进行一些额外的检查。为什么要检查？毕竟发现错误赶早不赶晚！</p>
<p>注意：这可以使速度慢一些。</p>
<h4 id="diff-工具icdiff">Diff 工具：icdiff</h4>
<p>除了内置的 git diff 命令之外，Git 还允许您指定一个<a href="https://git-scm.com/docs/git-difftool">外部工具</a>来显示您的文件差异。下面配置可以配置默认使用 <a href="http://192.168.10.133/wiki/doku.php?id=oe_server:tools_on_server#icdiff">icdiff</a> 显示存储库的两个文件之间的差异：</p>
<pre><code class="language-ini">[diff]
  tool = icdiff
[difftool]
  prompt = false
[difftool &quot;icdiff&quot;]
  cmd = /usr/local/bin/icdiff --line-numbers $LOCAL $REMOTE
</code></pre>
<p>你可以像正常情况那样使用它：git difftool master branch</p>
<p><code>icdiff</code> 很有趣，因为它试图在控制台中生成多彩的 GitHub 风格的差异。比通常的基于块的差异样式<a href="https://blog.scottnonnenberg.com/top-ten-pull-request-review-mistakes/#3-unified-diffs">更容易阅读</a>。</p>
<p>注意：</p>
<ul>
<li>你可能安装 icdiff 有遇到一些问题。令人高兴的是，有一个简单的<a href="https://github.com/jeffkaufman/icdiff/issues/72">解决方法</a>。</li>
<li>将 <code>git diff</code> 当做备胎， <code>- icdiff</code> 似乎不会处理与<code>/dev/null</code>的比较。例如，在你添加一个新文件之后尝试 <code>git difftool --cached</code>。</li>
</ul>
<h3 id="bonus-more-revisions">Bonus: More revisions!</h3>
<p>你经常会用 git checkout master，对吧？在该命令中，<code>master</code> 是 <a href="https://git-scm.com/docs/gitrevisions">revisions</a> 的示例，是引用 master 分支中最新提交的简写。这些是常见的 revision 格式：</p>
<pre><code class="language-bash"># Check out a branch
git checkout branchname

# Check out a remote branch
git checkout remotes/origin/branchname

# Check out a specific commit
git checkout 158e4ef8409a7f115250309e1234567a44341404

# Check out most recent commit for current branch
git checkout HEAD
</code></pre>
<p>但事实证明，有一种语言来指定revisions。所有这些操作都适用于以上使用的任何名词：</p>
<pre><code class="language-bash"># ^ means 'first parent commit,' therefore the second-most recent commit in the master branch
git checkout master^

# If it's a merge commit, with more than one parent, this gets the second parent
git checkout master^2

# Same thing as three ^ characters - three 'first-parent' steps up the tree
git checkout master~3

# The first commit prior to a day ago
git checkout master@{yesterday}

# The first commit prior to 5 minutes ago
git checkout master@{5.minutes.ago}
</code></pre>
<p>您可以在<a href="https://git-scm.com/docs/gitrevisions">这里</a>找到所有支持的 revision 格式，我很惊讶它是多么全面！</p>
<p>记住，在一个 revision 中你可以使用大多数的 git 命令，比如：<code>git glog master@{10.days.ago}..master</code></p>
<h3 id="动起来吧">动起来吧！</h3>
<p>可以从我的 <code>.gitconfig</code> 开始，或者定制你自己的风格。你甚至可以像我一样更加深入了解命令列表和选项列表，更多的分享出去。</p>
<p>使 Git 对你最有用。Git 为减少 bug 以及解决代码重提提供了非常大的舒适性。动起来吧！</p>
<p>一些很好的资源：</p>
<ul>
<li><a href="https://git-scm.com/docs/git-config#_variables">这里</a>的配置需要具体项目具体分析。在项目配置文件中使用相同的格式：<code>project-dir / .git / config</code></li>
<li>获取所有 <code>git log</code> 配置的<a href="https://git-scm.com/docs/git-log#_options">最新信息</a></li>
<li><a href="https://git-scm.com/docs/gitrevisions">各个版本 Git</a></li>
<li><a href="https://mikegerwitz.com/papers/git-horror-story">了解签名</a></li>
<li><a href="http://https://hackernoon.com/lesser-known-git-commands-151a1918a60">自定义别名</a></li>
<li>有关 git 仓库损坏：
<ul>
<li><a href="https://groups.google.com/forum/#!topic/binary-transparency/f-BI4o8HZW0">https://groups.google.com/forum/#!topic/binary-transparency/f-BI4o8HZW0</a></li>
<li><a href="http://git.661346.n2.nabble.com/propagating-repo-corruption-across-clone-td7580504i40.html">http://git.661346.n2.nabble.com/propagating-repo-corruption-across-clone-td7580504i40.html</a></li>
</ul>
</li>
<li>对 Git 的复杂性感到沮丧？<a href="https://stevebennett.me/2012/02/24/10-things-i-hate-about-git/">猛击这里</a></li>
</ul>
<h3 id="gitconfig">.gitconfig</h3>
<pre><code class="language-ini">[user]
  email = scott@nonnenberg.com
  name = Scott Nonnenberg

[alias]
  prune = fetch --prune
  # Because I constantly forget how to do this
  # https://git-scm.com/docs/git-fetch#git-fetch--p

  undo = reset --soft HEAD^
  # Not quite as common as an amend, but still common
  # https://git-scm.com/docs/git-reset#git-reset-emgitresetemltmodegtltcommitgt

  stash-all = stash save --include-untracked
  # We wanna grab those pesky un-added files!
  # https://git-scm.com/docs/git-stash

  glog = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset'
  # No need for a GUI - a nice, colorful, graphical representation
  # https://git-scm.com/docs/git-log
  # via https://medium.com/@payload.dd/thanks-for-the-git-st-i-will-use-this-4da5839a21a4

[merge]
  ff = only
  # I pretty much never mean to do a real merge, since I use a rebase workflow.
  # Note: this global option applies to all merges, including those done during a git pull
  # https://git-scm.com/docs/git-config#git-config-mergeff

  conflictstyle = diff3
  # Standard diff is two sets of final changes. This introduces the original text before each side's changes.
  # https://git-scm.com/docs/git-config#git-config-mergeconflictStyle

[commit]
  gpgSign = true
  # &quot;other people can trust that the changes you've made really were made by you&quot;
  # https://help.github.com/articles/about-gpg/
  # https://git-scm.com/docs/git-config#git-config-commitgpgSign

[push]
  default = simple
  # &quot;push the current branch back to the branch whose changes are usually integrated into the current branch&quot;
  # &quot;refuse to push if the upstream branch’s name is different from the local one&quot;
  # https://git-scm.com/docs/git-config#git-config-pushdefault

  followTags = true
  # Because I get sick of telling git to do it manually
  # https://git-scm.com/docs/git-config#git-config-pushfollowTags

[status]
  showUntrackedFiles = all
  # Sometimes a newly-added folder, since it's only one line in git status, can slip under the radar.
  # https://git-scm.com/docs/git-config#git-config-statusshowUntrackedFiles

[transfer]
  fsckobjects = true
  # To combat repository corruption!
  # Note: this global option applies during receive and transmit
  # https://git-scm.com/docs/git-config#git-config-transferfsckObjects
  # via https://groups.google.com/forum/#!topic/binary-transparency/f-BI4o8HZW0


# A nice little github-like colorful, split diff right in the console.
# via http://owen.cymru/github-style-diff-in-terminal-with-icdiff/
[diff]
  tool = icdiff
[difftool]
  prompt = false
[difftool &quot;icdiff&quot;]
  cmd = /usr/local/bin/icdiff --line-numbers $LOCAL $REMOTE
</code></pre>
]]></content>
    </entry>
</feed>